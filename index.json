{
  "api/ZeroInstall.Archives.BuilderExtensions.html": {
    "href": "api/ZeroInstall.Archives.BuilderExtensions.html",
    "title": "Class BuilderExtensions | Zero Install .NET API",
    "summary": "Class BuilderExtensions Namespace ZeroInstall.Archives Assembly ZeroInstall.Archives.dll Helpers for adding Archives to IBuilders. public static class BuilderExtensions Inheritance object BuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(IBuilder, DownloadRetrievalMethod, Stream, ITaskHandler, object?) Adds a downloaded file to the implementation. public static void Add(this IBuilder builder, DownloadRetrievalMethod retrievalMethod, Stream stream, ITaskHandler handler, object? tag = null) Parameters builder IBuilder The builder. retrievalMethod DownloadRetrievalMethod The metadata of the file. stream Stream The contents of the file. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. tag object A Tag used to group progress bars. Usually Best. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddArchive(IBuilder, Archive, Stream, ITaskHandler, object?) Adds an archive to the implementation. public static void AddArchive(this IBuilder builder, Archive archive, Stream stream, ITaskHandler handler, object? tag = null) Parameters builder IBuilder The builder. archive Archive The metadata of the archive. stream Stream The archive data to be extracted. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. tag object A Tag used to group progress bars. Usually Best. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Builders.ArchiveBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.ArchiveBuilder.html",
    "title": "Class ArchiveBuilder | Zero Install .NET API",
    "summary": "Class ArchiveBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds implementation archive files. public static class ArchiveBuilder Inheritance object ArchiveBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SupportedMimeTypes All supported MIME types for creating archives. This is a subset of KnownMimeTypes public static readonly string[] SupportedMimeTypes Field Value string[] Methods Create(Stream, string, bool) Creates a new ArchiveBuilder for creating an archive and writing it to a stream. [MustDisposeResource] public static IArchiveBuilder Create(Stream stream, string mimeType, bool fast = false) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed. mimeType string The MIME type of archive format to create. fast bool The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. Returns IArchiveBuilder Exceptions NotSupportedException The mimeType doesn't belong to a known and supported archive type. Create(string, string, bool) Creates a new ArchiveBuilder for creating an archive and writing it to a file. [MustDisposeResource] public static IArchiveBuilder Create(string path, string mimeType, bool fast = false) Parameters path string The path of the archive file to create. mimeType string The MIME type of archive format to create. fast bool The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. Returns IArchiveBuilder Exceptions NotSupportedException The mimeType doesn't belong to a known and supported archive type. IOException Failed to create the archive file. UnauthorizedAccessException Write access to the archive file was denied. RunForDirectory(string, string, string, ITaskHandler) Create an archive from a directory and writes it to a file. public static void RunForDirectory(string sourcePath, string archivePath, string mimeType, ITaskHandler handler) Parameters sourcePath string The path of the directory to read. archivePath string The path of the archive file to create. mimeType string The MIME type of archive format to create. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions NotSupportedException The mimeType doesn't belong to a known and supported archive type. IOException Failed to read the directory or create the archive file. UnauthorizedAccessException Read access to the directory or write access to the archive file was denied."
  },
  "api/ZeroInstall.Archives.Builders.IArchiveBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.IArchiveBuilder.html",
    "title": "Interface IArchiveBuilder | Zero Install .NET API",
    "summary": "Interface IArchiveBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds an implementation archive file. public interface IArchiveBuilder : IForwardOnlyBuilder, IDisposable Inherited Members IForwardOnlyBuilder.AddDirectory(string) IForwardOnlyBuilder.AddFile(string, Stream, UnixTime, bool) IForwardOnlyBuilder.AddSymlink(string, string) IForwardOnlyBuilder.AddHardlink(string, string, bool) IDisposable.Dispose()"
  },
  "api/ZeroInstall.Archives.Builders.TarBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.TarBuilder.html",
    "title": "Class TarBuilder | Zero Install .NET API",
    "summary": "Class TarBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds a TAR archive (.tar). [MustDisposeResource] public class TarBuilder : IArchiveBuilder, IForwardOnlyBuilder, IDisposable Inheritance object TarBuilder Implements IArchiveBuilder IForwardOnlyBuilder IDisposable Derived TarBz2Builder TarGzBuilder TarLzipBuilder TarZstandardBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TarBuilder(Stream) Builds a TAR archive (.tar). public TarBuilder(Stream stream) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed. Methods AddDirectory(string) Adds a subdirectory to the implementation. public void AddDirectory(string path) Parameters path string The path of the directory to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddFile(string, Stream, UnixTime, bool) Adds a file to the implementation. public void AddFile(string path, Stream stream, UnixTime modifiedTime, bool executable = false) Parameters path string The path of the file to create relative to the implementation root. stream Stream The contents of the file. modifiedTime UnixTime The last write time to set for the file. executable bool true if the file's executable bit is to be set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddHardlink(string, string, bool) Adds a hardlink to the implementation. public void AddHardlink(string path, string target, bool executable = false) Parameters path string The path of the hardlink to create relative to the implementation root. target string The path of the existing file the hardlink shall be based on relative to the implementation root. Must point executable bool true if the executable bit of the hardlink is set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. NotSupportedException The currently platform or builder does not support hardlinks. Use AddFile(string, Stream, UnixTime, bool) instead. AddSymlink(string, string) Adds a symbolic link to the implementation. public void AddSymlink(string path, string target) Parameters path string The path of the symlink to create relative to the implementation root. target string The target the symbolic link shall point to relative to path. May use non-native path separators. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public virtual void Dispose()"
  },
  "api/ZeroInstall.Archives.Builders.TarBz2Builder.html": {
    "href": "api/ZeroInstall.Archives.Builders.TarBz2Builder.html",
    "title": "Class TarBz2Builder | Zero Install .NET API",
    "summary": "Class TarBz2Builder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds a BZip2-compressed TAR archive (.tar.bz2). [MustDisposeResource] public class TarBz2Builder : TarBuilder, IArchiveBuilder, IForwardOnlyBuilder, IDisposable Inheritance object TarBuilder TarBz2Builder Implements IArchiveBuilder IForwardOnlyBuilder IDisposable Inherited Members TarBuilder.Dispose() TarBuilder.AddDirectory(string) TarBuilder.AddFile(string, Stream, UnixTime, bool) TarBuilder.AddSymlink(string, string) TarBuilder.AddHardlink(string, string, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TarBz2Builder(Stream, bool) Builds a BZip2-compressed TAR archive (.tar.bz2). public TarBz2Builder(Stream stream, bool fast = false) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed. fast bool The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed."
  },
  "api/ZeroInstall.Archives.Builders.TarGzBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.TarGzBuilder.html",
    "title": "Class TarGzBuilder | Zero Install .NET API",
    "summary": "Class TarGzBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds a GZip-compressed TAR archive (.tar.gz). [MustDisposeResource] public class TarGzBuilder : TarBuilder, IArchiveBuilder, IForwardOnlyBuilder, IDisposable Inheritance object TarBuilder TarGzBuilder Implements IArchiveBuilder IForwardOnlyBuilder IDisposable Inherited Members TarBuilder.Dispose() TarBuilder.AddDirectory(string) TarBuilder.AddFile(string, Stream, UnixTime, bool) TarBuilder.AddSymlink(string, string) TarBuilder.AddHardlink(string, string, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TarGzBuilder(Stream, bool) Builds a GZip-compressed TAR archive (.tar.gz). public TarGzBuilder(Stream stream, bool fast = false) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed. fast bool The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed."
  },
  "api/ZeroInstall.Archives.Builders.TarLzipBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.TarLzipBuilder.html",
    "title": "Class TarLzipBuilder | Zero Install .NET API",
    "summary": "Class TarLzipBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds a Lzip-compressed TAR archive (.tar.lz). [MustDisposeResource] public class TarLzipBuilder : TarBuilder, IArchiveBuilder, IForwardOnlyBuilder, IDisposable Inheritance object TarBuilder TarLzipBuilder Implements IArchiveBuilder IForwardOnlyBuilder IDisposable Inherited Members TarBuilder.Dispose() TarBuilder.AddDirectory(string) TarBuilder.AddFile(string, Stream, UnixTime, bool) TarBuilder.AddSymlink(string, string) TarBuilder.AddHardlink(string, string, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TarLzipBuilder(Stream) Builds a Lzip-compressed TAR archive (.tar.lz). public TarLzipBuilder(Stream stream) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed."
  },
  "api/ZeroInstall.Archives.Builders.TarZstandardBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.TarZstandardBuilder.html",
    "title": "Class TarZstandardBuilder | Zero Install .NET API",
    "summary": "Class TarZstandardBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds a Zstandard-compressed TAR archive (tar.zst). [MustDisposeResource] public class TarZstandardBuilder : TarBuilder, IArchiveBuilder, IForwardOnlyBuilder, IDisposable Inheritance object TarBuilder TarZstandardBuilder Implements IArchiveBuilder IForwardOnlyBuilder IDisposable Inherited Members TarBuilder.AddDirectory(string) TarBuilder.AddFile(string, Stream, UnixTime, bool) TarBuilder.AddSymlink(string, string) TarBuilder.AddHardlink(string, string, bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TarZstandardBuilder(Stream, bool) Builds a Zstandard-compressed TAR archive (tar.zst). public TarZstandardBuilder(Stream stream, bool fast = false) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed. fast bool The compression operation should complete as quickly as possible, even if the resulting file is not optimally compressed. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose()"
  },
  "api/ZeroInstall.Archives.Builders.ZipBuilder.html": {
    "href": "api/ZeroInstall.Archives.Builders.ZipBuilder.html",
    "title": "Class ZipBuilder | Zero Install .NET API",
    "summary": "Class ZipBuilder Namespace ZeroInstall.Archives.Builders Assembly ZeroInstall.Archives.dll Builds a ZIP archive (.zip). [MustDisposeResource] public class ZipBuilder : IArchiveBuilder, IForwardOnlyBuilder, IDisposable Inheritance object ZipBuilder Implements IArchiveBuilder IForwardOnlyBuilder IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZipBuilder(Stream) Builds a ZIP archive (.zip). public ZipBuilder(Stream stream) Parameters stream Stream The stream to write the archive to. Will be disposed when the builder is disposed. Methods AddDirectory(string) Adds a subdirectory to the implementation. public void AddDirectory(string path) Parameters path string The path of the directory to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddFile(string, Stream, UnixTime, bool) Adds a file to the implementation. public void AddFile(string path, Stream stream, UnixTime modifiedTime, bool executable = false) Parameters path string The path of the file to create relative to the implementation root. stream Stream The contents of the file. modifiedTime UnixTime The last write time to set for the file. executable bool true if the file's executable bit is to be set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddHardlink(string, string, bool) Adds a hardlink to the implementation. public void AddHardlink(string path, string target, bool executable = false) Parameters path string The path of the hardlink to create relative to the implementation root. target string The path of the existing file the hardlink shall be based on relative to the implementation root. Must point executable bool true if the executable bit of the hardlink is set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. NotSupportedException The currently platform or builder does not support hardlinks. Use AddFile(string, Stream, UnixTime, bool) instead. AddSymlink(string, string) Adds a symbolic link to the implementation. public void AddSymlink(string path, string target) Parameters path string The path of the symlink to create relative to the implementation root. target string The target the symbolic link shall point to relative to path. May use non-native path separators. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/ZeroInstall.Archives.Builders.html": {
    "href": "api/ZeroInstall.Archives.Builders.html",
    "title": "Namespace ZeroInstall.Archives.Builders | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Archives.Builders Building archives (.zip, .tar, etc.). Classes ArchiveBuilder Builds implementation archive files. TarBuilder Builds a TAR archive (.tar). TarBz2Builder Builds a BZip2-compressed TAR archive (.tar.bz2). TarGzBuilder Builds a GZip-compressed TAR archive (.tar.gz). TarLzipBuilder Builds a Lzip-compressed TAR archive (.tar.lz). TarZstandardBuilder Builds a Zstandard-compressed TAR archive (tar.zst). ZipBuilder Builds a ZIP archive (.zip). Interfaces IArchiveBuilder Builds an implementation archive file."
  },
  "api/ZeroInstall.Archives.Extractors.ArchiveExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.ArchiveExtractor.html",
    "title": "Class ArchiveExtractor | Zero Install .NET API",
    "summary": "Class ArchiveExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts implementation archives. public abstract class ArchiveExtractor : IArchiveExtractor Inheritance object ArchiveExtractor Implements IArchiveExtractor Derived CabExtractor DmgExtractor MsiExtractor RarExtractor SevenZipExtractor TarExtractor ZipExtractor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ArchiveExtractor(ITaskHandler) Extracts implementation archives. protected ArchiveExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Fields Handler A callback object used when the user needs to be informed about IO tasks. protected readonly ITaskHandler Handler Field Value ITaskHandler Properties Tag A Tag to set for see cref=\"ITask\"/>s spawned by this extractor; can be null. public object? Tag { get; set; } Property Value object Methods EnsureFile(Stream, Action<string>) Ensures that a Stream represents an on-disk file, creating a temporary on-disk copy if necessary. protected static void EnsureFile(Stream stream, Action<string> callback) Parameters stream Stream The stream to read. May be Close()d. callback Action<string> Called with the file path. EnsureSeekable(Stream, Action<Stream>) Ensures that a Stream is fully seekable, creating a temporary on-disk copy if necessary. protected void EnsureSeekable(Stream stream, Action<Stream> callback) Parameters stream Stream The stream to read. callback Action<Stream> Called with the original stream or a temporary seekable copy. Extract(IBuilder, Stream, string?) Extracts an archive. public abstract void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive. For(string, ITaskHandler) Creates a new IArchiveExtractor for a specific type of archive. public static IArchiveExtractor For(string mimeType, ITaskHandler handler) Parameters mimeType string The MIME type of archive format to extract. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Returns IArchiveExtractor Exceptions NotSupportedException No extractor registered for mimeType. NormalizePath(string?, string?) Normalizes the path of an archive entry. protected static string? NormalizePath(string? path, string? subDir) Parameters path string The Unix-style path of the archive entry relative to the archive's root. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Returns string The relative path without the subDir; null if the path doesn't lie within the subDir. Register(string, Func<ITaskHandler, IArchiveExtractor>) Registers an additional IArchiveExtractor. public static void Register(string mimeType, Func<ITaskHandler, IArchiveExtractor> factory) Parameters mimeType string The MIME type of archive format the extractor handles. factory Func<ITaskHandler, IArchiveExtractor> Callback providing instances of the extractor."
  },
  "api/ZeroInstall.Archives.Extractors.CabExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.CabExtractor.html",
    "title": "Class CabExtractor | Zero Install .NET API",
    "summary": "Class CabExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts MS Cabinets (.cab). public class CabExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor CabExtractor Implements IArchiveExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors CabExtractor(ITaskHandler) Extracts MS Cabinets (.cab). public CabExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Exceptions PlatformNotSupportedException The current platform is not Windows. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.DmgExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.DmgExtractor.html",
    "title": "Class DmgExtractor | Zero Install .NET API",
    "summary": "Class DmgExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts Apple Disk images (.dmg). public class DmgExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor DmgExtractor Implements IArchiveExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors DmgExtractor(ITaskHandler) Extracts Apple Disk images (.dmg). public DmgExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Exceptions PlatformNotSupportedException The current platform is not macOS. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.IArchiveExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.IArchiveExtractor.html",
    "title": "Interface IArchiveExtractor | Zero Install .NET API",
    "summary": "Interface IArchiveExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts implementation archives. public interface IArchiveExtractor Remarks Implementations of this interface are immutable and thread-safe. Properties Tag A Tag to set for see cref=\"ITask\"/>s spawned by this extractor; can be null. object? Tag { get; set; } Property Value object Methods Extract(IBuilder, Stream, string?) Extracts an archive. void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.MsiExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.MsiExtractor.html",
    "title": "Class MsiExtractor | Zero Install .NET API",
    "summary": "Class MsiExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts Windows Installer packages (.msi) with one or more embedded CAB archives. public class MsiExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor MsiExtractor Implements IArchiveExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors MsiExtractor(ITaskHandler) Extracts Windows Installer packages (.msi) with one or more embedded CAB archives. public MsiExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Exceptions PlatformNotSupportedException The current platform is not Windows. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.RarExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.RarExtractor.html",
    "title": "Class RarExtractor | Zero Install .NET API",
    "summary": "Class RarExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts RAR archives (.rar). public class RarExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor RarExtractor Implements IArchiveExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors RarExtractor(ITaskHandler) Extracts RAR archives (.rar). public RarExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.RubyGemExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.RubyGemExtractor.html",
    "title": "Class RubyGemExtractor | Zero Install .NET API",
    "summary": "Class RubyGemExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts Ruby Gem archives (.gem). public class RubyGemExtractor : TarGzExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarGzExtractor RubyGemExtractor Implements IArchiveExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors RubyGemExtractor(ITaskHandler) Extracts Ruby Gem archives (.gem). public RubyGemExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.SevenZipExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.SevenZipExtractor.html",
    "title": "Class SevenZipExtractor | Zero Install .NET API",
    "summary": "Class SevenZipExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts 7-zip archives (.7z). public class SevenZipExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor SevenZipExtractor Implements IArchiveExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors SevenZipExtractor(ITaskHandler) Extracts 7-zip archives (.7z). public SevenZipExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarBz2Extractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarBz2Extractor.html",
    "title": "Class TarBz2Extractor | Zero Install .NET API",
    "summary": "Class TarBz2Extractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts BZip2-compressed TAR archives (.tar.bz2). public class TarBz2Extractor : TarExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarBz2Extractor Implements IArchiveExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarBz2Extractor(ITaskHandler) Extracts BZip2-compressed TAR archives (.tar.bz2). public TarBz2Extractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarExtractor.html",
    "title": "Class TarExtractor | Zero Install .NET API",
    "summary": "Class TarExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts TAR archives (.tar). public class TarExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor Implements IArchiveExtractor Derived TarBz2Extractor TarGzExtractor TarLzipExtractor TarLzmaExtractor TarXzExtractor TarZstandardExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarExtractor(ITaskHandler) Extracts TAR archives (.tar). public TarExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Fields DefaultMode The default Mode. public const int DefaultMode = 420 Field Value int ExecuteMode The Mode that indicate a TAR entry is an executable. public const int ExecuteMode = 73 Field Value int Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarGzExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarGzExtractor.html",
    "title": "Class TarGzExtractor | Zero Install .NET API",
    "summary": "Class TarGzExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts GZip-compressed TAR archives (.tar.gz). public class TarGzExtractor : TarExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarGzExtractor Implements IArchiveExtractor Derived RubyGemExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarGzExtractor(ITaskHandler) Extracts GZip-compressed TAR archives (.tar.gz). public TarGzExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarLzipExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarLzipExtractor.html",
    "title": "Class TarLzipExtractor | Zero Install .NET API",
    "summary": "Class TarLzipExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts Lzip-compressed TAR archives (.tar.lz). public class TarLzipExtractor : TarExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarLzipExtractor Implements IArchiveExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarLzipExtractor(ITaskHandler) Extracts Lzip-compressed TAR archives (.tar.lz). public TarLzipExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarLzmaExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarLzmaExtractor.html",
    "title": "Class TarLzmaExtractor | Zero Install .NET API",
    "summary": "Class TarLzmaExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts LZMA-compressed TAR archives (.tar.lzma). public class TarLzmaExtractor : TarExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarLzmaExtractor Implements IArchiveExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarLzmaExtractor(ITaskHandler) Extracts LZMA-compressed TAR archives (.tar.lzma). public TarLzmaExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarXzExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarXzExtractor.html",
    "title": "Class TarXzExtractor | Zero Install .NET API",
    "summary": "Class TarXzExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts XZ-compressed TAR archives (tar.xz). public class TarXzExtractor : TarExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarXzExtractor Implements IArchiveExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarXzExtractor(ITaskHandler) Extracts XZ-compressed TAR archives (tar.xz). public TarXzExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.TarZstandardExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.TarZstandardExtractor.html",
    "title": "Class TarZstandardExtractor | Zero Install .NET API",
    "summary": "Class TarZstandardExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts Zstandard-compressed TAR archives (tar.zst). public class TarZstandardExtractor : TarExtractor, IArchiveExtractor Inheritance object ArchiveExtractor TarExtractor TarZstandardExtractor Implements IArchiveExtractor Inherited Members TarExtractor.DefaultMode TarExtractor.ExecuteMode ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TarZstandardExtractor(ITaskHandler) Extracts Zstandard-compressed TAR archives (tar.zst). public TarZstandardExtractor(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks This class is immutable and thread-safe. Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.ZipExtractor.html": {
    "href": "api/ZeroInstall.Archives.Extractors.ZipExtractor.html",
    "title": "Class ZipExtractor | Zero Install .NET API",
    "summary": "Class ZipExtractor Namespace ZeroInstall.Archives.Extractors Assembly ZeroInstall.Archives.dll Extracts ZIP archives (.zip). public class ZipExtractor : ArchiveExtractor, IArchiveExtractor Inheritance object ArchiveExtractor ZipExtractor Implements IArchiveExtractor Inherited Members ArchiveExtractor.Register(string, Func<ITaskHandler, IArchiveExtractor>) ArchiveExtractor.For(string, ITaskHandler) ArchiveExtractor.Handler ArchiveExtractor.Tag ArchiveExtractor.EnsureSeekable(Stream, Action<Stream>) ArchiveExtractor.EnsureFile(Stream, Action<string>) ArchiveExtractor.NormalizePath(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZipExtractor(ITaskHandler) Extracts ZIP archives (.zip). public ZipExtractor(ITaskHandler handler) Parameters handler ITaskHandler Fields DefaultAttributes The default ExternalFileAttributes. public const int DefaultAttributes = 27525120 Field Value int ExecuteAttributes The ExternalFileAttributes that indicate a ZIP entry is an executable file. public const int ExecuteAttributes = 4784128 Field Value int SymlinkAttributes The ExternalFileAttributes that indicate a ZIP entry is a symlink. public const int SymlinkAttributes = 536870912 Field Value int Methods Extract(IBuilder, Stream, string?) Extracts an archive. public override void Extract(IBuilder builder, Stream stream, string? subDir = null) Parameters builder IBuilder The builder receiving the extracted files. stream Stream The archive data to be extracted. subDir string The Unix-style path of the subdirectory in the archive to extract; null to extract entire archive. Exceptions OperationCanceledException The operation was canceled. IOException A problem occurred while extracting the archive."
  },
  "api/ZeroInstall.Archives.Extractors.html": {
    "href": "api/ZeroInstall.Archives.Extractors.html",
    "title": "Namespace ZeroInstall.Archives.Extractors | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Archives.Extractors Extracting archives (.zip, .tar, etc.). Classes ArchiveExtractor Extracts implementation archives. CabExtractor Extracts MS Cabinets (.cab). DmgExtractor Extracts Apple Disk images (.dmg). MsiExtractor Extracts Windows Installer packages (.msi) with one or more embedded CAB archives. RarExtractor Extracts RAR archives (.rar). RubyGemExtractor Extracts Ruby Gem archives (.gem). SevenZipExtractor Extracts 7-zip archives (.7z). TarBz2Extractor Extracts BZip2-compressed TAR archives (.tar.bz2). TarExtractor Extracts TAR archives (.tar). TarGzExtractor Extracts GZip-compressed TAR archives (.tar.gz). TarLzipExtractor Extracts Lzip-compressed TAR archives (.tar.lz). TarLzmaExtractor Extracts LZMA-compressed TAR archives (.tar.lzma). TarXzExtractor Extracts XZ-compressed TAR archives (tar.xz). TarZstandardExtractor Extracts Zstandard-compressed TAR archives (tar.zst). ZipExtractor Extracts ZIP archives (.zip). Interfaces IArchiveExtractor Extracts implementation archives."
  },
  "api/ZeroInstall.Archives.html": {
    "href": "api/ZeroInstall.Archives.html",
    "title": "Namespace ZeroInstall.Archives | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Archives Extracting and building archives (.zip, .tar, etc.). NuGet package: ZeroInstall.Archives Namespaces ZeroInstall.Archives.Builders Building archives (.zip, .tar, etc.). ZeroInstall.Archives.Extractors Extracting archives (.zip, .tar, etc.). Classes BuilderExtensions Helpers for adding Archives to IBuilders."
  },
  "api/ZeroInstall.Client.IZeroInstallClient.html": {
    "href": "api/ZeroInstall.Client.IZeroInstallClient.html",
    "title": "Interface IZeroInstallClient | Zero Install .NET API",
    "summary": "Interface IZeroInstallClient Namespace ZeroInstall.Client Assembly ZeroInstall.Client.dll Client for invoking Zero Install commands from within other applications. public interface IZeroInstallClient Methods AuditAsync() Checks that all implementations in the cache are undamaged. Task AuditAsync() Returns Task Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. DownloadAsync(Requirements, bool) Downloads a program and compatible versions of all of its dependencies. Task<Selections> DownloadAsync(Requirements requirements, bool refresh = false) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. Returns Task<Selections> The downloaded implementations. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. InvalidOperationException 0install reported a solver error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. FetchAsync(Implementation) Downloads a set of Implementations. Task FetchAsync(Implementation implementation) Parameters implementation Implementation The implementations to download. Returns Task Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. GetIntegration(FeedUri, bool) Returns the desktop integration categories that are currently applied for a specific feed. ISet<string> GetIntegration(FeedUri uri, bool machineWide = false) Parameters uri FeedUri The feed URI of the application. machineWide bool Get machine-wide desktop integration instead of just for the current user. Returns ISet<string> The access point categories (e.g., capability-registration, menu-entry, desktop-icon). Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. GetRunStartInfo(Requirements, bool, bool, params string[]) Provides a ProcessStartInfo for running a program via Zero Install. This allows you to wait for the program to exit and/or to capture its output. ProcessStartInfo GetRunStartInfo(Requirements requirements, bool refresh = false, bool needsTerminal = false, params string[] arguments) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. needsTerminal bool Indicates that the program requires a terminal in order to run. arguments string[] Additional arguments to pass to the program. Returns ProcessStartInfo IntegrateAsync(FeedUri, IEnumerable<string>?, IEnumerable<string>?, bool) Adds an application to the application list (if missing) and integrates it into the desktop environment. Task IntegrateAsync(FeedUri uri, IEnumerable<string>? add = null, IEnumerable<string>? remove = null, bool machineWide = false) Parameters uri FeedUri The feed URI of the application. add IEnumerable<string> The access point categories to add (e.g., capability-registration, menu-entry, desktop-icon). remove IEnumerable<string> The access point categories to remove (e.g., capability-registration, menu-entry, desktop-icon). machineWide bool Apply the operation machine-wide instead of just for the current user. Returns Task Exceptions NotAdminException machineWide was set but the current process is not running with admin rights. IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file or an invalid signature. InvalidOperationException 0install reported a conflict with existing desktop integration. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. Remove(FeedUri, bool) Removes an application from the application list and undoes any desktop environment integration. void Remove(FeedUri uri, bool machineWide = false) Parameters uri FeedUri The feed URI of the application. machineWide bool Apply the operation machine-wide instead of just for the current user. Exceptions NotAdminException machineWide was set but the current process is not running with admin rights. IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. Run(Requirements, bool, bool, params string[]) Runs a program via Zero Install. Does not wait for the program to exit. void Run(Requirements requirements, bool refresh = false, bool needsTerminal = false, params string[] arguments) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. needsTerminal bool Indicates that the program requires a terminal in order to run. arguments string[] Additional arguments to pass to the program. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. InvalidOperationException 0install reported a solver or executor error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install or the target program returned an error. SelectAsync(Requirements, bool, bool) Selects a program and compatible versions of all of its dependencies. Task<Selections> SelectAsync(Requirements requirements, bool refresh = false, bool offline = false) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. offline bool Do not refresh feeds even if they are out-of-date and don't select newer versions of programs for downloading even if they are already known. Returns Task<Selections> The selected implementations. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file or an invalid signature. InvalidOperationException 0install reported a solver error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. TrustKey(string, string) Trusts feeds from a specific domain when signed with a specific key. void TrustKey(string fingerprint, string domain) Parameters fingerprint string The fingerprint of the key to trust. domain string The domain the key should be trusted for. UpdateAsync(Requirements) Checks for updates to a program and downloads them if found. Task<bool> UpdateAsync(Requirements requirements) Parameters requirements Requirements The requirements describing the program. Returns Task<bool> true if updates where found and downloaded; false if no updates where found. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. InvalidOperationException 0install reported a solver error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error."
  },
  "api/ZeroInstall.Client.TemporarilyUnavailableException.html": {
    "href": "api/ZeroInstall.Client.TemporarilyUnavailableException.html",
    "title": "Class TemporarilyUnavailableException | Zero Install .NET API",
    "summary": "Class TemporarilyUnavailableException Namespace ZeroInstall.Client Assembly ZeroInstall.Client.dll Zero Install is temporarily unavailable. Try again in a few seconds. public class TemporarilyUnavailableException : Exception, ISerializable Inheritance object Exception TemporarilyUnavailableException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TemporarilyUnavailableException() Zero Install is temporarily unavailable. Try again in a few seconds. public TemporarilyUnavailableException()"
  },
  "api/ZeroInstall.Client.ZeroInstallClient.html": {
    "href": "api/ZeroInstall.Client.ZeroInstallClient.html",
    "title": "Class ZeroInstallClient | Zero Install .NET API",
    "summary": "Class ZeroInstallClient Namespace ZeroInstall.Client Assembly ZeroInstall.Client.dll Client for invoking Zero Install commands from within other applications. public class ZeroInstallClient : IZeroInstallClient Inheritance object ZeroInstallClient Implements IZeroInstallClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ZeroInstallClient(IProcessLauncher, IProcessLauncher?) Client for invoking Zero Install commands from within other applications. public ZeroInstallClient(IProcessLauncher launcher, IProcessLauncher? guiLauncher = null) Parameters launcher IProcessLauncher Used to launch 0install as a child process. guiLauncher IProcessLauncher Used to launch 0install-win as a child process. ZeroInstallClient(string, string?) Creates a new Zero Install client. public ZeroInstallClient(string commandLine, string? guiCommandLine = null) Parameters commandLine string The command-line used to launch 0install. Whitespace must be properly escaped. guiCommandLine string The optional command-line used to launch 0install-win. Whitespace must be properly escaped. Properties Detect Creates a Zero Install client by detecting the location of 0install using environment variables or the Windows registry. public static IZeroInstallClient Detect { get; } Property Value IZeroInstallClient Methods AuditAsync() Checks that all implementations in the cache are undamaged. public Task AuditAsync() Returns Task Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. DownloadAsync(Requirements, bool) Downloads a program and compatible versions of all of its dependencies. public Task<Selections> DownloadAsync(Requirements requirements, bool refresh = false) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. Returns Task<Selections> The downloaded implementations. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. InvalidOperationException 0install reported a solver error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. FetchAsync(Implementation) Downloads a set of Implementations. public Task FetchAsync(Implementation implementation) Parameters implementation Implementation The implementations to download. Returns Task Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. GetIntegration(FeedUri, bool) Returns the desktop integration categories that are currently applied for a specific feed. public ISet<string> GetIntegration(FeedUri uri, bool machineWide = false) Parameters uri FeedUri The feed URI of the application. machineWide bool Get machine-wide desktop integration instead of just for the current user. Returns ISet<string> The access point categories (e.g., capability-registration, menu-entry, desktop-icon). Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. GetRunStartInfo(Requirements, bool, bool, params string[]) Provides a ProcessStartInfo for running a program via Zero Install. This allows you to wait for the program to exit and/or to capture its output. public ProcessStartInfo GetRunStartInfo(Requirements requirements, bool refresh = false, bool needsTerminal = false, params string[] arguments) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. needsTerminal bool Indicates that the program requires a terminal in order to run. arguments string[] Additional arguments to pass to the program. Returns ProcessStartInfo IntegrateAsync(FeedUri, IEnumerable<string>?, IEnumerable<string>?, bool) Adds an application to the application list (if missing) and integrates it into the desktop environment. public Task IntegrateAsync(FeedUri uri, IEnumerable<string>? add = null, IEnumerable<string>? remove = null, bool machineWide = false) Parameters uri FeedUri The feed URI of the application. add IEnumerable<string> The access point categories to add (e.g., capability-registration, menu-entry, desktop-icon). remove IEnumerable<string> The access point categories to remove (e.g., capability-registration, menu-entry, desktop-icon). machineWide bool Apply the operation machine-wide instead of just for the current user. Returns Task Exceptions NotAdminException machineWide was set but the current process is not running with admin rights. IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file or an invalid signature. InvalidOperationException 0install reported a conflict with existing desktop integration. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. Remove(FeedUri, bool) Removes an application from the application list and undoes any desktop environment integration. public void Remove(FeedUri uri, bool machineWide = false) Parameters uri FeedUri The feed URI of the application. machineWide bool Apply the operation machine-wide instead of just for the current user. Exceptions NotAdminException machineWide was set but the current process is not running with admin rights. IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. Run(Requirements, bool, bool, params string[]) Runs a program via Zero Install. Does not wait for the program to exit. public void Run(Requirements requirements, bool refresh = false, bool needsTerminal = false, params string[] arguments) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. needsTerminal bool Indicates that the program requires a terminal in order to run. arguments string[] Additional arguments to pass to the program. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. InvalidOperationException 0install reported a solver or executor error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install or the target program returned an error. SelectAsync(Requirements, bool, bool) Selects a program and compatible versions of all of its dependencies. public Task<Selections> SelectAsync(Requirements requirements, bool refresh = false, bool offline = false) Parameters requirements Requirements The requirements describing the program. refresh bool Fetch fresh copies of all used feeds. offline bool Do not refresh feeds even if they are out-of-date and don't select newer versions of programs for downloading even if they are already known. Returns Task<Selections> The selected implementations. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file or an invalid signature. InvalidOperationException 0install reported a solver error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error. TrustKey(string, string) Trusts feeds from a specific domain when signed with a specific key. public void TrustKey(string fingerprint, string domain) Parameters fingerprint string The fingerprint of the key to trust. domain string The domain the key should be trusted for. UpdateAsync(Requirements) Checks for updates to a program and downloads them if found. public Task<bool> UpdateAsync(Requirements requirements) Parameters requirements Requirements The requirements describing the program. Returns Task<bool> true if updates where found and downloaded; false if no updates where found. Exceptions IOException 0install could not be launched or reported a problem accessing the filesystem. UnauthorizedAccessException 0install reported that access to a resource was denied. WebException 0install reported a problem downloading a file. InvalidDataException 0install reported a problem parsing a file, an invalid signature or digest mismatch. InvalidOperationException 0install reported a solver error. OperationCanceledException The user canceled the operation. TemporarilyUnavailableException 0install is temporarily unavailable. Try again in a few seconds. ExitCodeException 0install returned another error."
  },
  "api/ZeroInstall.Client.html": {
    "href": "api/ZeroInstall.Client.html",
    "title": "Namespace ZeroInstall.Client | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Client Client library for invoking Zero Install commands from within other applications. NuGet package: ZeroInstall.Client Classes TemporarilyUnavailableException Zero Install is temporarily unavailable. Try again in a few seconds. ZeroInstallClient Client for invoking Zero Install commands from within other applications. Interfaces IZeroInstallClient Client for invoking Zero Install commands from within other applications."
  },
  "api/ZeroInstall.Commands.Basic.AddFeed.html": {
    "href": "api/ZeroInstall.Commands.Basic.AddFeed.html",
    "title": "Class AddFeed | Zero Install .NET API",
    "summary": "Class AddFeed Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Register an additional source of implementations (versions) of a program. public class AddFeed : AddRemoveFeedCommand Inheritance object ServiceProvider ScopedOperation CliCommand AddRemoveFeedCommand AddFeed Inherited Members AddRemoveFeedCommand.Usage AddRemoveFeedCommand.AdditionalArgsMin AddRemoveFeedCommand.AdditionalArgsMax AddRemoveFeedCommand.Execute() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AddFeed(ICommandHandler) Register an additional source of implementations (versions) of a program. public AddFeed(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"add-feed\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Methods ExecuteHelper(IEnumerable<FeedUri>, FeedReference, Stability) Registers or unregisters an additional feed source for a set of interfaces. protected override ExitCode ExecuteHelper(IEnumerable<FeedUri> interfaces, FeedReference source, Stability suggestedStabilityPolicy) Parameters interfaces IEnumerable<FeedUri> The set of interface URIs to register the feed source for. source FeedReference The feed reference to register for the interfaces. suggestedStabilityPolicy Stability The suggested value for StabilityPolicy. Will be Unset unless there is exactly one Implementation in the Feed. Returns ExitCode"
  },
  "api/ZeroInstall.Commands.Basic.AddRemoveFeedCommand.html": {
    "href": "api/ZeroInstall.Commands.Basic.AddRemoveFeedCommand.html",
    "title": "Class AddRemoveFeedCommand | Zero Install .NET API",
    "summary": "Class AddRemoveFeedCommand Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Common base class for AddFeed and RemoveFeed. public abstract class AddRemoveFeedCommand : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand AddRemoveFeedCommand Derived AddFeed RemoveFeed Inherited Members CliCommand.FullName CliCommand.Description CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AddRemoveFeedCommand(ICommandHandler) Creates a new command. protected AddRemoveFeedCommand(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. ExecuteHelper(IEnumerable<FeedUri>, FeedReference, Stability) Registers or unregisters an additional feed source for a set of interfaces. protected abstract ExitCode ExecuteHelper(IEnumerable<FeedUri> interfaces, FeedReference source, Stability suggestedStabilityPolicy) Parameters interfaces IEnumerable<FeedUri> The set of interface URIs to register the feed source for. source FeedReference The feed reference to register for the interfaces. suggestedStabilityPolicy Stability The suggested value for StabilityPolicy. Will be Unset unless there is exactly one Implementation in the Feed. Returns ExitCode"
  },
  "api/ZeroInstall.Commands.Basic.CatalogMan.html": {
    "href": "api/ZeroInstall.Commands.Basic.CatalogMan.html",
    "title": "Class CatalogMan | Zero Install .NET API",
    "summary": "Class CatalogMan Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Manages the Catalogs provided by the ICatalogManager. public sealed class CatalogMan : CliMultiCommand Inheritance object ServiceProvider ScopedOperation CliCommand CliMultiCommand CatalogMan Inherited Members CliMultiCommand.Description CliMultiCommand.Usage CliMultiCommand.Parse(IReadOnlyList<string>) CliMultiCommand.Execute() CliCommand.FullName CliCommand.Handler CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CatalogMan(ICommandHandler) Manages the Catalogs provided by the ICatalogManager. public CatalogMan(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"catalog\" Field Value string Properties SubCommandNames A list of sub-command names (without alternatives) as used in command-line arguments in lower-case. public override IEnumerable<string> SubCommandNames { get; } Property Value IEnumerable<string> Methods GetCommand(string) Creates a new sub-CliCommand based on a name. public override CliCommand GetCommand(string commandName) Parameters commandName string The command name to look for; case-insensitive. Returns CliCommand The requested sub-CliCommand. Exceptions OptionException commandName is an unknown command. IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. InvalidDataException A configuration file is damaged."
  },
  "api/ZeroInstall.Commands.Basic.Configure.html": {
    "href": "api/ZeroInstall.Commands.Basic.Configure.html",
    "title": "Class Configure | Zero Install .NET API",
    "summary": "Class Configure Namespace ZeroInstall.Commands.Basic Assembly 0install.dll View or change Config. public class Configure : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Configure Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Configure(ICommandHandler) Creates a new command. public Configure(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"config\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.DefaultCommand.html": {
    "href": "api/ZeroInstall.Commands.Basic.DefaultCommand.html",
    "title": "Class DefaultCommand | Zero Install .NET API",
    "summary": "Class DefaultCommand Namespace ZeroInstall.Commands.Basic Assembly 0install.dll The default command used when no command is explicitly specified. public class DefaultCommand : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand DefaultCommand Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultCommand(ICommandHandler) Creates a new command. public DefaultCommand(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.Digest.html": {
    "href": "api/ZeroInstall.Commands.Basic.Digest.html",
    "title": "Class Digest | Zero Install .NET API",
    "summary": "Class Digest Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Calculate the manifest digest of a directory or archive. public class Digest : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Digest Inherited Members CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Digest(ICommandHandler) Creates a new command. public Digest(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"digest\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.Download.html": {
    "href": "api/ZeroInstall.Commands.Basic.Download.html",
    "title": "Class Download | Zero Install .NET API",
    "summary": "Class Download Namespace ZeroInstall.Commands.Basic Assembly 0install.dll This behaves similarly to Selection, except that it also downloads the selected versions if they are not already cached. public class Download : Selection Inheritance object ServiceProvider ScopedOperation CliCommand Selection Download Derived Export Run Update Self.Update Inherited Members Selection.Usage Selection.AdditionalArgsMin Selection.AdditionalArgsMax Selection.Requirements Selection.SelectionsDocument Selection.CustomizeSelections Selection.ShowXml Selection.Parse(IReadOnlyList<string>) Selection.SetInterfaceUri(FeedUri) Selection.Selections Selection.RefreshSolve() Selection.ShowSelections() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Download(ICommandHandler) Creates a new download command. public Download(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Download(ICommandHandler, bool, bool, bool) Creates a new download command. protected Download(ICommandHandler handler, bool outputOptions = true, bool refreshOptions = true, bool customizeOptions = true) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. outputOptions bool Whether to add command-line options controlling output. refreshOptions bool Whether to add command-line options controlling refresh behavior. customizeOptions bool Whether to add command-line options for customizing selected implementations. Fields Name public const string Name = \"download\" Field Value string UncachedImplementations Implementations referenced in Selections that are not available in the IImplementationStore. protected List<Implementation>? UncachedImplementations Field Value List<Implementation> Properties Description A short description of what this command does. public override string Description { get; } Property Value string MinimumNetworkUseForBackgroundSelfUpdate The minimum EffectiveNetworkUse at which BackgroundSelfUpdate() will consider an update check. protected override NetworkLevel MinimumNetworkUseForBackgroundSelfUpdate { get; } Property Value NetworkLevel Methods BackgroundSelfUpdateAndClean() Automatically updates Zero Install itself in a background process. If no update check is due and we are in IsLibraryMode instead removes outdated implementations in a background process. protected void BackgroundSelfUpdateAndClean() DownloadUncachedImplementations() Downloads any Implementations in Selection that are missing from IImplementationStore. protected void DownloadUncachedImplementations() Remarks Makes sure ISolver ran with up-to-date feeds before downloading any implementations. Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. ShowOutput() protected override ExitCode ShowOutput() Returns ExitCode Solve() Runs Solve(Requirements) (unless SelectionsDocument is true) and stores the result in Selections. protected override void Solve() Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. IOException An external application or file required by the solver could not be accessed. SolverException The ISolver was unable to provide Selections that fulfill the Requirements."
  },
  "api/ZeroInstall.Commands.Basic.Export.html": {
    "href": "api/ZeroInstall.Commands.Basic.Export.html",
    "title": "Class Export | Zero Install .NET API",
    "summary": "Class Export Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Exports all feeds and implementations required to launch the program specified by URI. public sealed class Export : Download Inheritance object ServiceProvider ScopedOperation CliCommand Selection Download Export Inherited Members CliCommand.FullName CliCommand.Handler CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Export(ICommandHandler) Creates a new export command. public Export(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"export\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. Parse(IReadOnlyList<string>) Parses command-line arguments and stores the result in the command. public override void Parse(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options. IOException An IO operation failed. UnauthorizedAccessException More privileges are required. UriFormatException The URI or local path specified is invalid. ShowOutput() protected override ExitCode ShowOutput() Returns ExitCode Solve() Runs Solve(Requirements) (unless SelectionsDocument is true) and stores the result in Selections. protected override void Solve() Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. IOException An external application or file required by the solver could not be accessed. SolverException The ISolver was unable to provide Selections that fulfill the Requirements."
  },
  "api/ZeroInstall.Commands.Basic.ExportHelp.html": {
    "href": "api/ZeroInstall.Commands.Basic.ExportHelp.html",
    "title": "Class ExportHelp | Zero Install .NET API",
    "summary": "Class ExportHelp Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Exports all CliCommand help texts as HTML. public class ExportHelp : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand ExportHelp Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExportHelp(ICommandHandler) Exports all CliCommand help texts as HTML. public ExportHelp(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"export-help\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.Exporters.Exporter.html": {
    "href": "api/ZeroInstall.Commands.Basic.Exporters.Exporter.html",
    "title": "Class Exporter | Zero Install .NET API",
    "summary": "Class Exporter Namespace ZeroInstall.Commands.Basic.Exporters Assembly 0install.dll Exports feeds and implementations listed in a Selections document. public class Exporter Inheritance object Exporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Exporter(Selections, Architecture, string) Creates a new exporter. public Exporter(Selections selections, Architecture architecture, string destination) Parameters selections Selections A list of ImplementationSelections to check for referenced feeds. architecture Architecture The Architecture the Selections were generated for. destination string The path of the directory to export to. Exceptions IOException The directory destination could not be created. UnauthorizedAccessException Creating the directory destination is not permitted. Methods DeployImportScript() Deploys a script for importing exported feeds and implementations. public void DeployImportScript() Exceptions IOException A problem occurred while writing the script. UnauthorizedAccessException Write access to the script is not permitted. ExportFeeds(IFeedCache, IOpenPgp) Exports all feeds listed in a Selections document along with any OpenPGP public key files required for validation. public void ExportFeeds(IFeedCache feedCache, IOpenPgp openPgp) Parameters feedCache IFeedCache Used to get local feed files. openPgp IOpenPgp Used to get export keys feeds were signed with. Exceptions IOException A feed or GnuPG could not be read from the cache. UnauthorizedAccessException Read or access to a file is not permitted. ExportIcons(IEnumerable<Icon>, IIconStore) Exports all specified icons. public void ExportIcons(IEnumerable<Icon> icons, IIconStore iconStore) Parameters icons IEnumerable<Icon> The icons to export. iconStore IIconStore The icon store to export the icons from. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while reading or writing a file. UnauthorizedAccessException Read or access to a file is not permitted. WebException A problem occurred while downloading icons. ExportImplementations(IImplementationStore, ITaskHandler) Exports all implementations listed in a Selections document as archives. public void ExportImplementations(IImplementationStore implementationStore, ITaskHandler handler) Parameters implementationStore IImplementationStore Used to get cached implementations. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Exceptions OperationCanceledException The user canceled the task. IOException An implementation archive could not be created. UnauthorizedAccessException Read or access to a file is not permitted."
  },
  "api/ZeroInstall.Commands.Basic.Exporters.HelpExporterBase.html": {
    "href": "api/ZeroInstall.Commands.Basic.Exporters.HelpExporterBase.html",
    "title": "Class HelpExporterBase | Zero Install .NET API",
    "summary": "Class HelpExporterBase Namespace ZeroInstall.Commands.Basic.Exporters Assembly 0install.dll Common base class for exporting all CliCommand help texts in a structured text format. public abstract class HelpExporterBase Inheritance object HelpExporterBase Derived HtmlHelpExporter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CommandDetails(string?, string, string) protected abstract string CommandDetails(string? name, string description, string usage) Parameters name string description string usage string Returns string CommandListEntry(string?, string) protected abstract string CommandListEntry(string? name, string description) Parameters name string description string Returns string CommandListFooter() protected abstract string CommandListFooter() Returns string CommandListHeader() protected abstract string CommandListHeader() Returns string OptionListEntry(IEnumerable<string>, string) protected abstract string OptionListEntry(IEnumerable<string> prototypes, string description) Parameters prototypes IEnumerable<string> description string Returns string OptionListFooter() protected abstract string OptionListFooter() Returns string OptionListHeader() protected abstract string OptionListHeader() Returns string ToString() Returns all CliCommand help texts in a structured text format. public override string ToString() Returns string"
  },
  "api/ZeroInstall.Commands.Basic.Exporters.HtmlHelpExporter.html": {
    "href": "api/ZeroInstall.Commands.Basic.Exporters.HtmlHelpExporter.html",
    "title": "Class HtmlHelpExporter | Zero Install .NET API",
    "summary": "Class HtmlHelpExporter Namespace ZeroInstall.Commands.Basic.Exporters Assembly 0install.dll Exports all CliCommand help texts as HTML. public class HtmlHelpExporter : HelpExporterBase Inheritance object HelpExporterBase HtmlHelpExporter Inherited Members HelpExporterBase.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CommandDetails(string?, string, string) protected override string CommandDetails(string? name, string description, string usage) Parameters name string description string usage string Returns string CommandListEntry(string?, string) protected override string CommandListEntry(string? name, string description) Parameters name string description string Returns string CommandListFooter() protected override string CommandListFooter() Returns string CommandListHeader() protected override string CommandListHeader() Returns string OptionListEntry(IEnumerable<string>, string) protected override string OptionListEntry(IEnumerable<string> prototypes, string description) Parameters prototypes IEnumerable<string> description string Returns string OptionListFooter() protected override string OptionListFooter() Returns string OptionListHeader() protected override string OptionListHeader() Returns string"
  },
  "api/ZeroInstall.Commands.Basic.Exporters.html": {
    "href": "api/ZeroInstall.Commands.Basic.Exporters.html",
    "title": "Namespace ZeroInstall.Commands.Basic.Exporters | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Commands.Basic.Exporters Utilitiy classes for exporting data from Zero Install. Classes Exporter Exports feeds and implementations listed in a Selections document. HelpExporterBase Common base class for exporting all CliCommand help texts in a structured text format. HtmlHelpExporter Exports all CliCommand help texts as HTML."
  },
  "api/ZeroInstall.Commands.Basic.Fetch.html": {
    "href": "api/ZeroInstall.Commands.Basic.Fetch.html",
    "title": "Class Fetch | Zero Install .NET API",
    "summary": "Class Fetch Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Downloads a set of Implementations piped in as XML via stdin (for programmatic use). Use Feed format with no inner linebreaks and terminated by a single linebreak. public class Fetch : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Fetch Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Fetch(ICommandHandler) Creates a new command. public Fetch(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"fetch\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.Import.html": {
    "href": "api/ZeroInstall.Commands.Basic.Import.html",
    "title": "Class Import | Zero Install .NET API",
    "summary": "Class Import Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Import a feed from a local file, as if it had been downloaded from the network. public class Import : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Import Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. The file must have a trusted digital signature, as when fetching from the network. Constructors Import(ICommandHandler) Import a feed from a local file, as if it had been downloaded from the network. public Import(ICommandHandler handler) Parameters handler ICommandHandler Remarks This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. The file must have a trusted digital signature, as when fetching from the network. Fields Name public const string Name = \"import\" Field Value string Properties AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.List.html": {
    "href": "api/ZeroInstall.Commands.Basic.List.html",
    "title": "Class List | Zero Install .NET API",
    "summary": "Class List Namespace ZeroInstall.Commands.Basic Assembly 0install.dll List all known interface (program) URIs. public class List : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand List Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks If a search term is given, only URIs containing that string are shown (case insensitive). Constructors List(ICommandHandler) List all known interface (program) URIs. public List(ICommandHandler handler) Parameters handler ICommandHandler Remarks If a search term is given, only URIs containing that string are shown (case insensitive). Fields Name public const string Name = \"list\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.ListFeeds.html": {
    "href": "api/ZeroInstall.Commands.Basic.ListFeeds.html",
    "title": "Class ListFeeds | Zero Install .NET API",
    "summary": "Class ListFeeds Namespace ZeroInstall.Commands.Basic Assembly 0install.dll List all known feed URIs for a specific interface. public class ListFeeds : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand ListFeeds Inherited Members CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ListFeeds(ICommandHandler) List all known feed URIs for a specific interface. public ListFeeds(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"list-feeds\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.RemoveFeed.html": {
    "href": "api/ZeroInstall.Commands.Basic.RemoveFeed.html",
    "title": "Class RemoveFeed | Zero Install .NET API",
    "summary": "Class RemoveFeed Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Un-register a feed, reversing the effect of AddFeed. public class RemoveFeed : AddRemoveFeedCommand Inheritance object ServiceProvider ScopedOperation CliCommand AddRemoveFeedCommand RemoveFeed Inherited Members AddRemoveFeedCommand.Usage AddRemoveFeedCommand.AdditionalArgsMin AddRemoveFeedCommand.AdditionalArgsMax AddRemoveFeedCommand.Execute() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemoveFeed(ICommandHandler) Un-register a feed, reversing the effect of AddFeed. public RemoveFeed(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"remove-feed\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Methods ExecuteHelper(IEnumerable<FeedUri>, FeedReference, Stability) Registers or unregisters an additional feed source for a set of interfaces. protected override ExitCode ExecuteHelper(IEnumerable<FeedUri> interfaces, FeedReference source, Stability suggestedStabilityPolicy) Parameters interfaces IEnumerable<FeedUri> The set of interface URIs to register the feed source for. source FeedReference The feed reference to register for the interfaces. suggestedStabilityPolicy Stability The suggested value for StabilityPolicy. Will be Unset unless there is exactly one Implementation in the Feed. Returns ExitCode"
  },
  "api/ZeroInstall.Commands.Basic.Run.html": {
    "href": "api/ZeroInstall.Commands.Basic.Run.html",
    "title": "Class Run | Zero Install .NET API",
    "summary": "Class Run Namespace ZeroInstall.Commands.Basic Assembly 0install.dll This behaves similarly to Download, except that it also runs the program after ensuring it is in the cache. public class Run : Download Inheritance object ServiceProvider ScopedOperation CliCommand Selection Download Run Inherited Members Download.UncachedImplementations Download.MinimumNetworkUseForBackgroundSelfUpdate Download.BackgroundSelfUpdateAndClean() Download.DownloadUncachedImplementations() Download.ShowOutput() Selection.AdditionalArgsMin Selection.Requirements Selection.SelectionsDocument Selection.CustomizeSelections Selection.ShowXml Selection.Parse(IReadOnlyList<string>) Selection.SetInterfaceUri(FeedUri) Selection.Selections Selection.RefreshSolve() Selection.ShowSelections() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Run(ICommandHandler) Creates a new run command. public Run(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"run\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. Solve() Runs Solve(Requirements) (unless SelectionsDocument is true) and stores the result in Selections. protected override void Solve() Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. IOException An external application or file required by the solver could not be accessed. SolverException The ISolver was unable to provide Selections that fulfill the Requirements."
  },
  "api/ZeroInstall.Commands.Basic.Search.html": {
    "href": "api/ZeroInstall.Commands.Basic.Search.html",
    "title": "Class Search | Zero Install .NET API",
    "summary": "Class Search Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Searches for feeds indexed by the mirror server. public class Search : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Search Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Search(ICommandHandler) Searches for feeds indexed by the mirror server. public Search(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"search\" Field Value string Properties AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.Selection.html": {
    "href": "api/ZeroInstall.Commands.Basic.Selection.html",
    "title": "Class Selection | Zero Install .NET API",
    "summary": "Class Selection Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Select a version of the program identified by URI, and compatible versions of all of its dependencies. public class Selection : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Selection Derived Download Inherited Members CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Selection(ICommandHandler) Creates a new select command. public Selection(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Selection(ICommandHandler, bool, bool, bool) Creates a new select command. protected Selection(ICommandHandler handler, bool outputOptions = true, bool refreshOptions = true, bool customizeOptions = true) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. outputOptions bool Whether to add command-line options controlling output. refreshOptions bool Whether to add command-line options controlling refresh behavior. customizeOptions bool Whether to add command-line options for customizing selected implementations. Fields CustomizeSelections Indicates the user wants a UI to modify the Selections. protected bool CustomizeSelections Field Value bool Name public const string Name = \"select\" Field Value string Selections Cached ISolver results. protected Selections? Selections Field Value Selections SelectionsDocument Indicates the user provided a pre-computed Selections XML document instead of using the ISolver. protected bool SelectionsDocument Field Value bool ShowXml Indicates the user wants a machine-readable output. protected bool ShowXml Field Value bool Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Requirements A set of requirements/restrictions imposed by the user on the implementation selection process as parsed from the command-line arguments. protected Requirements Requirements { get; } Property Value Requirements Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. Parse(IReadOnlyList<string>) Parses command-line arguments and stores the result in the command. public override void Parse(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options. IOException An IO operation failed. UnauthorizedAccessException More privileges are required. UriFormatException The URI or local path specified is invalid. RefreshSolve() Run Solve() with Refresh set to true. protected void RefreshSolve() SetInterfaceUri(FeedUri) Sets InterfaceUri and applies Requirements options that need to be deferred to the end of the parsing process. protected void SetInterfaceUri(FeedUri uri) Parameters uri FeedUri ShowOutput() protected virtual ExitCode ShowOutput() Returns ExitCode ShowSelections() Displays the Selections to the user. protected void ShowSelections() Solve() Runs Solve(Requirements) (unless SelectionsDocument is true) and stores the result in Selections. protected virtual void Solve() Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. IOException An external application or file required by the solver could not be accessed. SolverException The ISolver was unable to provide Selections that fulfill the Requirements."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Add.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Add.html",
    "title": "Class StoreMan.Add | Zero Install .NET API",
    "summary": "Class StoreMan.Add Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Add : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Add Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Add(ICommandHandler) public Add(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"add\" Field Value string Properties AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Audit.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Audit.html",
    "title": "Class StoreMan.Audit | Zero Install .NET API",
    "summary": "Class StoreMan.Audit Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Audit : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Audit Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Audit(ICommandHandler) public Audit(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"audit\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Copy.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Copy.html",
    "title": "Class StoreMan.Copy | Zero Install .NET API",
    "summary": "Class StoreMan.Copy Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Copy : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Copy Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Copy(ICommandHandler) public Copy(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"copy\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Export.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Export.html",
    "title": "Class StoreMan.Export | Zero Install .NET API",
    "summary": "Class StoreMan.Export Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Export : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Export Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Export(ICommandHandler) public Export(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"export\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Find.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Find.html",
    "title": "Class StoreMan.Find | Zero Install .NET API",
    "summary": "Class StoreMan.Find Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Find : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Find Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Find(ICommandHandler) public Find(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"find\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.List.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.List.html",
    "title": "Class StoreMan.List | Zero Install .NET API",
    "summary": "Class StoreMan.List Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.List : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.List Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors List(ICommandHandler) public List(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"list\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.ListImplementations.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.ListImplementations.html",
    "title": "Class StoreMan.ListImplementations | Zero Install .NET API",
    "summary": "Class StoreMan.ListImplementations Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.ListImplementations : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.ListImplementations Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ListImplementations(ICommandHandler) public ListImplementations(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"manage\" Field Value string Name public const string Name = \"list-implementations\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Optimise.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Optimise.html",
    "title": "Class StoreMan.Optimise | Zero Install .NET API",
    "summary": "Class StoreMan.Optimise Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Optimise : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Optimise Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Optimise(ICommandHandler) public Optimise(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"optimize\" Field Value string Name public const string Name = \"optimise\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Purge.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Purge.html",
    "title": "Class StoreMan.Purge | Zero Install .NET API",
    "summary": "Class StoreMan.Purge Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Purge : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Purge Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Purge(ICommandHandler) public Purge(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"purge\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Remove.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Remove.html",
    "title": "Class StoreMan.Remove | Zero Install .NET API",
    "summary": "Class StoreMan.Remove Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Remove : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Remove Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Remove(ICommandHandler) public Remove(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"remove\" Field Value string Properties AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Serve.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Serve.html",
    "title": "Class StoreMan.Serve | Zero Install .NET API",
    "summary": "Class StoreMan.Serve Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Serve : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Serve Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Serve(ICommandHandler) public Serve(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"serve\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.StoreSubCommand.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.StoreSubCommand.html",
    "title": "Class StoreMan.StoreSubCommand | Zero Install .NET API",
    "summary": "Class StoreMan.StoreSubCommand Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public abstract class StoreMan.StoreSubCommand : CliCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand Implements ICliSubCommand Derived StoreMan.Add StoreMan.Audit StoreMan.Copy StoreMan.Export StoreMan.Find StoreMan.List StoreMan.ListImplementations StoreMan.Optimise StoreMan.Purge StoreMan.Remove StoreMan.Serve StoreMan.Verify Inherited Members CliCommand.FullName CliCommand.Description CliCommand.Usage CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.Execute() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoreSubCommand(ICommandHandler) protected StoreSubCommand(ICommandHandler handler) Parameters handler ICommandHandler Properties ParentName The name of the CliMultiCommand this command is a sub-command of. public string ParentName { get; } Property Value string Methods AddToStore(ManifestDigest, Action<IBuilder>) Adds a new implementation to the ImplementationStore. protected ExitCode AddToStore(ManifestDigest manifestDigest, Action<IBuilder> build) Parameters manifestDigest ManifestDigest The digest the implementation is supposed to match. build Action<IBuilder> Callback for building the implementation. Returns ExitCode Exceptions OperationCanceledException The user canceled the task. UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. DigestMismatchException The implementation's content doesn't match the manifestDigest. SetStorePaths(IReadOnlyList<string>) Sets the paths of the directories to use as ImplementationStores. Keeps using the defaults if the list is empty. protected void SetStorePaths(IReadOnlyList<string> paths) Parameters paths IReadOnlyList<string> Exceptions DirectoryNotFoundException A specified directory does not exist."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.Verify.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.Verify.html",
    "title": "Class StoreMan.Verify | Zero Install .NET API",
    "summary": "Class StoreMan.Verify Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class StoreMan.Verify : StoreMan.StoreSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand StoreMan.StoreSubCommand StoreMan.Verify Implements ICliSubCommand Inherited Members StoreMan.StoreSubCommand.ParentName StoreMan.StoreSubCommand.SetStorePaths(IReadOnlyList<string>) StoreMan.StoreSubCommand.AddToStore(ManifestDigest, Action<IBuilder>) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Verify(ICommandHandler) public Verify(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"verify\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.StoreMan.html": {
    "href": "api/ZeroInstall.Commands.Basic.StoreMan.html",
    "title": "Class StoreMan | Zero Install .NET API",
    "summary": "Class StoreMan Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Manages the contents of the IImplementationStores. public sealed class StoreMan : CliMultiCommand Inheritance object ServiceProvider ScopedOperation CliCommand CliMultiCommand StoreMan Inherited Members CliMultiCommand.Description CliMultiCommand.Usage CliMultiCommand.Parse(IReadOnlyList<string>) CliMultiCommand.Execute() CliCommand.FullName CliCommand.Handler CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StoreMan(ICommandHandler) Manages the contents of the IImplementationStores. public StoreMan(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"store\" Field Value string Properties SubCommandNames A list of sub-command names (without alternatives) as used in command-line arguments in lower-case. public override IEnumerable<string> SubCommandNames { get; } Property Value IEnumerable<string> Methods GetCommand(string) Creates a new sub-CliCommand based on a name. public override CliCommand GetCommand(string commandName) Parameters commandName string The command name to look for; case-insensitive. Returns CliCommand The requested sub-CliCommand. Exceptions OptionException commandName is an unknown command. IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. InvalidDataException A configuration file is damaged."
  },
  "api/ZeroInstall.Commands.Basic.TrustMan.Add.html": {
    "href": "api/ZeroInstall.Commands.Basic.TrustMan.Add.html",
    "title": "Class TrustMan.Add | Zero Install .NET API",
    "summary": "Class TrustMan.Add Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class TrustMan.Add : TrustMan.TrustSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand TrustMan.TrustSubCommand TrustMan.Add Implements ICliSubCommand Inherited Members TrustMan.TrustSubCommand.MachineWide TrustMan.TrustSubCommand.ParentName TrustMan.TrustSubCommand.Load() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Add(ICommandHandler) public Add(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"add\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.TrustMan.List.html": {
    "href": "api/ZeroInstall.Commands.Basic.TrustMan.List.html",
    "title": "Class TrustMan.List | Zero Install .NET API",
    "summary": "Class TrustMan.List Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class TrustMan.List : TrustMan.TrustSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand TrustMan.TrustSubCommand TrustMan.List Implements ICliSubCommand Inherited Members TrustMan.TrustSubCommand.MachineWide TrustMan.TrustSubCommand.ParentName TrustMan.TrustSubCommand.Load() CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors List(ICommandHandler) public List(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"list\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.TrustMan.Remove.html": {
    "href": "api/ZeroInstall.Commands.Basic.TrustMan.Remove.html",
    "title": "Class TrustMan.Remove | Zero Install .NET API",
    "summary": "Class TrustMan.Remove Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public class TrustMan.Remove : TrustMan.TrustSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand TrustMan.TrustSubCommand TrustMan.Remove Implements ICliSubCommand Inherited Members TrustMan.TrustSubCommand.MachineWide TrustMan.TrustSubCommand.ParentName TrustMan.TrustSubCommand.Load() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Remove(ICommandHandler) public Remove(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"remove\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Basic.TrustMan.TrustSubCommand.html": {
    "href": "api/ZeroInstall.Commands.Basic.TrustMan.TrustSubCommand.html",
    "title": "Class TrustMan.TrustSubCommand | Zero Install .NET API",
    "summary": "Class TrustMan.TrustSubCommand Namespace ZeroInstall.Commands.Basic Assembly 0install.dll public abstract class TrustMan.TrustSubCommand : CliCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand TrustMan.TrustSubCommand Implements ICliSubCommand Derived TrustMan.Add TrustMan.List TrustMan.Remove Inherited Members CliCommand.FullName CliCommand.Description CliCommand.Usage CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.Execute() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TrustSubCommand(ICommandHandler) protected TrustSubCommand(ICommandHandler handler) Parameters handler ICommandHandler Fields MachineWide protected bool MachineWide Field Value bool Properties ParentName The name of the CliMultiCommand this command is a sub-command of. public string ParentName { get; } Property Value string Methods Load() protected TrustDB Load() Returns TrustDB"
  },
  "api/ZeroInstall.Commands.Basic.TrustMan.html": {
    "href": "api/ZeroInstall.Commands.Basic.TrustMan.html",
    "title": "Class TrustMan | Zero Install .NET API",
    "summary": "Class TrustMan Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Manages the contents of the TrustDB. public sealed class TrustMan : CliMultiCommand Inheritance object ServiceProvider ScopedOperation CliCommand CliMultiCommand TrustMan Inherited Members CliMultiCommand.Description CliMultiCommand.Usage CliMultiCommand.Parse(IReadOnlyList<string>) CliMultiCommand.Execute() CliCommand.FullName CliCommand.Handler CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TrustMan(ICommandHandler) Manages the contents of the TrustDB. public TrustMan(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"trust\" Field Value string Properties SubCommandNames A list of sub-command names (without alternatives) as used in command-line arguments in lower-case. public override IEnumerable<string> SubCommandNames { get; } Property Value IEnumerable<string> Methods GetCommand(string) Creates a new sub-CliCommand based on a name. public override CliCommand GetCommand(string commandName) Parameters commandName string The command name to look for; case-insensitive. Returns CliCommand The requested sub-CliCommand. Exceptions OptionException commandName is an unknown command. IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. InvalidDataException A configuration file is damaged."
  },
  "api/ZeroInstall.Commands.Basic.Update.html": {
    "href": "api/ZeroInstall.Commands.Basic.Update.html",
    "title": "Class Update | Zero Install .NET API",
    "summary": "Class Update Namespace ZeroInstall.Commands.Basic Assembly 0install.dll Check for updates to the program and download them if found. public class Update : Download Inheritance object ServiceProvider ScopedOperation CliCommand Selection Download Update Inherited Members Download.UncachedImplementations Download.MinimumNetworkUseForBackgroundSelfUpdate Download.BackgroundSelfUpdateAndClean() Download.Solve() Download.DownloadUncachedImplementations() Selection.Usage Selection.AdditionalArgsMin Selection.AdditionalArgsMax Selection.Requirements Selection.SelectionsDocument Selection.CustomizeSelections Selection.ShowXml Selection.Parse(IReadOnlyList<string>) Selection.SetInterfaceUri(FeedUri) Selection.Selections Selection.RefreshSolve() Selection.ShowSelections() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Update(ICommandHandler) Creates a new update command. public Update(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"update\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. ShowOutput() Shows a list of changes found by the update process. protected override ExitCode ShowOutput() Returns ExitCode"
  },
  "api/ZeroInstall.Commands.Basic.html": {
    "href": "api/ZeroInstall.Commands.Basic.html",
    "title": "Namespace ZeroInstall.Commands.Basic | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Commands.Basic CLI commands for Zero Install's core features. Namespaces ZeroInstall.Commands.Basic.Exporters Utilitiy classes for exporting data from Zero Install. Classes AddFeed Register an additional source of implementations (versions) of a program. AddRemoveFeedCommand Common base class for AddFeed and RemoveFeed. CatalogMan Manages the Catalogs provided by the ICatalogManager. Configure View or change Config. DefaultCommand The default command used when no command is explicitly specified. Digest Calculate the manifest digest of a directory or archive. Download This behaves similarly to Selection, except that it also downloads the selected versions if they are not already cached. Export Exports all feeds and implementations required to launch the program specified by URI. ExportHelp Exports all CliCommand help texts as HTML. Fetch Downloads a set of Implementations piped in as XML via stdin (for programmatic use). Use Feed format with no inner linebreaks and terminated by a single linebreak. Import Import a feed from a local file, as if it had been downloaded from the network. List List all known interface (program) URIs. ListFeeds List all known feed URIs for a specific interface. RemoveFeed Un-register a feed, reversing the effect of AddFeed. Run This behaves similarly to Download, except that it also runs the program after ensuring it is in the cache. Search Searches for feeds indexed by the mirror server. Selection Select a version of the program identified by URI, and compatible versions of all of its dependencies. StoreMan Manages the contents of the IImplementationStores. StoreMan.Add StoreMan.Audit StoreMan.Copy StoreMan.Export StoreMan.Find StoreMan.List StoreMan.ListImplementations StoreMan.Optimise StoreMan.Purge StoreMan.Remove StoreMan.Serve StoreMan.StoreSubCommand StoreMan.Verify TrustMan Manages the contents of the TrustDB. TrustMan.Add TrustMan.List TrustMan.Remove TrustMan.TrustSubCommand Update Check for updates to the program and download them if found."
  },
  "api/ZeroInstall.Commands.CliCommand.html": {
    "href": "api/ZeroInstall.Commands.CliCommand.html",
    "title": "Class CliCommand | Zero Install .NET API",
    "summary": "Class CliCommand Namespace ZeroInstall.Commands Assembly 0install.dll Represents a command invoked via command-line arguments. public abstract class CliCommand : ScopedOperation Inheritance object ServiceProvider ScopedOperation CliCommand Derived AddRemoveFeedCommand Configure DefaultCommand Digest ExportHelp Fetch Import List ListFeeds Search Selection StoreMan.StoreSubCommand TrustMan.TrustSubCommand CliMultiCommand Central IntegrationCommand ListApps Self.SelfSubCommand Inherited Members ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Specific sub-classes of this class are used to handle a commands like \"0install COMMAND [OPTIONS]\". Constructors CliCommand(ICommandHandler) Creates a new command. protected CliCommand(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields AdditionalArgs Feeds to add, terms to search for, etc. protected readonly List<string> AdditionalArgs Field Value List<string> Options The command-line argument parser used to evaluate user input. protected readonly OptionSet Options Field Value OptionSet Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected virtual int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected virtual int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public abstract string Description { get; } Property Value string FullName The full name of this command (including sub-commands) as used in command-line arguments in lower-case. public string FullName { get; } Property Value string Handler A callback object used when the user needs to be asked questions or informed about download and IO tasks. public ICommandHandler Handler { get; } Property Value ICommandHandler HelpText The help text describing the available command-line options and their effects. protected string HelpText { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public abstract string Usage { get; } Property Value string Methods AddDiscoverOptions() Adds command-line options related to ImplementationDiscovery. protected void AddDiscoverOptions() AsParallel<T>(IEnumerable<T>) Prepares the elements for parallel processing while respecting MaxParallelDownloads and CancellationToken. protected ParallelQuery<T> AsParallel<T>(IEnumerable<T> elements) Parameters elements IEnumerable<T> Returns ParallelQuery<T> Type Parameters T Create(string?, ICommandHandler) Creates a new CliCommand based on a name. public static CliCommand Create(string? commandName, ICommandHandler handler) Parameters commandName string The command name to look for; case-insensitive; can be null. handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Returns CliCommand The requested CliCommand or DefaultCommand if commandName was null. Exceptions OptionException commandName is an unknown command. IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. InvalidDataException A configuration file is damaged. CreateAndParse(IReadOnlyList<string>, ICommandHandler) Parses command-line arguments, automatically creating an appropriate CliCommand. public static CliCommand CreateAndParse(IReadOnlyList<string> args, ICommandHandler handler) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Returns CliCommand The newly created CliCommand after Parse(IReadOnlyList<string>) has been called. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options or specified an unknown command. IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. InvalidDataException A configuration file is damaged. FormatException An URI, local path, version number, etc. is invalid. Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public abstract ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. FetchAll(IEnumerable<Implementation>) Downloads a set of Implementations to the ZeroInstall.Store in parallel. protected void FetchAll(IEnumerable<Implementation> implementations) Parameters implementations IEnumerable<Implementation> The Implementations to be downloaded. Exceptions OperationCanceledException A download or IO task was canceled from another thread. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted. UnauthorizedAccessException Write access to IImplementationStore is not permitted. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. GetCommandName(ref IReadOnlyList<string>) Determines the command name specified in the command-line arguments. public static string? GetCommandName(ref IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to search for a command name. The collection is replaced with a copy with the command removed from it. Returns string The name of the command that was found or null if none was specified. Parse(IReadOnlyList<string>) Parses command-line arguments and stores the result in the command. public virtual void Parse(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options. IOException An IO operation failed. UnauthorizedAccessException More privileges are required. UriFormatException The URI or local path specified is invalid. ShowConfig(ConfigTab) Shows the current configuration. protected void ShowConfig(ConfigTab configTab) Parameters configTab ConfigTab The initial tab to show if a GUI representation is used. SupportedValues<T>() Generates a localized instruction string describing multiple selectable enum values. protected static string SupportedValues<T>() where T : struct, Enum Returns string Type Parameters T The enum type to list values for. SupportedValues<T>(IEnumerable<T>) Generates a localized instruction string describing multiple selectable values. protected static string SupportedValues<T>(IEnumerable<T> values) where T : notnull Parameters values IEnumerable<T> The values to list. Returns string Type Parameters T"
  },
  "api/ZeroInstall.Commands.CliCommandHandler.html": {
    "href": "api/ZeroInstall.Commands.CliCommandHandler.html",
    "title": "Class CliCommandHandler | Zero Install .NET API",
    "summary": "Class CliCommandHandler Namespace ZeroInstall.Commands Assembly 0install.dll Uses the stdin/stderr streams to allow users to interact with CliCommands. [MustDisposeResource] public sealed class CliCommandHandler : AnsiCliTaskHandler, ICommandHandler, ITaskHandler, IDisposable Inheritance object TaskHandlerBase CliTaskHandler AnsiCliTaskHandler CliCommandHandler Implements ICommandHandler ITaskHandler IDisposable Inherited Members AnsiCliTaskHandler.RunTask(ITask) AnsiCliTaskHandler.Output(string, string) AnsiCliTaskHandler.Output<T>(string, IEnumerable<T>) AnsiCliTaskHandler.Output<T>(string, NamedCollection<T>) AnsiCliTaskHandler.Error(Exception) AnsiCliTaskHandler.Dispose() TaskHandlerBase.Ask(string, bool?, string) TaskHandlerBase.CancellationToken TaskHandlerBase.Verbosity object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Background Always returns false. public bool Background { get; set; } Property Value bool FeedUri The URI of the Zero Install feed the current operation relates to. public FeedUri? FeedUri { get; set; } Property Value FeedUri Remarks This can be used to apply application-specific visual branding. IsGui Always returns false. public bool IsGui { get; } Property Value bool Methods CloseUI() Closes any persistent UI elements that were created. public void CloseUI() CustomizeSelections(Func<Selections>) Allows the user to customize the interface preferences and rerun the solver if desired. Returns once the user is finished. public void CustomizeSelections(Func<Selections> solveCallback) Parameters solveCallback Func<Selections> Called after interface preferences have been changed and the solver needs to be rerun. DisableUI() Disables any persistent UI elements that were created but still leaves them visible. public void DisableUI() ShowIntegrateApp(IntegrationState) Displays application integration options to the user. Returns once the user is finished. public void ShowIntegrateApp(IntegrationState state) Parameters state IntegrationState A View-Model for modifying the current desktop integration state. Remarks The caller is responsible for applying changes. Exceptions OperationCanceledException The user does not want any changes to be applied. ShowSelections(Selections, IFeedManager) Shows the Selections made by the solver to the user. Returns immediately. May be ignored by some implementations. public void ShowSelections(Selections selections, IFeedManager feedManager) Parameters selections Selections The Selections as provided by the solver. feedManager IFeedManager The feed manager used to retrieve feeds for additional information about implementations."
  },
  "api/ZeroInstall.Commands.CliMultiCommand.html": {
    "href": "api/ZeroInstall.Commands.CliMultiCommand.html",
    "title": "Class CliMultiCommand | Zero Install .NET API",
    "summary": "Class CliMultiCommand Namespace ZeroInstall.Commands Assembly 0install.dll Common base class for commands that provide multiple sub-CliCommands. public abstract class CliMultiCommand : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand CliMultiCommand Derived CatalogMan StoreMan TrustMan Self Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CliMultiCommand(ICommandHandler) Creates a new command. protected CliMultiCommand(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Properties AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string SubCommandNames A list of sub-command names (without alternatives) as used in command-line arguments in lower-case. public abstract IEnumerable<string> SubCommandNames { get; } Property Value IEnumerable<string> Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. GetCommand(string) Creates a new sub-CliCommand based on a name. public abstract CliCommand GetCommand(string commandName) Parameters commandName string The command name to look for; case-insensitive. Returns CliCommand The requested sub-CliCommand. Exceptions OptionException commandName is an unknown command. IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. InvalidDataException A configuration file is damaged. Parse(IReadOnlyList<string>) Parses command-line arguments and stores the result in the command. public override void Parse(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options. IOException An IO operation failed. UnauthorizedAccessException More privileges are required. UriFormatException The URI or local path specified is invalid."
  },
  "api/ZeroInstall.Commands.Desktop.AddAlias.html": {
    "href": "api/ZeroInstall.Commands.Desktop.AddAlias.html",
    "title": "Class AddAlias | Zero Install .NET API",
    "summary": "Class AddAlias Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Create an alias for a Run command. public class AddAlias : AppCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand AppCommand AddAlias Inherited Members AppCommand.AdditionalArgsMin AppCommand.InterfaceUri AppCommand.IntegrationManager AppCommand.Execute() AppCommand.CreateAlias(AppEntry, string, string) IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AddAlias(ICommandHandler) Common base class for commands that manage an AppList. public AddAlias(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"add-alias\" Field Value string Name public const string Name = \"alias\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods ExecuteHelper() Template method that performs the actual operation. protected override ExitCode ExecuteHelper() Returns ExitCode The exit status code to end the process with."
  },
  "api/ZeroInstall.Commands.Desktop.AddApp.html": {
    "href": "api/ZeroInstall.Commands.Desktop.AddApp.html",
    "title": "Class AddApp | Zero Install .NET API",
    "summary": "Class AddApp Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Add an application to the AppList. public class AddApp : AppCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand AppCommand AddApp Inherited Members AppCommand.AdditionalArgsMin AppCommand.InterfaceUri AppCommand.IntegrationManager AppCommand.Execute() AppCommand.CreateAlias(AppEntry, string, string) IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AddApp(ICommandHandler) Common base class for commands that manage an AppList. public AddApp(ICommandHandler handler) Parameters handler ICommandHandler Fields AddedNonCatalogAppWindowMessageID The window message ID (for use with BroadcastMessage(int)) that signals that an application that is not listed in the Catalog was added. public static readonly int AddedNonCatalogAppWindowMessageID Field Value int AltName public const string AltName = \"add-app\" Field Value string Name public const string Name = \"add\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods ExecuteHelper() Template method that performs the actual operation. protected override ExitCode ExecuteHelper() Returns ExitCode The exit status code to end the process with."
  },
  "api/ZeroInstall.Commands.Desktop.AppCommand.html": {
    "href": "api/ZeroInstall.Commands.Desktop.AppCommand.html",
    "title": "Class AppCommand | Zero Install .NET API",
    "summary": "Class AppCommand Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Common base class for commands that manage an AppList. public abstract class AppCommand : IntegrationCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand AppCommand Derived AddAlias AddApp IntegrateApp RemoveApp Inherited Members IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.Description CliCommand.Usage CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommand(ICommandHandler) Common base class for commands that manage an AppList. protected AppCommand(ICommandHandler handler) Parameters handler ICommandHandler Fields InterfaceUri The interface for the application to perform the operation on. protected FeedUri InterfaceUri Field Value FeedUri Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int IntegrationManager Manages desktop integration operations. protected CategoryIntegrationManager IntegrationManager { get; } Property Value CategoryIntegrationManager Methods CreateAlias(AppEntry, string, string?) Creates a new alias. protected void CreateAlias(AppEntry appEntry, string aliasName, string? command = null) Parameters appEntry AppEntry The app entry to add the alias to. aliasName string The name of the alias to create. command string A command within the interface the alias shall point to; can be null. Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. ExecuteHelper() Template method that performs the actual operation. protected abstract ExitCode ExecuteHelper() Returns ExitCode The exit status code to end the process with."
  },
  "api/ZeroInstall.Commands.Desktop.Central.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Central.html",
    "title": "Class Central | Zero Install .NET API",
    "summary": "Class Central Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Opens the central graphical user interface for launching and managing applications. public class Central : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand Central Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Central(ICommandHandler) Creates a new command. public Central(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"central\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.ImportApps.html": {
    "href": "api/ZeroInstall.Commands.Desktop.ImportApps.html",
    "title": "Class ImportApps | Zero Install .NET API",
    "summary": "Class ImportApps Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Imports a set of applications and desktop integrations from an existing AppList file. public class ImportApps : IntegrationCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand ImportApps Inherited Members IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImportApps(ICommandHandler) Creates a new command. public ImportApps(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"import-apps\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int AdditionalArgsMin The minimum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMin { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.IntegrateApp.html": {
    "href": "api/ZeroInstall.Commands.Desktop.IntegrateApp.html",
    "title": "Class IntegrateApp | Zero Install .NET API",
    "summary": "Class IntegrateApp Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Add an application to the AppList (if missing) and integrate it into the desktop environment. public class IntegrateApp : AppCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand AppCommand IntegrateApp Inherited Members AppCommand.AdditionalArgsMin AppCommand.AdditionalArgsMax AppCommand.InterfaceUri AppCommand.IntegrationManager AppCommand.Execute() AppCommand.CreateAlias(AppEntry, string, string) IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntegrateApp(ICommandHandler) Common base class for commands that manage an AppList. public IntegrateApp(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"integrate-app\" Field Value string AltName2 public const string AltName2 = \"desktop\" Field Value string Name public const string Name = \"integrate\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods ExecuteHelper() Template method that performs the actual operation. protected override ExitCode ExecuteHelper() Returns ExitCode The exit status code to end the process with. GetAppEntry(IIntegrationManager, ref FeedUri) Finds an existing AppEntry or creates a new one for a specific interface URI. protected override AppEntry GetAppEntry(IIntegrationManager integrationManager, ref FeedUri interfaceUri) Parameters integrationManager IIntegrationManager Manages desktop integration operations. interfaceUri FeedUri The interface URI to create an AppEntry for. Will be updated if ReplacedBy is set and accepted by the user. Returns AppEntry"
  },
  "api/ZeroInstall.Commands.Desktop.IntegrationCommand.html": {
    "href": "api/ZeroInstall.Commands.Desktop.IntegrationCommand.html",
    "title": "Class IntegrationCommand | Zero Install .NET API",
    "summary": "Class IntegrationCommand Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Common base class for commands that manage ZeroInstall.DesktopIntegration. public abstract class IntegrationCommand : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand Derived AppCommand ImportApps RemoveAllApps RepairApps SyncApps UpdateApps Inherited Members CliCommand.FullName CliCommand.Description CliCommand.Usage CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Execute() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntegrationCommand(ICommandHandler) Creates a new command. protected IntegrationCommand(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields NoDownload Do not download the application itself yet. protected bool NoDownload Field Value bool Methods CheckInstallBase() Checks the current InstallBase to determine whether it is suitable for operations that persist it. protected void CheckInstallBase() Remarks This should be called before performing any operations that persist InstallBase somewhere, e.g. in generated shortcuts or stubs. It is not required for operations that only remove things from the system. Exceptions UnsuitableInstallBaseException The current Zero Install instance is installed in a location unsuitable for the desired operation. GetAppEntry(IIntegrationManager, ref FeedUri) Finds an existing AppEntry or creates a new one for a specific interface URI. protected virtual AppEntry GetAppEntry(IIntegrationManager integrationManager, ref FeedUri interfaceUri) Parameters integrationManager IIntegrationManager Manages desktop integration operations. interfaceUri FeedUri The interface URI to create an AppEntry for. Will be updated if ReplacedBy is set and accepted by the user. Returns AppEntry Parse(IReadOnlyList<string>) Parses command-line arguments and stores the result in the command. public override void Parse(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options. IOException An IO operation failed. UnauthorizedAccessException More privileges are required. UriFormatException The URI or local path specified is invalid."
  },
  "api/ZeroInstall.Commands.Desktop.ListApps.html": {
    "href": "api/ZeroInstall.Commands.Desktop.ListApps.html",
    "title": "Class ListApps | Zero Install .NET API",
    "summary": "Class ListApps Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll List all current AppEntrys in the AppList. public class ListApps : CliCommand Inheritance object ServiceProvider ScopedOperation CliCommand ListApps Inherited Members CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ListApps(ICommandHandler) Creates a new command. public ListApps(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"list-apps\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.RemoveAllApps.html": {
    "href": "api/ZeroInstall.Commands.Desktop.RemoveAllApps.html",
    "title": "Class RemoveAllApps | Zero Install .NET API",
    "summary": "Class RemoveAllApps Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Removes all applications from the AppList and undoes any desktop environment integration. public class RemoveAllApps : IntegrationCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand RemoveAllApps Inherited Members IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemoveAllApps(ICommandHandler) Removes all applications from the AppList and undoes any desktop environment integration. public RemoveAllApps(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"remove-all-apps\" Field Value string Name public const string Name = \"remove-all\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.RemoveApp.html": {
    "href": "api/ZeroInstall.Commands.Desktop.RemoveApp.html",
    "title": "Class RemoveApp | Zero Install .NET API",
    "summary": "Class RemoveApp Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Remove an application from the AppList and undoes any desktop environment integration. public class RemoveApp : AppCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand AppCommand RemoveApp Inherited Members AppCommand.AdditionalArgsMin AppCommand.AdditionalArgsMax AppCommand.InterfaceUri AppCommand.IntegrationManager AppCommand.Execute() AppCommand.CreateAlias(AppEntry, string, string) IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemoveApp(ICommandHandler) Remove an application from the AppList and undoes any desktop environment integration. public RemoveApp(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"remove-app\" Field Value string AltName2 public const string AltName2 = \"destory\" Field Value string Name public const string Name = \"remove\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods ExecuteHelper() Template method that performs the actual operation. protected override ExitCode ExecuteHelper() Returns ExitCode The exit status code to end the process with."
  },
  "api/ZeroInstall.Commands.Desktop.RepairApps.html": {
    "href": "api/ZeroInstall.Commands.Desktop.RepairApps.html",
    "title": "Class RepairApps | Zero Install .NET API",
    "summary": "Class RepairApps Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Reintegrate all applications in the AppList into the desktop environment. public class RepairApps : IntegrationCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand RepairApps Inherited Members IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RepairApps(ICommandHandler) Reintegrate all applications in the AppList into the desktop environment. public RepairApps(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"repair-apps\" Field Value string Name public const string Name = \"repair-all\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.Self.Deploy.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Self.Deploy.html",
    "title": "Class Self.Deploy | Zero Install .NET API",
    "summary": "Class Self.Deploy Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Deploys Zero Install to a target directory and integrates it in the system. public class Self.Deploy : Self.SelfSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand Self.SelfSubCommand Self.Deploy Implements ICliSubCommand Inherited Members Self.SelfSubCommand.ParentName CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Deploy(ICommandHandler) public Deploy(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"deploy\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.Self.Remove.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Self.Remove.html",
    "title": "Class Self.Remove | Zero Install .NET API",
    "summary": "Class Self.Remove Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Removes the current instance of Zero Install from the system. public class Self.Remove : Self.RemoveSubCommandBase, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand Self.SelfSubCommand Self.RemoveSubCommandBase Self.Remove Implements ICliSubCommand Inherited Members Self.RemoveSubCommandBase.Portable Self.RemoveSubCommandBase.MachineWide Self.RemoveSubCommandBase.PerformRemove() Self.SelfSubCommand.ParentName CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Remove(ICommandHandler) Removes the current instance of Zero Install from the system. public Remove(ICommandHandler handler) Parameters handler ICommandHandler Fields Name public const string Name = \"remove\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string TargetDir protected override string TargetDir { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.Self.RemoveSubCommandBase.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Self.RemoveSubCommandBase.html",
    "title": "Class Self.RemoveSubCommandBase | Zero Install .NET API",
    "summary": "Class Self.RemoveSubCommandBase Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll public abstract class Self.RemoveSubCommandBase : Self.SelfSubCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand Self.SelfSubCommand Self.RemoveSubCommandBase Implements ICliSubCommand Derived Self.Remove Inherited Members Self.SelfSubCommand.ParentName CliCommand.FullName CliCommand.Description CliCommand.Usage CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.Execute() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemoveSubCommandBase(ICommandHandler) protected RemoveSubCommandBase(ICommandHandler handler) Parameters handler ICommandHandler Properties MachineWide protected bool MachineWide { get; } Property Value bool Portable protected bool Portable { get; } Property Value bool TargetDir protected abstract string TargetDir { get; } Property Value string Methods PerformRemove() protected void PerformRemove()"
  },
  "api/ZeroInstall.Commands.Desktop.Self.SelfSubCommand.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Self.SelfSubCommand.html",
    "title": "Class Self.SelfSubCommand | Zero Install .NET API",
    "summary": "Class Self.SelfSubCommand Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll public abstract class Self.SelfSubCommand : CliCommand, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand Self.SelfSubCommand Implements ICliSubCommand Derived Self.Deploy Self.RemoveSubCommandBase Inherited Members CliCommand.FullName CliCommand.Description CliCommand.Usage CliCommand.AdditionalArgsMin CliCommand.AdditionalArgsMax CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.Parse(IReadOnlyList<string>) CliCommand.Execute() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SelfSubCommand(ICommandHandler) protected SelfSubCommand(ICommandHandler handler) Parameters handler ICommandHandler Properties ParentName The name of the CliMultiCommand this command is a sub-command of. public string ParentName { get; } Property Value string"
  },
  "api/ZeroInstall.Commands.Desktop.Self.Update.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Self.Update.html",
    "title": "Class Self.Update | Zero Install .NET API",
    "summary": "Class Self.Update Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Updates Zero Install itself to the most recent version. public class Self.Update : Download, ICliSubCommand Inheritance object ServiceProvider ScopedOperation CliCommand Selection Download Self.Update Implements ICliSubCommand Inherited Members Download.UncachedImplementations Download.MinimumNetworkUseForBackgroundSelfUpdate Download.BackgroundSelfUpdateAndClean() Download.Solve() Download.DownloadUncachedImplementations() Download.ShowOutput() Selection.AdditionalArgsMin Selection.AdditionalArgsMax Selection.Requirements Selection.SelectionsDocument Selection.CustomizeSelections Selection.ShowXml Selection.SetInterfaceUri(FeedUri) Selection.Selections Selection.RefreshSolve() Selection.ShowSelections() CliCommand.FullName CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Update(ICommandHandler) Creates a new self update command. public Update(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"update\" Field Value string TopLevelName public const string TopLevelName = \"self-update\" Field Value string Properties Description A short description of what this command does. public override string Description { get; } Property Value string ParentName The name of the CliMultiCommand this command is a sub-command of. public string ParentName { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections. Parse(IReadOnlyList<string>) Parses command-line arguments and stores the result in the command. public override void Parse(IReadOnlyList<string> args) Parameters args IReadOnlyList<string> The command-line arguments to be parsed. Exceptions OperationCanceledException The user asked to see help information, version information, etc.. OptionException args contains unknown options. IOException An IO operation failed. UnauthorizedAccessException More privileges are required. UriFormatException The URI or local path specified is invalid."
  },
  "api/ZeroInstall.Commands.Desktop.Self.html": {
    "href": "api/ZeroInstall.Commands.Desktop.Self.html",
    "title": "Class Self | Zero Install .NET API",
    "summary": "Class Self Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Manages the integration of Zero Install itself in the operating system (deployment and removal). public sealed class Self : CliMultiCommand Inheritance object ServiceProvider ScopedOperation CliCommand CliMultiCommand Self Inherited Members CliMultiCommand.Description CliMultiCommand.Usage CliMultiCommand.Parse(IReadOnlyList<string>) CliMultiCommand.Execute() CliCommand.FullName CliCommand.Handler CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Self(ICommandHandler) Manages the integration of Zero Install itself in the operating system (deployment and removal). public Self(ICommandHandler handler) Parameters handler ICommandHandler Fields AltName public const string AltName = \"maintenance\" Field Value string Name public const string Name = \"self\" Field Value string Properties SubCommandNames A list of sub-command names (without alternatives) as used in command-line arguments in lower-case. public override IEnumerable<string> SubCommandNames { get; } Property Value IEnumerable<string> Methods GetCommand(string) Creates a new sub-CliCommand based on a name. public override CliCommand GetCommand(string commandName) Parameters commandName string The command name to look for; case-insensitive. Returns CliCommand The requested sub-CliCommand. Exceptions OptionException commandName is an unknown command. IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. InvalidDataException A configuration file is damaged."
  },
  "api/ZeroInstall.Commands.Desktop.SelfManager.html": {
    "href": "api/ZeroInstall.Commands.Desktop.SelfManager.html",
    "title": "Class SelfManager | Zero Install .NET API",
    "summary": "Class SelfManager Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Represents a specific Zero Install instance that is to be deployed, updated or removed. public class SelfManager : ManagerBase, IDisposable Inheritance object ManagerBase SelfManager Implements IDisposable Inherited Members ManagerBase.Handler ManagerBase.MachineWide ManagerBase.AcquireMutex() ManagerBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks To prevent race-conditions there may only be one maintenance class instance active at any given time. This class acquires a mutex upon calling its constructor and releases it upon calling Dispose(). Constructors SelfManager(string, ITaskHandler, bool, bool) Creates a new maintenance manager. public SelfManager(string targetDir, ITaskHandler handler, bool machineWide = false, bool portable = false) Parameters targetDir string The full path to the directory containing the Zero Install instance. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. machineWide bool Apply operations machine-wide instead of just for the current user. portable bool Controls whether the Zero Install instance at targetDir should be a portable instance. Properties MutexName The name of the cross-process mutex used to signal that a maintenance operation is currently in progress. protected override string MutexName { get; } Property Value string Portable Controls whether the Zero Install instance at TargetDir should be a portable instance. public bool Portable { get; } Property Value bool TargetDir The full path to the directory containing the Zero Install instance. public string TargetDir { get; } Property Value string Methods Deploy(bool) Runs the deployment process. public void Deploy(bool libraryMode = false) Parameters libraryMode bool Deploy Zero Install as a library for use by other applications. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Remove() Runs the removal process. public void Remove() Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Commands.Desktop.SyncApps.html": {
    "href": "api/ZeroInstall.Commands.Desktop.SyncApps.html",
    "title": "Class SyncApps | Zero Install .NET API",
    "summary": "Class SyncApps Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Synchronize the AppList with the server. public class SyncApps : IntegrationCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand SyncApps Inherited Members IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SyncApps(ICommandHandler) Creates a new command. public SyncApps(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields Name public const string Name = \"sync\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.UpdateApps.html": {
    "href": "api/ZeroInstall.Commands.Desktop.UpdateApps.html",
    "title": "Class UpdateApps | Zero Install .NET API",
    "summary": "Class UpdateApps Namespace ZeroInstall.Commands.Desktop Assembly 0install.dll Updates all applications in the AppList. public class UpdateApps : IntegrationCommand Inheritance object ServiceProvider ScopedOperation CliCommand IntegrationCommand UpdateApps Inherited Members IntegrationCommand.NoDownload IntegrationCommand.Parse(IReadOnlyList<string>) IntegrationCommand.CheckInstallBase() IntegrationCommand.GetAppEntry(IIntegrationManager, ref FeedUri) CliCommand.FullName CliCommand.AdditionalArgsMin CliCommand.HelpText CliCommand.Options CliCommand.Handler CliCommand.AdditionalArgs CliCommand.AddDiscoverOptions() CliCommand.SupportedValues<T>(IEnumerable<T>) CliCommand.SupportedValues<T>() CliCommand.ShowConfig(ConfigTab) CliCommand.FetchAll(IEnumerable<Implementation>) CliCommand.AsParallel<T>(IEnumerable<T>) CliCommand.Create(string, ICommandHandler) CliCommand.CreateAndParse(IReadOnlyList<string>, ICommandHandler) CliCommand.GetCommandName(ref IReadOnlyList<string>) ScopedOperation.GetCanonicalUri(string) ScopedOperation.EnsureAllowed(FeedUri) ScopedOperation.FindByShortName(string) ScopedOperation.BackgroundSelfUpdate() ScopedOperation.MinimumNetworkUseForBackgroundSelfUpdate ScopedOperation.StartCommandBackground(string, params string[]) ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateApps(ICommandHandler) Creates a new command. public UpdateApps(ICommandHandler handler) Parameters handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Fields AltName public const string AltName = \"update-apps\" Field Value string Name public const string Name = \"update-all\" Field Value string Properties AdditionalArgsMax The maximum number of AdditionalArgs allowed. Checked in Parse(IReadOnlyList<string>). protected override int AdditionalArgsMax { get; } Property Value int Description A short description of what this command does. public override string Description { get; } Property Value string Usage The additional arguments to be displayed after the command name in the help text. public override string Usage { get; } Property Value string Methods Execute() Executes the commands specified by the command-line arguments. Must call Parse(IReadOnlyList<string>) first! public override ExitCode Execute() Returns ExitCode The exit status code to end the process with. Remarks When inheriting this method is usually replaced. Exceptions OperationCanceledException The user canceled the task. OptionException The number of arguments passed in on the command-line is incorrect. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted or an external application or file required by the solver could not be accessed. UnauthorizedAccessException An operation failed due to insufficient rights. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data could not be handled for some reason. FormatException An URI, local path, version number, etc. is invalid. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. SolverException The ISolver was unable to provide Selections that fulfill the Requirements. ImplementationNotFoundException One of the ImplementationBases is not cached yet. ExecutorException The IExecutor was unable to process the Selections."
  },
  "api/ZeroInstall.Commands.Desktop.html": {
    "href": "api/ZeroInstall.Commands.Desktop.html",
    "title": "Namespace ZeroInstall.Commands.Desktop | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Commands.Desktop CLI commands for Zero Install's desktop integration features. Classes AddAlias Create an alias for a Run command. AddApp Add an application to the AppList. AppCommand Common base class for commands that manage an AppList. Central Opens the central graphical user interface for launching and managing applications. ImportApps Imports a set of applications and desktop integrations from an existing AppList file. IntegrateApp Add an application to the AppList (if missing) and integrate it into the desktop environment. IntegrationCommand Common base class for commands that manage ZeroInstall.DesktopIntegration. ListApps List all current AppEntrys in the AppList. RemoveAllApps Removes all applications from the AppList and undoes any desktop environment integration. RemoveApp Remove an application from the AppList and undoes any desktop environment integration. RepairApps Reintegrate all applications in the AppList into the desktop environment. Self Manages the integration of Zero Install itself in the operating system (deployment and removal). Self.Deploy Deploys Zero Install to a target directory and integrates it in the system. Self.Remove Removes the current instance of Zero Install from the system. Self.RemoveSubCommandBase Self.SelfSubCommand Self.Update Updates Zero Install itself to the most recent version. SelfManager Represents a specific Zero Install instance that is to be deployed, updated or removed. SyncApps Synchronize the AppList with the server. UpdateApps Updates all applications in the AppList."
  },
  "api/ZeroInstall.Commands.EnvironmentBuilderExtensions.html": {
    "href": "api/ZeroInstall.Commands.EnvironmentBuilderExtensions.html",
    "title": "Class EnvironmentBuilderExtensions | Zero Install .NET API",
    "summary": "Class EnvironmentBuilderExtensions Namespace ZeroInstall.Commands Assembly 0install.dll Provides extension methods for IEnvironmentBuilder. public static class EnvironmentBuilderExtensions Inheritance object EnvironmentBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetCallbackEnvironmentVariables(IEnvironmentBuilder) Adds environment variables that allow the program to make calls back to Zero Install. public static IEnvironmentBuilder SetCallbackEnvironmentVariables(this IEnvironmentBuilder builder) Parameters builder IEnvironmentBuilder Returns IEnvironmentBuilder"
  },
  "api/ZeroInstall.Commands.ExitCode.html": {
    "href": "api/ZeroInstall.Commands.ExitCode.html",
    "title": "Enum ExitCode | Zero Install .NET API",
    "summary": "Enum ExitCode Namespace ZeroInstall.Commands Assembly 0install.dll An exit code is returned to the original caller after the application terminates, to indicate success or the reason for failure. public enum ExitCode Fields AccessDenied = 11 You have insufficient access rights. This can potentially be fixed by running the command as an Administrator/root. It may also indicate misconfigured file permissions. Conflict = 15 A desktop integration operation could not be completed due to conflicting AccessPoints. DigestMismatch = 26 The ManifestDigest of an implementation does not match the expected value. This could be caused by a damaged download or an incorrect feed. ExecutorError = 21 The IExecutor was unable to launch the desired application. This usually indicates a problem with the feed. IOError = 12 There was an IO problem. This encompasses issues such as missing files or insufficient disk space. InvalidArguments = 99 The command-line arguments passed to the application were invalid. InvalidData = 25 A data file could not be parsed. This encompasses issues such as damaged configuration files or malformed XML documents (e.g. feeds). InvalidSignature = 27 There was a problem with the digital signature of a feed. The signature may be missing, damaged or not trusted for the source the feed came from. NoChanges = 1 The operation resulted in no changes. This may be due to a problem with the input or simply indicate that the system is already in the desired state. NotSupported = 50 The operation could not be completed because a feature that is not (yet) supported was requested. Upgrading to a newer version may resolve this issue. OK = 0 The operation completed without any problems. SolverError = 20 The ISolver was unable to provide Selections that fulfill the Requirements. This can be caused by a problem with the feed, an impossible request (e.g., non-existing version) or your local configuration. UserCanceled = 100 The user canceled the task. WebError = 10 There was a network problem. This may be intermittent and resolve itself e.g. when a Wi-Fi connection is restored."
  },
  "api/ZeroInstall.Commands.ICliSubCommand.html": {
    "href": "api/ZeroInstall.Commands.ICliSubCommand.html",
    "title": "Interface ICliSubCommand | Zero Install .NET API",
    "summary": "Interface ICliSubCommand Namespace ZeroInstall.Commands Assembly 0install.dll Interface for CliCommands that are aggregated by a CliMultiCommand. public interface ICliSubCommand Properties ParentName The name of the CliMultiCommand this command is a sub-command of. string ParentName { get; } Property Value string"
  },
  "api/ZeroInstall.Commands.ICommandHandler.html": {
    "href": "api/ZeroInstall.Commands.ICommandHandler.html",
    "title": "Interface ICommandHandler | Zero Install .NET API",
    "summary": "Interface ICommandHandler Namespace ZeroInstall.Commands Assembly 0install.dll Callback methods to allow users to interact with CliCommands. public interface ICommandHandler : ITaskHandler, IDisposable Inherited Members ITaskHandler.RunTask(ITask) ITaskHandler.Ask(string, bool?, string) ITaskHandler.Output(string, string) ITaskHandler.Output<T>(string, IEnumerable<T>) ITaskHandler.Output<T>(string, NamedCollection<T>) ITaskHandler.Error(Exception) ITaskHandler.CancellationToken ITaskHandler.Verbosity IDisposable.Dispose() Remarks The methods may be called from a background thread. Implementations apply appropriate thread-synchronization to update UI elements. Properties Background Hides the GUI and uses something like a tray icon instead. Has no effect when IsGui is false. bool Background { get; set; } Property Value bool FeedUri The URI of the Zero Install feed the current operation relates to. FeedUri? FeedUri { get; set; } Property Value FeedUri Remarks This can be used to apply application-specific visual branding. IsGui Indicates whether this handler is a GUI. bool IsGui { get; } Property Value bool Methods CloseUI() Closes any persistent UI elements that were created. void CloseUI() CustomizeSelections(Func<Selections>) Allows the user to customize the interface preferences and rerun the solver if desired. Returns once the user is finished. void CustomizeSelections(Func<Selections> solveCallback) Parameters solveCallback Func<Selections> Called after interface preferences have been changed and the solver needs to be rerun. DisableUI() Disables any persistent UI elements that were created but still leaves them visible. void DisableUI() ShowIntegrateApp(IntegrationState) Displays application integration options to the user. Returns once the user is finished. void ShowIntegrateApp(IntegrationState state) Parameters state IntegrationState A View-Model for modifying the current desktop integration state. Remarks The caller is responsible for applying changes. Exceptions OperationCanceledException The user does not want any changes to be applied. ShowSelections(Selections, IFeedManager) Shows the Selections made by the solver to the user. Returns immediately. May be ignored by some implementations. void ShowSelections(Selections selections, IFeedManager feedManager) Parameters selections Selections The Selections as provided by the solver. feedManager IFeedManager The feed manager used to retrieve feeds for additional information about implementations."
  },
  "api/ZeroInstall.Commands.NeedsGuiException.html": {
    "href": "api/ZeroInstall.Commands.NeedsGuiException.html",
    "title": "Class NeedsGuiException | Zero Install .NET API",
    "summary": "Class NeedsGuiException Namespace ZeroInstall.Commands Assembly 0install.dll Indicates that the requested operation requires a GUI but the current process does not have one. public class NeedsGuiException : NotSupportedException, ISerializable Inheritance object Exception SystemException NotSupportedException NeedsGuiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NeedsGuiException() Initializes a new instance of the NotSupportedException class, setting the Message property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture. public NeedsGuiException() NeedsGuiException(string) Initializes a new instance of the NotSupportedException class with a specified error message. public NeedsGuiException(string message) Parameters message string A string that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. NeedsGuiException(string, Exception) Initializes a new instance of the NotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception. public NeedsGuiException(string message, Exception inner) Parameters message string The error message that explains the reason for the exception. inner Exception"
  },
  "api/ZeroInstall.Commands.ProgramUtils.html": {
    "href": "api/ZeroInstall.Commands.ProgramUtils.html",
    "title": "Class ProgramUtils | Zero Install .NET API",
    "summary": "Class ProgramUtils Namespace ZeroInstall.Commands Assembly 0install.dll Provides utility methods for application entry points. public static class ProgramUtils Inheritance object ProgramUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UILanguage The current UI language; null to use system default. public static CultureInfo? UILanguage { get; set; } Property Value CultureInfo Remarks This value is only used on Windows and is stored in the Registry. For non-Windows platforms use the LC_* environment variables instead. Methods CliStartInfo(params string[]) Creates a ProcessStartInfo for launching an instance of the 0install command-line interface. public static ProcessStartInfo? CliStartInfo(params string[] arguments) Parameters arguments string[] Returns ProcessStartInfo GuiStartInfo(params string[]) Creates a ProcessStartInfo for launching an instance of the 0install graphical interface. public static ProcessStartInfo? GuiStartInfo(params string[] arguments) Parameters arguments string[] Returns ProcessStartInfo Init() Common initialization code to be called by every Zero Install executable right after startup. public static void Init() Run(string, string[], ICommandHandler) Parses command-line arguments and performs the indicated action. Performs error handling. public static ExitCode Run(string exeName, string[] args, ICommandHandler handler) Parameters exeName string The name of the executable to use as a reference in help messages and self-invocation. args string[] The arguments to be processed. handler ICommandHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Returns ExitCode The exit status code to end the process with. Cast to int to return from a Main method."
  },
  "api/ZeroInstall.Commands.Properties.Resources.html": {
    "href": "api/ZeroInstall.Commands.Properties.Resources.html",
    "title": "Class Resources | Zero Install .NET API",
    "summary": "Class Resources Namespace ZeroInstall.Commands.Properties Assembly 0install.dll A strongly-typed resource class, for looking up localized strings, etc. public class Resources Inheritance object Resources Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Added0installToPath Looks up a localized string similar to The command '0install' has been added to your command-line PATH.. public static string Added0installToPath { get; } Property Value string AliasCreated Looks up a localized string similar to An alias named '{0}' for '{1}' was created.. public static string AliasCreated { get; } Property Value string AliasNotFound Looks up a localized string similar to No existing alias named '{0}' was found.. public static string AliasNotFound { get; } Property Value string AliasRemoved Looks up a localized string similar to The alias named '{0}' for '{1}' was removed.. public static string AliasRemoved { get; } Property Value string AllComponentsDownloaded Looks up a localized string similar to All required components have been downloaded.. public static string AllComponentsDownloaded { get; } Property Value string AllComponentsExported Looks up a localized string similar to All components required to run {0} have been exported to '{1}'. You can use the import script or Bootstrap executable in '{1}' to import these files on another computer.. public static string AllComponentsExported { get; } Property Value string AlreadyInImplDirs Looks up a localized string similar to '{0}' is already in the list of custom implementation caches.. public static string AlreadyInImplDirs { get; } Property Value string AppAlias Looks up a localized string similar to Application alias. public static string AppAlias { get; } Property Value string AppList Looks up a localized string similar to Application list. public static string AppList { get; } Property Value string AskDeployMachineWide Looks up a localized string similar to Setup Zero Install for all users (machine-wide) instead of just the current user?. public static string AskDeployMachineWide { get; } Property Value string AskDeployNewTarget Looks up a localized string similar to Are you sure you want to deploy a new copy of Zero Install to '{0}'?. public static string AskDeployNewTarget { get; } Property Value string AskDeployZeroInstall Looks up a localized string similar to This will add Zero Install to the start menu and command-line. Continue?. public static string AskDeployZeroInstall { get; } Property Value string AskRemoveZeroInstall Looks up a localized string similar to Are you sure you want to remove Zero Install from this computer?. public static string AskRemoveZeroInstall { get; } Property Value string AskTryNow Looks up a localized string similar to Do you want to try this now?. public static string AskTryNow { get; } Property Value string AskUpdateCapabilities Looks up a localized string similar to Do you wish to update any existing desktop integration to reflect this? If you select 'Yes' potentially incompatible integrations will be removed. If you select 'No' Zero Install will continue to use the old capabilities.. public static string AskUpdateCapabilities { get; } Property Value string CachedImplementations Looks up a localized string similar to Cached implementations. public static string CachedImplementations { get; } Property Value string Cancel Looks up a localized string similar to Cancel. public static string Cancel { get; } Property Value string CapabilitiesChanged Looks up a localized string similar to The capabilities of the application '{0}' have changed.. public static string CapabilitiesChanged { get; } Property Value string CatalogAlreadyRegistered Looks up a localized string similar to The catalog URI {0} is already registered.. public static string CatalogAlreadyRegistered { get; } Property Value string CatalogNotRegistered Looks up a localized string similar to The catalog URI {0} is not registered.. public static string CatalogNotRegistered { get; } Property Value string CatalogSources Looks up a localized string similar to Catalog sources. public static string CatalogSources { get; } Property Value string Change Looks up a localized string similar to Change. public static string Change { get; } Property Value string ChangesFound Looks up a localized string similar to Changes found. public static string ChangesFound { get; } Property Value string ClickToChoose Looks up a localized string similar to Click here to choose.. public static string ClickToChoose { get; } Property Value string Command Looks up a localized string similar to Command. public static string Command { get; } Property Value string CommandLineArguments Looks up a localized string similar to Command-line arguments. public static string CommandLineArguments { get; } Property Value string Configuration Looks up a localized string similar to Configuration. public static string Configuration { get; } Property Value string ConfirmPurge Looks up a localized string similar to Do you wish to remove all application files from the Zero Install cache? These files can downloaded again if needed.. public static string ConfirmPurge { get; } Property Value string ConfirmRemoveAll Looks up a localized string similar to Do you wish to remove all applications from the 'My applications' list? This prevents leftover menu entries after removing Zero Install. You can create a backup of this list by using '0install sync'.. public static string ConfirmRemoveAll { get; } Property Value string Culture Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class. public static CultureInfo Culture { get; set; } Property Value CultureInfo DataGridCommandAccessPointHelp Looks up a localized string similar to Start entering text in the last line to create a new entry. Select an entire line by clicking in the first column and then press DEL on the keyboard to remove an entry.. public static string DataGridCommandAccessPointHelp { get; } Property Value string DataGridDefaultAccessPointHelp Looks up a localized string similar to Set a checkbox to make a capability your desired default handler. Remove a checkbox to remove a capability's default status (it still remains available).. public static string DataGridDefaultAccessPointHelp { get; } Property Value string DeleteCheckedEntries Looks up a localized string similar to Do you want to delete the {0} checked element(s) from the cache?. public static string DeleteCheckedEntries { get; } Property Value string DeleteEntry Looks up a localized string similar to Do you want to delete this entry from the cache?. public static string DeleteEntry { get; } Property Value string DeployMissingTargetForPortable Looks up a localized string similar to When using the {0} option you must explicitly specify the target directory.. public static string DeployMissingTargetForPortable { get; } Property Value string DeployTargetOutsideHome Looks up a localized string similar to The specified target directory ({0}) is located outside your home directory.. public static string DeployTargetOutsideHome { get; } Property Value string DeployedPortable Looks up a localized string similar to A portable version of Zero Install has been deployed to '{0}'. You can use it by running the ZeroInstall.exe file in the directory.. public static string DeployedPortable { get; } Property Value string DeprecatedOption Looks up a localized string similar to Deprecated option. Please use '{0}' instead.. public static string DeprecatedOption { get; } Property Value string Description Looks up a localized string similar to Description. public static string Description { get; } Property Value string DescriptionAddAlias Looks up a localized string similar to Create an alias for launching an application via 0install without always having to enter the full URI.. public static string DescriptionAddAlias { get; } Property Value string DescriptionAddApp Looks up a localized string similar to Add an application to the application list.. public static string DescriptionAddApp { get; } Property Value string DescriptionAddFeed Looks up a localized string similar to Register an additional source of implementations (versions) of a program.. public static string DescriptionAddFeed { get; } Property Value string DescriptionCatalogAdd Looks up a localized string similar to Adds an URI to the list of catalogs.. public static string DescriptionCatalogAdd { get; } Property Value string DescriptionCatalogList Looks up a localized string similar to Lists all registered catalogs.. public static string DescriptionCatalogList { get; } Property Value string DescriptionCatalogRefresh Looks up a localized string similar to Refreshes (downloads) all registered catalogs.. public static string DescriptionCatalogRefresh { get; } Property Value string DescriptionCatalogRemove Looks up a localized string similar to Removes an URI from the list of catalogs.. public static string DescriptionCatalogRemove { get; } Property Value string DescriptionCatalogReset Looks up a localized string similar to Resets the list of catalogs to the default source.. public static string DescriptionCatalogReset { get; } Property Value string DescriptionCatalogSearch Looks up a localized string similar to Searches registered catalogs for applications that match the specified query. If no query is given all applications in the catalogs are listed.. public static string DescriptionCatalogSearch { get; } Property Value string DescriptionCentral Looks up a localized string similar to Opens the central graphical user interface for launching and managing applications.. public static string DescriptionCentral { get; } Property Value string DescriptionConfig Looks up a localized string similar to View or change configuration settings. With no arguments, it displays all settings and their current values. With one argument, it displays the current value of the named setting. With two arguments, it sets the setting to the given value or resets it to the default value if the value \"{0}\" is given.. public static string DescriptionConfig { get; } Property Value string DescriptionDigest Looks up a localized string similar to Calculates the manifest digest of a directory or archive.. public static string DescriptionDigest { get; } Property Value string DescriptionDownload Looks up a localized string similar to Behaves similarly to '0install select', except that it also downloads the selected versions if they are not already cached. Returns an exit status of 0 if it selected a suitable set of versions and they are now all downloaded and in the cache; returns a status of 1 otherwise.. public static string DescriptionDownload { get; } Property Value string DescriptionExport Looks up a localized string similar to Exports all feeds and implementations required to launch the program specified by a URI to a DIRECTORY.. public static string DescriptionExport { get; } Property Value string DescriptionImport Looks up a localized string similar to Imports a feed from a local file, as if it had been downloaded from the network. This is useful when testing a feed file, to avoid uploading it to a remote server in order to download it again. The file must have a trusted digital signature, as when fetching from the network.. public static string DescriptionImport { get; } Property Value string DescriptionImportApps Looks up a localized string similar to Imports a set of applications and desktop integrations from an existing app-list.xml file.. public static string DescriptionImportApps { get; } Property Value string DescriptionIntegrateApp Looks up a localized string similar to Adds an application to the application list (if missing) and integrate it into the desktop environment.. public static string DescriptionIntegrateApp { get; } Property Value string DescriptionList Looks up a localized string similar to Lists all locally known feed URIs. If a search term is given, only URIs containing that string are shown (case insensitive).. public static string DescriptionList { get; } Property Value string DescriptionListApps Looks up a localized string similar to Lists all applications currently in your application list. If an URI is given, only the application with that feed URI is shown. If a PATTERN is given, only applications containing that string in their name are shown (case insensitive).. public static string DescriptionListApps { get; } Property Value string DescriptionListFeeds Looks up a localized string similar to Lists all extra feeds added to URI using '0install add-feed'.. public static string DescriptionListFeeds { get; } Property Value string DescriptionMaintenanceDeploy Looks up a localized string similar to Deploys Zero Install to the specified TARGET directory or the default directory for programs and integrates it in the system.. public static string DescriptionMaintenanceDeploy { get; } Property Value string DescriptionMaintenanceRemove Looks up a localized string similar to Removes the current instance of Zero Install from the system.. public static string DescriptionMaintenanceRemove { get; } Property Value string DescriptionRemoveAllApps Looks up a localized string similar to Removes all applications from the application list and undoes any desktop environment integration. Use this command to clean up the system before removing Zero Install.. public static string DescriptionRemoveAllApps { get; } Property Value string DescriptionRemoveApp Looks up a localized string similar to Removes an application from the application list and undoes any desktop environment integration.. public static string DescriptionRemoveApp { get; } Property Value string DescriptionRemoveFeed Looks up a localized string similar to Un-registers a feed, reversing the effect of '0install add-feed'.. public static string DescriptionRemoveFeed { get; } Property Value string DescriptionRepairApps Looks up a localized string similar to Reapplies all desktop integrations of applications in the application list.. public static string DescriptionRepairApps { get; } Property Value string DescriptionRun Looks up a localized string similar to Behaves similarly to '0install download', except that it also runs the program after ensuring it is in the cache. Returns an exit status of 1 if the download step failed. Otherwise, the exit status will be the exit status of the program being run.. public static string DescriptionRun { get; } Property Value string DescriptionSearch Looks up a localized string similar to Searches for feeds indexed by the mirror server that match specified keywords. Note that the default mirror server indexes all known feeds, regardless of quality; you must decide whether to trust the programs before running them.. public static string DescriptionSearch { get; } Property Value string DescriptionSelect Looks up a localized string similar to Selects a version of the program identified by URI, and compatible versions of all of its dependencies. Returns an exit status of 0 if it selected a set of versions, and a status of 1 if it could not find a consistent set.. public static string DescriptionSelect { get; } Property Value string DescriptionSelfUpdate Looks up a localized string similar to Updates Zero Install itself to the most recent version.. public static string DescriptionSelfUpdate { get; } Property Value string DescriptionStoreAdd Looks up a localized string similar to Adds the contents of a directory or archive to the cache.. public static string DescriptionStoreAdd { get; } Property Value string DescriptionStoreAddDir Looks up a localized string similar to Adds a directory to the list of custom implementation caches.. public static string DescriptionStoreAddDir { get; } Property Value string DescriptionStoreAudit Looks up a localized string similar to Checks that all implementations in the cache are undamaged. Additional arguments specify custom cache locations.. public static string DescriptionStoreAudit { get; } Property Value string DescriptionStoreCopy Looks up a localized string similar to Copies an implementation into the cache. Similar to '0install store add', but the digest is extracted from the directory name. An additional arguments specifies a custom target cache location.. public static string DescriptionStoreCopy { get; } Property Value string DescriptionStoreExport Looks up a localized string similar to Exports a cached implementation as an archive (ZIP, TAR, etc.). The result can be imported on another machine using '0install store add'.. public static string DescriptionStoreExport { get; } Property Value string DescriptionStoreFind Looks up a localized string similar to Determines the local path of a cached implementation.. public static string DescriptionStoreFind { get; } Property Value string DescriptionStoreList Looks up a localized string similar to Lists all implementation cache directories.. public static string DescriptionStoreList { get; } Property Value string DescriptionStoreListImplementations Looks up a localized string similar to Lists all cached implementations. If a feed URI is specified only implementations for that particular feed are listed.. public static string DescriptionStoreListImplementations { get; } Property Value string DescriptionStoreManage Looks up a localized string similar to Displays a graphical user interface for managing implementations in the cache. Shows associations with cached feeds.. public static string DescriptionStoreManage { get; } Property Value string DescriptionStoreOptimise Looks up a localized string similar to Saves disk space by merging identical files with hardlinks. Additional arguments specify custom cache locations.. public static string DescriptionStoreOptimise { get; } Property Value string DescriptionStorePurge Looks up a localized string similar to Removes all implementations from the cache. Use this command to clean up the system before removing Zero Install. Deleting cache directories manually may be difficult due to the NTFS ACLs employed to protect implementations against modification. Additional arguments specify custom cache locations.. public static string DescriptionStorePurge { get; } Property Value string DescriptionStoreRemove Looks up a localized string similar to Removes an implementation from the cache.. public static string DescriptionStoreRemove { get; } Property Value string DescriptionStoreRemoveDir Looks up a localized string similar to Removes a directory from the list of custom implementation caches.. public static string DescriptionStoreRemoveDir { get; } Property Value string DescriptionStoreServe Looks up a localized string similar to Serves implementations from the cache as archives via HTTP.. public static string DescriptionStoreServe { get; } Property Value string DescriptionStoreVerify Looks up a localized string similar to Makes sure an implementation has not been damaged (i.e. it manifest digest has not changed).. public static string DescriptionStoreVerify { get; } Property Value string DescriptionSync Looks up a localized string similar to Synchronizes the application list with the server.. public static string DescriptionSync { get; } Property Value string DescriptionTrustAdd Looks up a localized string similar to Trusts feeds from a specific DOMAIN when signed with a specific FINGERPRINT.. public static string DescriptionTrustAdd { get; } Property Value string DescriptionTrustList Looks up a localized string similar to List keys trusted for signing feeds. Only list domains for which a specific FINGERPRINT is trusted, if specified.. public static string DescriptionTrustList { get; } Property Value string DescriptionTrustRemove Looks up a localized string similar to Stops trusting feeds signed with a specific FINGERPRINT. Only stops trusting for a specific DOMAIN, if specified.. public static string DescriptionTrustRemove { get; } Property Value string DescriptionUpdate Looks up a localized string similar to Checks for updates to the program and download them if found. This is similar to '0install download --refresh', except that it prints information about whether any changes were found.. public static string DescriptionUpdate { get; } Property Value string DescriptionUpdateApps Looks up a localized string similar to Updates all applications in the application list.. public static string DescriptionUpdateApps { get; } Property Value string DesktopIntegration Looks up a localized string similar to Desktop integration. public static string DesktopIntegration { get; } Property Value string DesktopIntegrationApply Looks up a localized string similar to Applying desktop integration. public static string DesktopIntegrationApply { get; } Property Value string DesktopIntegrationRemove Looks up a localized string similar to Removing desktop integration. public static string DesktopIntegrationRemove { get; } Property Value string DiscoveringImplementation Looks up a localized string similar to Searching in local network. public static string DiscoveringImplementation { get; } Property Value string Done Looks up a localized string similar to Done. public static string Done { get; } Property Value string DownloadComplete Looks up a localized string similar to Download complete. public static string DownloadComplete { get; } Property Value string EnterCatalogUrl Looks up a localized string similar to Please enter the URL or local file path of the feed catalog to add:. public static string EnterCatalogUrl { get; } Property Value string EnterFeedUrl Looks up a localized string similar to Please enter the URL of the new source of implementations for this interface:. public static string EnterFeedUrl { get; } Property Value string ExclusiveOptions Looks up a localized string similar to The options {0} and {1} cannot be used together.. public static string ExclusiveOptions { get; } Property Value string ExistingInstance Looks up a localized string similar to An existing copy of Zero Install was detected in '{0}'.. public static string ExistingInstance { get; } Property Value string ExportComplete Looks up a localized string similar to Export complete.. public static string ExportComplete { get; } Property Value string FeedAlreadyRegistered Looks up a localized string similar to The feed was already registered for all appropriate interfaces.. public static string FeedAlreadyRegistered { get; } Property Value string FeedManagement Looks up a localized string similar to Feed management. public static string FeedManagement { get; } Property Value string FeedNotRegistered Looks up a localized string similar to The feed was not registered for any interfaces.. public static string FeedNotRegistered { get; } Property Value string FeedRegistered Looks up a localized string similar to The feed was successfully registered for the following interfaces:. public static string FeedRegistered { get; } Property Value string FeedReplaced Looks up a localized string similar to '{0}' has been replaced by '{1}'. Consider updating.. public static string FeedReplaced { get; } Property Value string FeedReplacedAsk Looks up a localized string similar to The feed for '{0}' ({1}) has been replaced by '{2}'. Do you want to use the new feed instead?. public static string FeedReplacedAsk { get; } Property Value string FeedUnregistered Looks up a localized string similar to The feed was successfully unregistered for the following interfaces:. public static string FeedUnregistered { get; } Property Value string FeedsCached Looks up a localized string similar to Cached feeds. public static string FeedsCached { get; } Property Value string FeedsRegistered Looks up a localized string similar to Feeds registered for '{0}'. public static string FeedsRegistered { get; } Property Value string FileCheckComplete Looks up a localized string similar to File check complete. public static string FileCheckComplete { get; } Property Value string FileOrDirNotFound Looks up a localized string similar to Unable to find file or directory '{0}'.. public static string FileOrDirNotFound { get; } Property Value string FilePrefixAbsoluteUsage Looks up a localized string similar to Use file:///path for absolute paths, not file:/path.. public static string FilePrefixAbsoluteUsage { get; } Property Value string Hide Looks up a localized string similar to Hide. public static string Hide { get; } Property Value string IgnoreMissingFeedFor Looks up a localized string similar to This feed does not seem to be for the same application. Add it anyway? A <feed-for> tag indicates feed compatibility.. public static string IgnoreMissingFeedFor { get; } Property Value string InstallService Looks up a localized string similar to Installing Zero Install Store Service. public static string InstallService { get; } Property Value string Integrate Looks up a localized string similar to Integrate {0}. public static string Integrate { get; } Property Value string IntegrateAppInvalid Looks up a localized string similar to Your desktop integration selections can not be applied.. public static string IntegrateAppInvalid { get; } Property Value string IntegrateAppRetry Looks up a localized string similar to Do you want to change your selection and try again?. public static string IntegrateAppRetry { get; } Property Value string IntegrateAppUseGui Looks up a localized string similar to Please use the GUI version of Zero Install or specify explicit integration options using command-line arguments.. public static string IntegrateAppUseGui { get; } Property Value string InvalidArgument Looks up a localized string similar to Invalid argument '{0}'.. public static string InvalidArgument { get; } Property Value string InvalidFeedUri Looks up a localized string similar to '{0}' is not a valid feed URI or file path.. public static string InvalidFeedUri { get; } Property Value string KioskModeNotInCatalog Looks up a localized string similar to Kiosk mode is enabled and {0} is not listed in the catalog.. public static string KioskModeNotInCatalog { get; } Property Value string LaterVersionNotSelected Looks up a localized string similar to A later version ({0}) exists but was not selected. Using {1} instead.. public static string LaterVersionNotSelected { get; } Property Value string LicenseInfo Looks up a localized string similar to This program comes with ABSOLUTELY NO WARRANTY, to the extent permitted by law. You may redistribute copies of this program under the terms of the GNU Lesser General Public License.. public static string LicenseInfo { get; } Property Value string LocalPathOf Looks up a localized string similar to Local path of {0}. public static string LocalPathOf { get; } Property Value string MissingArguments Looks up a localized string similar to Missing arguments.. public static string MissingArguments { get; } Property Value string MissingFeedFor Looks up a localized string similar to Missing <feed-for> element in '{0}'; it can't be used as a feed for any other interface.. public static string MissingFeedFor { get; } Property Value string MissingOptionValue Looks up a localized string similar to Missing required value for option {0}.. public static string MissingOptionValue { get; } Property Value string MustBeAdminForMachineWide Looks up a localized string similar to You must be an administrator to perform machine-wide operations.. public static string MustBeAdminForMachineWide { get; } Property Value string MutexWait Looks up a localized string similar to Waiting for all Zero Install instances to end. public static string MutexWait { get; } Property Value string MyApps Looks up a localized string similar to My applications. public static string MyApps { get; } Property Value string NeedsGui Looks up a localized string similar to Please use the GUI version of Zero Install for this feature.. public static string NeedsGui { get; } Property Value string NoAddCommandWithoutAlias Looks up a localized string similar to {0} may only be specified together with an alias name.. public static string NoAddCommandWithoutAlias { get; } Property Value string NoCustomizeSelectionsInCli Looks up a localized string similar to The graphical policy editor is not available in command-line mode.. public static string NoCustomizeSelectionsInCli { get; } Property Value string NoIntegrationDeployRequired Looks up a localized string similar to Zero Install needs to be deployed on your system for desktop integration to work.. public static string NoIntegrationDeployRequired { get; } Property Value string NoIntegrationFromPortable Looks up a localized string similar to Zero Install is running in portable mode. It needs to be deployed to a permanent location for desktop integration to work. You can do this using '{0}'. This will be completely independent from your portable copy.. public static string NoIntegrationFromPortable { get; } Property Value string NoMachineWideIntegrationFromPerUser Looks up a localized string similar to Zero Install is running from a user-specific directory. It needs to be deployed to a directory accessible by all users for machine-wide desktop integration to work.. public static string NoMachineWideIntegrationFromPerUser { get; } Property Value string NoRunWithEmptyCommand Looks up a localized string similar to When running an implementation the command may not be empty.. public static string NoRunWithEmptyCommand { get; } Property Value string NoSelectionsDocumentUpdate Looks up a localized string similar to Can only update with Feed URIs, not with selections documents.. public static string NoSelectionsDocumentUpdate { get; } Property Value string NoUpdatesFound Looks up a localized string similar to No updates found. public static string NoUpdatesFound { get; } Property Value string NotAvailableInPortableMode Looks up a localized string similar to This operation is not available in portable mode.. public static string NotAvailableInPortableMode { get; } Property Value string NotInImplDirs Looks up a localized string similar to '{0}' is not in the list of custom implementation caches.. public static string NotInImplDirs { get; } Property Value string OpenInFileManager Looks up a localized string similar to &Open in file manager. public static string OpenInFileManager { get; } Property Value string OptimiseComplete Looks up a localized string similar to Optimization complete. public static string OptimiseComplete { get; } Property Value string OptionAlgorithm Looks up a localized string similar to The {HASH} algorithm to use for the digest.. public static string OptionAlgorithm { get; } Property Value string OptionAliasRemove Looks up a localized string similar to Remove an existing alias.. public static string OptionAliasRemove { get; } Property Value string OptionAliasResolve Looks up a localized string similar to Print the interface URI for the given alias.. public static string OptionAliasResolve { get; } Property Value string OptionBackground Looks up a localized string similar to Hide the graphical user interface and use something like a tray icon instead.. public static string OptionBackground { get; } Property Value string OptionBatch Looks up a localized string similar to Automatically answer questions with defaults when possible and simplify console output (no tables or progress bars).. public static string OptionBatch { get; } Property Value string OptionBefore Looks up a localized string similar to Require a version of the main program earlier than {VERSION}. i.e., force the use of an old version the program.. public static string OptionBefore { get; } Property Value string OptionCatalogAddSkipVerify Looks up a localized string similar to Skip downloading the catalog to verify it is valid before adding it to the list.. public static string OptionCatalogAddSkipVerify { get; } Property Value string OptionClean Looks up a localized string similar to Remove implementations no longer required after the update.. public static string OptionClean { get; } Property Value string OptionCommand Looks up a localized string similar to Instead of executing the default command, use {COMMAND} instead. Valid command names are specified in the program's feed. Set to empty (\"\") to ignore the command during selection.. public static string OptionCommand { get; } Property Value string OptionConfigTab Looks up a localized string similar to Switch to a specific tab in the configuration GUI.. public static string OptionConfigTab { get; } Property Value string OptionCpu Looks up a localized string similar to Forces the solver to target a specific {CPU}.. public static string OptionCpu { get; } Property Value string OptionCustomize Looks up a localized string similar to Show the graphical policy editor. This allows you to customize which version of a program or library to use.. public static string OptionCustomize { get; } Property Value string OptionDigest Looks up a localized string similar to Display the manifest's digest (enabled by default if --manifest is not set).. public static string OptionDigest { get; } Property Value string OptionDiscover Looks up a localized string similar to Try to discover implementations on other machines in the local network instead of fetching them from their original source.. public static string OptionDiscover { get; } Property Value string OptionExportIncludeZeroInstall Looks up a localized string similar to Include Zero Install itself in the export alongside the application.. public static string OptionExportIncludeZeroInstall { get; } Property Value string OptionExportNoImplementations Looks up a localized string similar to Do not include implementation archives in the export. Only export feeds.. public static string OptionExportNoImplementations { get; } Property Value string OptionForceSelfUpdate Looks up a localized string similar to Perform the update even if the currently installed version is the same or newer.. public static string OptionForceSelfUpdate { get; } Property Value string OptionHelp Looks up a localized string similar to Show the built-in help text.. public static string OptionHelp { get; } Property Value string OptionIntegrateAdd Looks up a localized string similar to Add all access points of a specific {CATEGORY}.. public static string OptionIntegrateAdd { get; } Property Value string OptionIntegrateAddAll Looks up a localized string similar to Add all available access points.. public static string OptionIntegrateAddAll { get; } Property Value string OptionIntegrateAddStandard Looks up a localized string similar to Add the recommended standard access points.. public static string OptionIntegrateAddStandard { get; } Property Value string OptionIntegrateRemove Looks up a localized string similar to Remove all access points of a specific {CATEGORY}.. public static string OptionIntegrateRemove { get; } Property Value string OptionIntegrateRemoveAll Looks up a localized string similar to Remove all access points.. public static string OptionIntegrateRemoveAll { get; } Property Value string OptionLanguage Looks up a localized string similar to Specifies the preferred language for the implementation. Use ISO short language codes (e.g. en or en-US). You can use this option multiple times to specify multiple acceptable languages.. public static string OptionLanguage { get; } Property Value string OptionLibrary Looks up a localized string similar to Deploy Zero Install as a library for use by other applications without its own desktop integration.. public static string OptionLibrary { get; } Property Value string OptionMachine Looks up a localized string similar to Apply the configuration machine-wide (for the entire computer) instead of just for the current user.. public static string OptionMachine { get; } Property Value string OptionMain Looks up a localized string similar to Run the specified executable {MAIN} instead of the default. If it starts with '/' or '' then the path is relative to the implementation's top-level directory, whereas otherwise it is relative to the directory containing the default main program. May not contain command-line arguments! Whitespaces do not need to be escaped.. public static string OptionMain { get; } Property Value string OptionManifest Looks up a localized string similar to Display the manifest itself (one line for each file or directory).. public static string OptionManifest { get; } Property Value string OptionMessage Looks up a localized string similar to Message to display when interacting with user.. public static string OptionMessage { get; } Property Value string OptionNoDownload Looks up a localized string similar to Do not download the application itself yet. Will be automatically downloaded on first use instead.. public static string OptionNoDownload { get; } Property Value string OptionNoWait Looks up a localized string similar to Immediately returns once the chosen program has been launched instead of waiting for it to finish executing. On Windows the exit code is the process ID of the launched program.. public static string OptionNoWait { get; } Property Value string OptionNotBefore Looks up a localized string similar to Require a version of the main program not earlier than {VERSION}. E.g., if you want to run version 2.0 or later, use --not-before=2.0.. public static string OptionNotBefore { get; } Property Value string OptionOS Looks up a localized string similar to Forces the solver to target the operating system {OS}.. public static string OptionOS { get; } Property Value string OptionOffline Looks up a localized string similar to Run in off-line mode, overriding the default setting. In off-line mode, no interfaces are refreshed even if they are out-of-date, and newer versions of programs won't be downloaded even if the injector already knows about them (e.g. from a previous refresh).. public static string OptionOffline { get; } Property Value string OptionPin Looks up a localized string similar to Marks the selected version as preferred for future runs.. public static string OptionPin { get; } Property Value string OptionPortable Looks up a localized string similar to Create a portable installation that can be moved around (e.g., on a thumb drive).. public static string OptionPortable { get; } Property Value string OptionRefresh Looks up a localized string similar to Fetch fresh copies of all used feeds.. public static string OptionRefresh { get; } Property Value string OptionRestartCentral Looks up a localized string similar to Restart the '0install central' GUI after the update.. public static string OptionRestartCentral { get; } Property Value string OptionShow Looks up a localized string similar to Show where the selected components are stored on the disk.. public static string OptionShow { get; } Property Value string OptionSource Looks up a localized string similar to Select source code rather than a binary. This is used internally by '0compile'.. public static string OptionSource { get; } Property Value string OptionSyncReset Looks up a localized string similar to Reset the synchronization data. Valid {MODE}s are 'none' (merge data from client and server normally), 'client' (replace all data on client with data from server) and 'server' (replace all data on server with data from client).. public static string OptionSyncReset { get; } Property Value string OptionUnpin Looks up a localized string similar to Releases versions previously marked as preferred.. public static string OptionUnpin { get; } Property Value string OptionVerbose Looks up a localized string similar to More verbose output. Use twice for even more verbose output.. public static string OptionVerbose { get; } Property Value string OptionVersion Looks up a localized string similar to Display version information.. public static string OptionVersion { get; } Property Value string OptionVersionRange Looks up a localized string similar to Require a version of the main program within the given {RANGE}. Ranges are separated by pipes (|). Each range is in the form \"START..!END\". The range matches versions where START <= VERSION < END. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or !VERSION to match everything except that version.. public static string OptionVersionRange { get; } Property Value string OptionVersionRangeFor Looks up a localized string similar to For any library or sub-component with the given {0:URI} specifies the version {1:RANGE} (as for --version).. public static string OptionVersionRangeFor { get; } Property Value string OptionWithStore Looks up a localized string similar to Add {DIR} to the list of implementation caches to search. However, new downloads will not be written to this directory.. public static string OptionWithStore { get; } Property Value string OptionWrapper Looks up a localized string similar to Instead of executing the chosen program directly, run {COMMAND} PROGRAM ARGS. This is useful for running debuggers and tracing tools on the program (rather than on Zero Install!). Note that the wrapper is executed in the environment selected by the program; hence, this mechanism cannot be used for sandboxing. May contain command-line arguments. Whitespaces must be escaped!. public static string OptionWrapper { get; } Property Value string OptionXml Looks up a localized string similar to Write output to console as machine-readable XML.. public static string OptionXml { get; } Property Value string Options Looks up a localized string similar to Options:. public static string Options { get; } Property Value string PortableMode Looks up a localized string similar to Portable mode. public static string PortableMode { get; } Property Value string PropertiesFor Looks up a localized string similar to Properties for {0}. public static string PropertiesFor { get; } Property Value string Remove Looks up a localized string similar to Remove. public static string Remove { get; } Property Value string RemoveCheckedKeys Looks up a localized string similar to Do you want to remove the {0} checked keys from the list?. public static string RemoveCheckedKeys { get; } Property Value string RemoveSelectedEntries Looks up a localized string similar to Do you want to remove the {0} selected entries from the list?. public static string RemoveSelectedEntries { get; } Property Value string RemovingApplications Looks up a localized string similar to Removing applications. public static string RemovingApplications { get; } Property Value string RemovingOutdated Looks up a localized string similar to Removing outdated implementations. public static string RemovingOutdated { get; } Property Value string ReopenTerminal Looks up a localized string similar to You may have to close and reopen your terminal for this to become effective.. public static string ReopenTerminal { get; } Property Value string ResetList Looks up a localized string similar to Do you want to reset the list to its original state?. public static string ResetList { get; } Property Value string ResolvedUsingAlias Looks up a localized string similar to Resolved '{0}' to '{1}' using an alias.. public static string ResolvedUsingAlias { get; } Property Value string ResolvedUsingCatalog Looks up a localized string similar to Resolved '{0}' to '{1}' using a catalog.. public static string ResolvedUsingCatalog { get; } Property Value string ResourceManager Returns the cached ResourceManager instance used by this class. public static ResourceManager ResourceManager { get; } Property Value ResourceManager RunNgen Looks up a localized string similar to Pre-compiling .NET assemblies for faster application startup. public static string RunNgen { get; } Property Value string SelectedImplementations Looks up a localized string similar to Selected implementations. public static string SelectedImplementations { get; } Property Value string SelfRemoveNotDeployed Looks up a localized string similar to This instance of Zero Install is not deployed. There is nothing to remove.. public static string SelfRemoveNotDeployed { get; } Property Value string SelfUpdateAvailable Looks up a localized string similar to An update to Zero Install v{0} is available. Install now?. public static string SelfUpdateAvailable { get; } Property Value string SelfUpdateBlocked Looks up a localized string similar to This Zero Install instance was not deployed. It therefore cannot update itself.. public static string SelfUpdateBlocked { get; } Property Value string SelfUpdateDisabled Looks up a localized string similar to Self-update is disabled. Run '0install config self_update_uri default' to enable it.. public static string SelfUpdateDisabled { get; } Property Value string ServingImplementations Looks up a localized string similar to Serving implementations on port {0}. public static string ServingImplementations { get; } Property Value string StabilityPolicyAutoSet Looks up a localized string similar to Set stability policy for {0} to match?. public static string StabilityPolicyAutoSet { get; } Property Value string StabilityPolicyReset Looks up a localized string similar to Reset stability policy for {0} to default?. public static string StabilityPolicyReset { get; } Property Value string StabilityPolicySuggested Looks up a localized string similar to The stability policy needed to select implementations from {0} is '{1}'.. public static string StabilityPolicySuggested { get; } Property Value string StartService Looks up a localized string similar to Starting Zero Install Store Service. public static string StartService { get; } Property Value string StopService Looks up a localized string similar to Stopping Zero Install Store Service. public static string StopService { get; } Property Value string StorageReclaimed Looks up a localized string similar to {0} storage space reclaimed.. public static string StorageReclaimed { get; } Property Value string StoreAudit Looks up a localized string similar to Store audit. public static string StoreAudit { get; } Property Value string SuggestLongPath Looks up a localized string similar to Enabling Windows support for Long Paths may solve this problem.. public static string SuggestLongPath { get; } Property Value string SupportedValues Looks up a localized string similar to Supported values: {0}. public static string SupportedValues { get; } Property Value string SyncCryptoKeyDescription Looks up a localized string similar to The crypto key is used to encrypt your data locally before transmitting it to the server. Keep this key secret and use something different for your password. This way nobody can access your data, even if the server were to be compromised.. public static string SyncCryptoKeyDescription { get; } Property Value string TooManyArguments Looks up a localized string similar to Too many arguments or unknown options.. public static string TooManyArguments { get; } Property Value string TrustedForDomains Looks up a localized string similar to {0} trusted for domains. public static string TrustedForDomains { get; } Property Value string TrustedKeys Looks up a localized string similar to Trusted keys. public static string TrustedKeys { get; } Property Value string TryHelp Looks up a localized string similar to Try {0}. public static string TryHelp { get; } Property Value string TryHelpWith Looks up a localized string similar to Try {0} with one of these:. public static string TryHelpWith { get; } Property Value string TryRunAgain Looks up a localized string similar to Please try running {0} again.. public static string TryRunAgain { get; } Property Value string UninstallService Looks up a localized string similar to Uninstalling Zero Install Store Service. public static string UninstallService { get; } Property Value string UnknownCommand Looks up a localized string similar to Unknown command '{0}'.. public static string UnknownCommand { get; } Property Value string Usage Looks up a localized string similar to Usage:. public static string Usage { get; } Property Value string UseDefaultSetting Looks up a localized string similar to Use default setting. public static string UseDefaultSetting { get; } Property Value string UseInstead Looks up a localized string similar to Use '{0}' instead.. public static string UseInstead { get; } Property Value string UseSystemLanguage Looks up a localized string similar to Use system language. public static string UseSystemLanguage { get; } Property Value string Verify Looks up a localized string similar to Verify. public static string Verify { get; } Property Value string VerifyImplementation Looks up a localized string similar to Verify implementation. public static string VerifyImplementation { get; } Property Value string VersionInformation Looks up a localized string similar to Version information. public static string VersionInformation { get; } Property Value string Working Looks up a localized string similar to Working. public static string Working { get; } Property Value string"
  },
  "api/ZeroInstall.Commands.Properties.html": {
    "href": "api/ZeroInstall.Commands.Properties.html",
    "title": "Namespace ZeroInstall.Commands.Properties | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Commands.Properties Classes Resources A strongly-typed resource class, for looking up localized strings, etc."
  },
  "api/ZeroInstall.Commands.ScopedOperation.html": {
    "href": "api/ZeroInstall.Commands.ScopedOperation.html",
    "title": "Class ScopedOperation | Zero Install .NET API",
    "summary": "Class ScopedOperation Namespace ZeroInstall.Commands Assembly 0install.dll Common base class for Zero Install operations that require scoped dependency resolution. public abstract class ScopedOperation : ServiceProvider Inheritance object ServiceProvider ScopedOperation Derived CliCommand Inherited Members ServiceProvider.Handler ServiceProvider.Config ServiceProvider.ImplementationStore ServiceProvider.OpenPgp ServiceProvider.FeedCache ServiceProvider.TrustManager ServiceProvider.FeedManager ServiceProvider.CatalogManager ServiceProvider.PackageManager ServiceProvider.SelectionCandidateProvider ServiceProvider.Solver ServiceProvider.Fetcher ServiceProvider.Executor ServiceProvider.SelectionsManager ServiceProvider.TrySolveOffline(Requirements) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ScopedOperation(ITaskHandler) Common base class for Zero Install operations that require scoped dependency resolution. protected ScopedOperation(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Properties MinimumNetworkUseForBackgroundSelfUpdate The minimum EffectiveNetworkUse at which BackgroundSelfUpdate() will consider an update check. protected virtual NetworkLevel MinimumNetworkUseForBackgroundSelfUpdate { get; } Property Value NetworkLevel Methods BackgroundSelfUpdate() Automatically updates Zero Install itself in a background process. protected bool BackgroundSelfUpdate() Returns bool true if a background check was started; false if an update check was not due. EnsureAllowed(FeedUri) Ensures that the current config does not prohibit the use of the specified feed URI. protected void EnsureAllowed(FeedUri uri) Parameters uri FeedUri Exceptions WebException KioskMode is true and the uri is not the Catalog. FindByShortName(string) Uses FindByShortName(string?) to find a Feed matching a specific short name. protected Feed? FindByShortName(string shortName) Parameters shortName string The short name to look for. Must match either Name or BinaryName of NameRun. Returns Feed The first matching Feed; null if no match was found. Remarks Handles caching based on Refresh flag. GetCanonicalUri(string) Converts an interface or feed URI to its canonical representation. public FeedUri GetCanonicalUri(string uri) Parameters uri string Returns FeedUri Exceptions UriFormatException uri is an invalid interface URI. StartCommandBackground(string, params string[]) Starts executing a command in a background process. Returns immediately. protected static void StartCommandBackground(string command, params string[] args) Parameters command string The name of the command to execute. args string[] Additional arguments to pass to the command."
  },
  "api/ZeroInstall.Commands.UnsuitableInstallBaseException.html": {
    "href": "api/ZeroInstall.Commands.UnsuitableInstallBaseException.html",
    "title": "Class UnsuitableInstallBaseException | Zero Install .NET API",
    "summary": "Class UnsuitableInstallBaseException Namespace ZeroInstall.Commands Assembly 0install.dll Indicates that the current InstallBase is unsuitable for the desired operation. [Serializable] public sealed class UnsuitableInstallBaseException : NotSupportedException, ISerializable Inheritance object Exception SystemException NotSupportedException UnsuitableInstallBaseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors UnsuitableInstallBaseException() Initializes a new instance of the NotSupportedException class, setting the Message property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture. public UnsuitableInstallBaseException() UnsuitableInstallBaseException(string) Initializes a new instance of the NotSupportedException class with a specified error message. public UnsuitableInstallBaseException(string message) Parameters message string A string that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. UnsuitableInstallBaseException(string, bool) Creates a new unsuitable install base exception. public UnsuitableInstallBaseException(string message, bool needsMachineWide) Parameters message string A message describing why the current location in unsuitable. needsMachineWide bool true if a machine-wide location is required; false if a user-specific location will also do. UnsuitableInstallBaseException(string, Exception) Initializes a new instance of the NotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception. public UnsuitableInstallBaseException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Properties NeedsMachineWide true if a machine-wide install location is required; false if a user-specific location will also do. public bool NeedsMachineWide { get; } Property Value bool"
  },
  "api/ZeroInstall.Commands.ZeroInstallInstance.html": {
    "href": "api/ZeroInstall.Commands.ZeroInstallInstance.html",
    "title": "Class ZeroInstallInstance | Zero Install .NET API",
    "summary": "Class ZeroInstallInstance Namespace ZeroInstall.Commands Assembly 0install.dll Provides information about the currently running instance of Zero Install. public static class ZeroInstallInstance Inheritance object ZeroInstallInstance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsDeployed Indicates whether the current Zero Install instance is deployed to a fixed location. public static bool IsDeployed { get; } Property Value bool IsIntegrated Indicates whether the current Zero Install instance is integrated into the desktop environment. public static bool IsIntegrated { get; } Property Value bool IsLibraryMode Indicates whether the current Zero Install instance is in library mode. public static bool IsLibraryMode { get; } Property Value bool IsMachineWide Indicates whether Zero Install is running from a machine-wide location. public static bool IsMachineWide { get; } Property Value bool Version The current version of Zero Install. public static ImplementationVersion Version { get; } Property Value ImplementationVersion Methods SilentUpdateCheck() Silently checks if an update for Zero Install is available. public static ImplementationVersion? SilentUpdateCheck() Returns ImplementationVersion The version number of the newest available update; null if no update is available."
  },
  "api/ZeroInstall.Commands.html": {
    "href": "api/ZeroInstall.Commands.html",
    "title": "Namespace ZeroInstall.Commands | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Commands Command-line interface for Zero Install. Both an actual CLI and a library for building other clients. NuGet package: ZeroInstall.Commands Namespaces ZeroInstall.Commands.Basic CLI commands for Zero Install's core features. ZeroInstall.Commands.Desktop CLI commands for Zero Install's desktop integration features. ZeroInstall.Commands.Properties Classes CliCommand Represents a command invoked via command-line arguments. CliCommandHandler Uses the stdin/stderr streams to allow users to interact with CliCommands. CliMultiCommand Common base class for commands that provide multiple sub-CliCommands. EnvironmentBuilderExtensions Provides extension methods for IEnvironmentBuilder. NeedsGuiException Indicates that the requested operation requires a GUI but the current process does not have one. ProgramUtils Provides utility methods for application entry points. ScopedOperation Common base class for Zero Install operations that require scoped dependency resolution. UnsuitableInstallBaseException Indicates that the current InstallBase is unsuitable for the desired operation. ZeroInstallInstance Provides information about the currently running instance of Zero Install. Interfaces ICliSubCommand Interface for CliCommands that are aggregated by a CliMultiCommand. ICommandHandler Callback methods to allow users to interact with CliCommands. Enums ExitCode An exit code is returned to the original caller after the application terminates, to indicate success or the reason for failure."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.AccessPoint.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.AccessPoint.html",
    "title": "Class AccessPoint | Zero Install .NET API",
    "summary": "Class AccessPoint Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll An access point represents changes to the desktop environment's UI which the user explicitly requested. public abstract class AccessPoint : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<AccessPoint> Inheritance object XmlUnknown AccessPoint Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> Derived CapabilityRegistration CommandAccessPoint DefaultAccessPoint Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) XmlUnknown.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public abstract void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public abstract AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public abstract IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. Unapply(AppEntry, bool) Unapply this access point on the current machine. public abstract void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.AccessPointList.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.AccessPointList.html",
    "title": "Class AccessPointList | Zero Install .NET API",
    "summary": "Class AccessPointList Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Contains a set of AccessPoints to be registered in a desktop environment. [Serializable] [Equatable] public sealed class AccessPointList : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<AccessPointList>, IEquatable<AccessPointList> Inheritance object XmlUnknown AccessPointList Implements IEquatable<XmlUnknown> ICloneable<AccessPointList> IEquatable<AccessPointList> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Entries A list of AccessPoints. [OrderedEquality] public List<AccessPoint> Entries { get; } Property Value List<AccessPoint> Methods Clone() Creates a deep copy of this AccessPointList instance. public AccessPointList Clone() Returns AccessPointList The new copy of the AccessPointList. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point list in the form \"Entry; Entry; ...\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(AccessPointList?, AccessPointList?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AccessPointList? left, AccessPointList? right) Parameters left AccessPointList The left object right AccessPointList The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AccessPointList?, AccessPointList?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AccessPointList? left, AccessPointList? right) Parameters left AccessPointList The left object right AccessPointList The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.AppAlias.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.AppAlias.html",
    "title": "Class AppAlias | Zero Install .NET API",
    "summary": "Class AppAlias Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Makes an application discoverable via the system's search PATH. [Equatable] public class AppAlias : CommandAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint>, IEquatable<AppAlias> Inheritance object XmlUnknown AccessPoint CommandAccessPoint AppAlias Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> IEquatable<AppAlias> Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(CommandAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AltName public const string AltName = \"aliases\" Field Value string TagName public const string TagName = \"alias\" Field Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(AppAlias?) protected bool Equals(AppAlias? other) Parameters other AppAlias Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(AppAlias?, AppAlias?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AppAlias? left, AppAlias? right) Parameters left AppAlias The left object right AppAlias The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AppAlias?, AppAlias?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AppAlias? left, AppAlias? right) Parameters left AppAlias The left object right AppAlias The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.AutoPlay.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.AutoPlay.html",
    "title": "Class AutoPlay | Zero Install .NET API",
    "summary": "Class AutoPlay Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Makes an application the default AutoPlay handler for a specific event. [Equatable] public class AutoPlay : DefaultAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint>, IEquatable<AutoPlay> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint AutoPlay Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> IEquatable<AutoPlay> Inherited Members DefaultAccessPoint.TagName DefaultAccessPoint.AltName DefaultAccessPoint.Capability DefaultAccessPoint.Equals(DefaultAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(AutoPlay?) protected bool Equals(AutoPlay? other) Parameters other AutoPlay Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"AutoPlay\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(AutoPlay?, AutoPlay?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AutoPlay? left, AutoPlay? right) Parameters left AutoPlay The left object right AutoPlay The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AutoPlay?, AutoPlay?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AutoPlay? left, AutoPlay? right) Parameters left AutoPlay The left object right AutoPlay The right object Returns bool true if the objects are not equal; otherwise, false. See Also AutoPlay"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.AutoStart.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.AutoStart.html",
    "title": "Class AutoStart | Zero Install .NET API",
    "summary": "Class AutoStart Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Automatically starts an application when the user logs in. [Equatable] public class AutoStart : CommandAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint>, IEquatable<AutoStart> Inheritance object XmlUnknown AccessPoint CommandAccessPoint AutoStart Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> IEquatable<AutoStart> Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(CommandAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields TagName public const string TagName = \"auto-start\" Field Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(AutoStart?) protected bool Equals(AutoStart? other) Parameters other AutoStart Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(AutoStart?, AutoStart?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AutoStart? left, AutoStart? right) Parameters left AutoStart The left object right AutoStart The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AutoStart?, AutoStart?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AutoStart? left, AutoStart? right) Parameters left AutoStart The left object right AutoStart The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.CapabilityRegistration.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.CapabilityRegistration.html",
    "title": "Class CapabilityRegistration | Zero Install .NET API",
    "summary": "Class CapabilityRegistration Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Indicates that all compatible capabilities should be registered. [Equatable] public class CapabilityRegistration : AccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CapabilityRegistration> Inheritance object XmlUnknown AccessPoint CapabilityRegistration Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CapabilityRegistration> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AltName public const string AltName = \"capabilities\" Field Value string TagName public const string TagName = \"capability-registration\" Field Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(CapabilityRegistration?) protected bool Equals(CapabilityRegistration? other) Parameters other CapabilityRegistration Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"CapabilityRegistration\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(CapabilityRegistration?, CapabilityRegistration?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(CapabilityRegistration? left, CapabilityRegistration? right) Parameters left CapabilityRegistration The left object right CapabilityRegistration The right object Returns bool true if the objects are equal; otherwise, false. operator !=(CapabilityRegistration?, CapabilityRegistration?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(CapabilityRegistration? left, CapabilityRegistration? right) Parameters left CapabilityRegistration The left object right CapabilityRegistration The right object Returns bool true if the objects are not equal; otherwise, false. See Also ZeroInstall.Model.Capabilities"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.CommandAccessPoint.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.CommandAccessPoint.html",
    "title": "Class CommandAccessPoint | Zero Install .NET API",
    "summary": "Class CommandAccessPoint Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Adds a way to explicitly launch the application to the desktop environment. [Equatable] public abstract class CommandAccessPoint : AccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint> Inheritance object XmlUnknown AccessPoint CommandAccessPoint Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> Derived AppAlias AutoStart IconAccessPoint Inherited Members AccessPoint.GetConflictIDs(AppEntry) AccessPoint.Apply(AppEntry, Feed, IIconStore, bool) AccessPoint.Unapply(AppEntry, bool) AccessPoint.Clone() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Command The name of the Command to use when launching via this access point. Leave empty to use default. public string? Command { get; set; } Property Value string Name The name of the menu entry, icon, command-line, etc.. public string? Name { get; set; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(CommandAccessPoint?) protected bool Equals(CommandAccessPoint? other) Parameters other CommandAccessPoint Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"AccessPointType: Name (Command)\". Not safe for parsing! public override string ToString() Returns string ValidateName() Ensures that the given name can be used as a file name. protected void ValidateName() Exceptions IOException Name contains invalid characters. Operators operator ==(CommandAccessPoint?, CommandAccessPoint?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(CommandAccessPoint? left, CommandAccessPoint? right) Parameters left CommandAccessPoint The left object right CommandAccessPoint The right object Returns bool true if the objects are equal; otherwise, false. operator !=(CommandAccessPoint?, CommandAccessPoint?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(CommandAccessPoint? left, CommandAccessPoint? right) Parameters left CommandAccessPoint The left object right CommandAccessPoint The right object Returns bool true if the objects are not equal; otherwise, false. See Also Command"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.ContextMenu.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.ContextMenu.html",
    "title": "Class ContextMenu | Zero Install .NET API",
    "summary": "Class ContextMenu Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Integrates an application into a file manager's context menu. [Equatable] public class ContextMenu : DefaultAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint>, IEquatable<ContextMenu> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint ContextMenu Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> IEquatable<ContextMenu> Inherited Members DefaultAccessPoint.TagName DefaultAccessPoint.AltName DefaultAccessPoint.Capability DefaultAccessPoint.Equals(DefaultAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(ContextMenu?) protected bool Equals(ContextMenu? other) Parameters other ContextMenu Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"ContextMenu\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(ContextMenu?, ContextMenu?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ContextMenu? left, ContextMenu? right) Parameters left ContextMenu The left object right ContextMenu The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ContextMenu?, ContextMenu?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ContextMenu? left, ContextMenu? right) Parameters left ContextMenu The left object right ContextMenu The right object Returns bool true if the objects are not equal; otherwise, false. See Also ContextMenu"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.DefaultAccessPoint.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.DefaultAccessPoint.html",
    "title": "Class DefaultAccessPoint | Zero Install .NET API",
    "summary": "Class DefaultAccessPoint Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Makes an application the default handler for something. [Equatable] public abstract class DefaultAccessPoint : AccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> Derived AutoPlay ContextMenu DefaultProgram FileType MockAccessPoint UrlProtocol Inherited Members AccessPoint.GetConflictIDs(AppEntry) AccessPoint.Apply(AppEntry, Feed, IIconStore, bool) AccessPoint.Unapply(AppEntry, bool) AccessPoint.Clone() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AltName public const string AltName = \"default-app\" Field Value string TagName public const string TagName = \"default-access-point\" Field Value string Properties Capability The ID of the Capability to be made the default handler. public required string Capability { get; set; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(DefaultAccessPoint?) protected bool Equals(DefaultAccessPoint? other) Parameters other DefaultAccessPoint Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DefaultAccessPoint?, DefaultAccessPoint?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DefaultAccessPoint? left, DefaultAccessPoint? right) Parameters left DefaultAccessPoint The left object right DefaultAccessPoint The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DefaultAccessPoint?, DefaultAccessPoint?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DefaultAccessPoint? left, DefaultAccessPoint? right) Parameters left DefaultAccessPoint The left object right DefaultAccessPoint The right object Returns bool true if the objects are not equal; otherwise, false. See Also Capability"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.DefaultProgram.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.DefaultProgram.html",
    "title": "Class DefaultProgram | Zero Install .NET API",
    "summary": "Class DefaultProgram Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Makes an application a default program of some kind (e.g. default web-browser, default e-mail client, ...). [Equatable] public class DefaultProgram : DefaultAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint>, IEquatable<DefaultProgram> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint DefaultProgram Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> IEquatable<DefaultProgram> Inherited Members DefaultAccessPoint.TagName DefaultAccessPoint.AltName DefaultAccessPoint.Capability DefaultAccessPoint.Equals(DefaultAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(DefaultProgram?) protected bool Equals(DefaultProgram? other) Parameters other DefaultProgram Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"DefaultProgram\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(DefaultProgram?, DefaultProgram?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DefaultProgram? left, DefaultProgram? right) Parameters left DefaultProgram The left object right DefaultProgram The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DefaultProgram?, DefaultProgram?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DefaultProgram? left, DefaultProgram? right) Parameters left DefaultProgram The left object right DefaultProgram The right object Returns bool true if the objects are not equal; otherwise, false. See Also DefaultProgram"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.DesktopIcon.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.DesktopIcon.html",
    "title": "Class DesktopIcon | Zero Install .NET API",
    "summary": "Class DesktopIcon Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Creates an icon for an application on the user's desktop. [Equatable] public class DesktopIcon : IconAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint>, IEquatable<DesktopIcon> Inheritance object XmlUnknown AccessPoint CommandAccessPoint IconAccessPoint DesktopIcon Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> IEquatable<DesktopIcon> Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(CommandAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AltName public const string AltName = \"desktop\" Field Value string TagName public const string TagName = \"desktop-icon\" Field Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(DesktopIcon?) protected bool Equals(DesktopIcon? other) Parameters other DesktopIcon Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(DesktopIcon?, DesktopIcon?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DesktopIcon? left, DesktopIcon? right) Parameters left DesktopIcon The left object right DesktopIcon The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DesktopIcon?, DesktopIcon?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DesktopIcon? left, DesktopIcon? right) Parameters left DesktopIcon The left object right DesktopIcon The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.FileType.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.FileType.html",
    "title": "Class FileType | Zero Install .NET API",
    "summary": "Class FileType Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Makes an application the default handler for a specific file type. [Equatable] public class FileType : DefaultAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint>, IEquatable<FileType> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint FileType Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> IEquatable<FileType> Inherited Members DefaultAccessPoint.TagName DefaultAccessPoint.AltName DefaultAccessPoint.Capability DefaultAccessPoint.Equals(DefaultAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(FileType?) protected bool Equals(FileType? other) Parameters other FileType Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"FileType: Capability\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(FileType?, FileType?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FileType? left, FileType? right) Parameters left FileType The left object right FileType The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FileType?, FileType?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FileType? left, FileType? right) Parameters left FileType The left object right FileType The right object Returns bool true if the objects are not equal; otherwise, false. See Also FileType"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.IconAccessPoint.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.IconAccessPoint.html",
    "title": "Class IconAccessPoint | Zero Install .NET API",
    "summary": "Class IconAccessPoint Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Creates some form of icon in the desktop environment. public abstract class IconAccessPoint : CommandAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint> Inheritance object XmlUnknown AccessPoint CommandAccessPoint IconAccessPoint Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> Derived DesktopIcon MenuEntry QuickLaunch SendTo Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(object) CommandAccessPoint.Equals(CommandAccessPoint) CommandAccessPoint.GetHashCode() AccessPoint.GetConflictIDs(AppEntry) AccessPoint.Apply(AppEntry, Feed, IIconStore, bool) AccessPoint.Unapply(AppEntry, bool) AccessPoint.Clone() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.MenuEntry.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.MenuEntry.html",
    "title": "Class MenuEntry | Zero Install .NET API",
    "summary": "Class MenuEntry Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Creates an entry for an application in the user's application menu (i.e. Windows start menu, GNOME application menu, etc.). [Equatable] public class MenuEntry : IconAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint>, IEquatable<MenuEntry> Inheritance object XmlUnknown AccessPoint CommandAccessPoint IconAccessPoint MenuEntry Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> IEquatable<MenuEntry> Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(CommandAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields AltName public const string AltName = \"menu\" Field Value string TagName public const string TagName = \"menu-entry\" Field Value string Properties Category The category or folder in the menu to add the entry to. Leave empty for top-level entry. public string? Category { get; set; } Property Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(MenuEntry?) protected bool Equals(MenuEntry? other) Parameters other MenuEntry Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(MenuEntry?, MenuEntry?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(MenuEntry? left, MenuEntry? right) Parameters left MenuEntry The left object right MenuEntry The right object Returns bool true if the objects are equal; otherwise, false. operator !=(MenuEntry?, MenuEntry?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(MenuEntry? left, MenuEntry? right) Parameters left MenuEntry The left object right MenuEntry The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.MockAccessPoint.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.MockAccessPoint.html",
    "title": "Class MockAccessPoint | Zero Install .NET API",
    "summary": "Class MockAccessPoint Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll A mock access point that does nothing (used for testing). Points to a FileType. [Equatable] public class MockAccessPoint : DefaultAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint>, IEquatable<MockAccessPoint> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint MockAccessPoint Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> IEquatable<MockAccessPoint> Inherited Members DefaultAccessPoint.TagName DefaultAccessPoint.AltName DefaultAccessPoint.Capability DefaultAccessPoint.Equals(DefaultAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MockAccessPoint() public MockAccessPoint() Properties ApplyFlagPath The path to a file to create when Apply(AppEntry, Feed, IIconStore, bool) is called. public string? ApplyFlagPath { get; set; } Property Value string ID A unique identifier. Determines the conflict ID. public string? ID { get; set; } Property Value string UnapplyFlagPath The path to a file to create when Unapply(AppEntry, bool) is called. public string? UnapplyFlagPath { get; set; } Property Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(MockAccessPoint?) protected bool Equals(MockAccessPoint? other) Parameters other MockAccessPoint Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"MockAccessPoint: ID\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(MockAccessPoint?, MockAccessPoint?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(MockAccessPoint? left, MockAccessPoint? right) Parameters left MockAccessPoint The left object right MockAccessPoint The right object Returns bool true if the objects are equal; otherwise, false. operator !=(MockAccessPoint?, MockAccessPoint?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(MockAccessPoint? left, MockAccessPoint? right) Parameters left MockAccessPoint The left object right MockAccessPoint The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.QuickLaunch.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.QuickLaunch.html",
    "title": "Class QuickLaunch | Zero Install .NET API",
    "summary": "Class QuickLaunch Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Creates a shortcut for an application in the Quick Launch bar. [Equatable] public class QuickLaunch : IconAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint>, IEquatable<QuickLaunch> Inheritance object XmlUnknown AccessPoint CommandAccessPoint IconAccessPoint QuickLaunch Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> IEquatable<QuickLaunch> Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(CommandAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(QuickLaunch?) protected bool Equals(QuickLaunch? other) Parameters other QuickLaunch Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(QuickLaunch?, QuickLaunch?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(QuickLaunch? left, QuickLaunch? right) Parameters left QuickLaunch The left object right QuickLaunch The right object Returns bool true if the objects are equal; otherwise, false. operator !=(QuickLaunch?, QuickLaunch?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(QuickLaunch? left, QuickLaunch? right) Parameters left QuickLaunch The left object right QuickLaunch The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.SendTo.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.SendTo.html",
    "title": "Class SendTo | Zero Install .NET API",
    "summary": "Class SendTo Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Creates a shortcut for an application in the \"Send to\" menu. [Equatable] public class SendTo : IconAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<CommandAccessPoint>, IEquatable<SendTo> Inheritance object XmlUnknown AccessPoint CommandAccessPoint IconAccessPoint SendTo Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<CommandAccessPoint> IEquatable<SendTo> Inherited Members CommandAccessPoint.Name CommandAccessPoint.Command CommandAccessPoint.ValidateName() CommandAccessPoint.ToString() CommandAccessPoint.Equals(CommandAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields TagName public const string TagName = \"send-to\" Field Value string Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(SendTo?) protected bool Equals(SendTo? other) Parameters other SendTo Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(SendTo?, SendTo?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(SendTo? left, SendTo? right) Parameters left SendTo The left object right SendTo The right object Returns bool true if the objects are equal; otherwise, false. operator !=(SendTo?, SendTo?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(SendTo? left, SendTo? right) Parameters left SendTo The left object right SendTo The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.UrlProtocol.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.UrlProtocol.html",
    "title": "Class UrlProtocol | Zero Install .NET API",
    "summary": "Class UrlProtocol Namespace ZeroInstall.DesktopIntegration.AccessPoints Assembly ZeroInstall.DesktopIntegration.dll Makes an application the default handler for a specific URL protocol. [Equatable] public class UrlProtocol : DefaultAccessPoint, IEquatable<XmlUnknown>, ICloneable<AccessPoint>, IEquatable<DefaultAccessPoint>, IEquatable<UrlProtocol> Inheritance object XmlUnknown AccessPoint DefaultAccessPoint UrlProtocol Implements IEquatable<XmlUnknown> ICloneable<AccessPoint> IEquatable<DefaultAccessPoint> IEquatable<UrlProtocol> Inherited Members DefaultAccessPoint.TagName DefaultAccessPoint.AltName DefaultAccessPoint.Capability DefaultAccessPoint.Equals(DefaultAccessPoint) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Apply(AppEntry, Feed, IIconStore, bool) Applies this access point to the current machine. public override void Apply(AppEntry appEntry, Feed feed, IIconStore iconStore, bool machineWide) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Clone() Creates a deep copy of this AccessPoint instance. public override AccessPoint Clone() Returns AccessPoint The new copy of the AccessPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(UrlProtocol?) protected bool Equals(UrlProtocol? other) Parameters other UrlProtocol Returns bool GetConflictIDs(AppEntry) Retrieves identifiers from a namespace global to all AccessPoints. Collisions in this namespace indicate that the respective AccessPoints are in conflict cannot be applied on a system at the same time. public override IEnumerable<string> GetConflictIDs(AppEntry appEntry) Parameters appEntry AppEntry The application entry containing this access point. Returns IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the access point in the form \"UrlProtocol: Capability\". Not safe for parsing! public override string ToString() Returns string Unapply(AppEntry, bool) Unapply this access point on the current machine. public override void Unapply(AppEntry appEntry, bool machineWide) Parameters appEntry AppEntry The application entry containing this access point. machineWide bool Apply the configuration machine-wide instead of just for the current user. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Operators operator ==(UrlProtocol?, UrlProtocol?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(UrlProtocol? left, UrlProtocol? right) Parameters left UrlProtocol The left object right UrlProtocol The right object Returns bool true if the objects are equal; otherwise, false. operator !=(UrlProtocol?, UrlProtocol?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(UrlProtocol? left, UrlProtocol? right) Parameters left UrlProtocol The left object right UrlProtocol The right object Returns bool true if the objects are not equal; otherwise, false. See Also UrlProtocol"
  },
  "api/ZeroInstall.DesktopIntegration.AccessPoints.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AccessPoints.html",
    "title": "Namespace ZeroInstall.DesktopIntegration.AccessPoints | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.DesktopIntegration.AccessPoints Structures for parsing and in-memory representation of access points applied to a system. Classes AccessPoint An access point represents changes to the desktop environment's UI which the user explicitly requested. AccessPointList Contains a set of AccessPoints to be registered in a desktop environment. AppAlias Makes an application discoverable via the system's search PATH. AutoPlay Makes an application the default AutoPlay handler for a specific event. AutoStart Automatically starts an application when the user logs in. CapabilityRegistration Indicates that all compatible capabilities should be registered. CommandAccessPoint Adds a way to explicitly launch the application to the desktop environment. ContextMenu Integrates an application into a file manager's context menu. DefaultAccessPoint Makes an application the default handler for something. DefaultProgram Makes an application a default program of some kind (e.g. default web-browser, default e-mail client, ...). DesktopIcon Creates an icon for an application on the user's desktop. FileType Makes an application the default handler for a specific file type. IconAccessPoint Creates some form of icon in the desktop environment. MenuEntry Creates an entry for an application in the user's application menu (i.e. Windows start menu, GNOME application menu, etc.). MockAccessPoint A mock access point that does nothing (used for testing). Points to a FileType. QuickLaunch Creates a shortcut for an application in the Quick Launch bar. SendTo Creates a shortcut for an application in the \"Send to\" menu. UrlProtocol Makes an application the default handler for a specific URL protocol."
  },
  "api/ZeroInstall.DesktopIntegration.AppEntry.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AppEntry.html",
    "title": "Class AppEntry | Zero Install .NET API",
    "summary": "Class AppEntry Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Represents an application in the AppList identified by its interface URI. [Equatable] public sealed class AppEntry : XmlUnknown, IEquatable<XmlUnknown>, IMergeable<AppEntry>, ICloneable<AppEntry>, IEquatable<AppEntry> Inheritance object XmlUnknown AppEntry Implements IEquatable<XmlUnknown> IMergeable<AppEntry> ICloneable<AppEntry> IEquatable<AppEntry> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AccessPoints A set of AccessPointss to be registered in the desktop environment. Is null if no desktop integration has been performed yet. public AccessPointList? AccessPoints { get; set; } Property Value AccessPointList AutoUpdate Set to true to automatically download the newest available version of the application as a regular background task. Update checks will still be performed when the application is launched when set to false. public bool AutoUpdate { get; set; } Property Value bool CapabilityLists A set of Capability lists to be registered in the desktop environment. Only compatible architectures are handled. [Browsable(false)] [OrderedEquality] public List<CapabilityList> CapabilityLists { get; } Property Value List<CapabilityList> EffectiveRequirements The Requirements if it is set, otherwise a basic reference to InterfaceUri. [Browsable(false)] [IgnoreEquality] public Requirements EffectiveRequirements { get; } Property Value Requirements Hostname A regular expression a computer's hostname must match for this entry to be applied. Enables machine-specific entry filtering. public string? Hostname { get; set; } Property Value string InterfaceUri The URI or local path of the interface defining the application or the pet-name if Requirements is set. public required FeedUri InterfaceUri { get; set; } Property Value FeedUri Name The name of the application. Usually equal to Name. public required string Name { get; set; } Property Value string Requirements A set of requirements/restrictions imposed by the user on the implementation selection process. [Browsable(false)] public Requirements? Requirements { get; set; } Property Value Requirements Timestamp The time this element was last modified. This is used to determine precedence with sync conflicts. [Browsable(false)] [IgnoreEquality] public DateTime Timestamp { get; set; } Property Value DateTime Remarks This value should be ignored by clone and equality methods. TimestampUnix The time this entry was last modified encoded as Unix time (number of seconds since the epoch). [Browsable(false)] [IgnoreEquality] public long TimestampUnix { get; set; } Property Value long Remarks This value is ignored by clone and equality methods. Methods Clone() Creates a deep copy of this AppEntry instance. public AppEntry Clone() Returns AppEntry The new copy of the AppEntry. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. LookupCapability<T>(string) Retrieves the first Capability that matches a specific type and ID and is compatible with CurrentSystem. public T LookupCapability<T>(string id) where T : Capability Parameters id string The ID to match. Returns T The first matching Capability. Type Parameters T The capability type to match. Exceptions KeyNotFoundException No capability matching id and T was found. ToString() Creates string representation suitable for console output. public override string ToString() Returns string Operators operator ==(AppEntry?, AppEntry?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AppEntry? left, AppEntry? right) Parameters left AppEntry The left object right AppEntry The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AppEntry?, AppEntry?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AppEntry? left, AppEntry? right) Parameters left AppEntry The left object right AppEntry The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.AppList.html": {
    "href": "api/ZeroInstall.DesktopIntegration.AppList.html",
    "title": "Class AppList | Zero Install .NET API",
    "summary": "Class AppList Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Stores a list of applications and the kind of desktop integration the user chose for them. [XmlNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")] [Equatable] public sealed class AppList : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<AppList>, IEquatable<AppList> Inheritance object XmlUnknown AppList Implements IEquatable<XmlUnknown> ICloneable<AppList> IEquatable<AppList> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ConflictDataUtils.CheckForConflicts(AppList, IEnumerable<AccessPoint>, AppEntry) Fields XmlNamespace The XML namespace used for storing application list data. public const string XmlNamespace = \"http://0install.de/schema/desktop-integration/app-list\" Field Value string XsdLocation The URI to retrieve an XSD containing the XML Schema information for this class in serialized form. public const string XsdLocation = \"https://docs.0install.net/specifications/app-list.xsd\" Field Value string XsiSchemaLocation Provides XML Editors with location hints for XSD files. public string XsiSchemaLocation Field Value string Properties Entries A list of AppEntrys. [UnorderedEquality] public List<AppEntry> Entries { get; } Property Value List<AppEntry> this[FeedUri] Gets an AppEntry for a specific interface URI. public AppEntry this[FeedUri interfaceUri] { get; } Parameters interfaceUri FeedUri The InterfaceUri to look for. Property Value AppEntry The first matching AppEntry. Exceptions KeyNotFoundException No entry matching the interface URI was found. Methods Clone() Creates a deep copy of this AppList instance. public AppList Clone() Returns AppList The new copy of the AppList. ContainsEntry(FeedUri) Checks whether an AppEntry for a specific interface URI exists. public bool ContainsEntry(FeedUri interfaceUri) Parameters interfaceUri FeedUri The InterfaceUri to look for. Returns bool true if a matching entry was found; false otherwise. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FindAppAlias(string) Retrieves a specific AppAlias. public (AppAlias alias, AppEntry appEntry)? FindAppAlias(string aliasName) Parameters aliasName string The name of the alias to search for. Returns (AppAlias alias, AppEntry appEntry)? The first AppAlias matching aliasName and the AppEntry containing it; null if none was found. GetDefaultPath(bool) Returns the default file path used to store the main AppList on this system. public static string GetDefaultPath(bool machineWide = false) Parameters machineWide bool Store the AppList machine-wide instead of just for the current user. Returns string GetEntry(FeedUri) Gets an AppEntry for a specific interface URI. Safe for missing elements. public AppEntry? GetEntry(FeedUri interfaceUri) Parameters interfaceUri FeedUri The InterfaceUri to look for. Returns AppEntry The first matching AppEntry; null if no match was found. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsEmpty(bool) Indicates whether there are currently no apps in the AppList. public static bool IsEmpty(bool machineWide = false) Parameters machineWide bool Returns bool LoadSafe(bool) Tries to load the AppList from its default location. Automatically falls back to an empty list on errors. public static AppList LoadSafe(bool machineWide = false) Parameters machineWide bool Load the machine-wide AppList instead of the one for the current user. Returns AppList The loaded AppList. LoadXmlZip(Stream, string?) Loads a list from an XML file embedded in a ZIP archive. public static AppList LoadXmlZip(Stream stream, string? password = null) Parameters stream Stream The ZIP archive to load. password string The password to use for decryption; null for no encryption. Returns AppList The loaded list. Exceptions ZipException A problem occurred while reading the ZIP data or password is wrong. InvalidDataException A problem occurred while deserializing an XML file. ResolveAlias(string) Retrieves the target URI of a specific AppAlias. public FeedUri? ResolveAlias(string aliasName) Parameters aliasName string The name of the alias to search for. Returns FeedUri The target feed of the alias; null if none was found. SaveXmlZip(Stream, string?) Saves the list in an XML file embedded in a ZIP archive. public void SaveXmlZip(Stream stream, string? password = null) Parameters stream Stream The ZIP archive to be written. password string The password to use for encryption; null for no encryption. Search(string?) Returns all AppEntrys that match a specific search query. public IEnumerable<AppEntry> Search(string? query) Parameters query string The search query. Must be contained within Name. Returns IEnumerable<AppEntry> All AppEntrys matching query. Operators operator ==(AppList?, AppList?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AppList? left, AppList? right) Parameters left AppList The left object right AppList The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AppList?, AppList?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AppList? left, AppList? right) Parameters left AppList The left object right AppList The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.DesktopIntegration.CapabilityExtensions.html": {
    "href": "api/ZeroInstall.DesktopIntegration.CapabilityExtensions.html",
    "title": "Class CapabilityExtensions | Zero Install .NET API",
    "summary": "Class CapabilityExtensions Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Contains extension methods for Capabilitys. public static class CapabilityExtensions Inheritance object CapabilityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToAccessPoint(DefaultCapability) Creates a DefaultAccessPoint referencing a specific DefaultCapability. public static AccessPoint ToAccessPoint(this DefaultCapability capability) Parameters capability DefaultCapability The DefaultCapability to create a DefaultAccessPoint for. Returns AccessPoint The newly created DefaultAccessPoint."
  },
  "api/ZeroInstall.DesktopIntegration.CategoryIntegrationManager.html": {
    "href": "api/ZeroInstall.DesktopIntegration.CategoryIntegrationManager.html",
    "title": "Class CategoryIntegrationManager | Zero Install .NET API",
    "summary": "Class CategoryIntegrationManager Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Manages desktop integration via AccessPoints, grouping them into categories. [MustDisposeResource] public class CategoryIntegrationManager : IntegrationManager, IDisposable, ICategoryIntegrationManager, IIntegrationManager Inheritance object ManagerBase IntegrationManagerBase IntegrationManager CategoryIntegrationManager Implements IDisposable ICategoryIntegrationManager IIntegrationManager Inherited Members IntegrationManager.MutexName IntegrationManager.ChangedWindowMessageID IntegrationManager.Config IntegrationManager.GetDir(bool, params string[]) IntegrationManager.AppListPath IntegrationManager.AddAppInternal(FeedTarget) IntegrationManager.AddAppInternal(string, Requirements, Feed) IntegrationManager.AddAppInternal(AppEntry, Converter<FeedUri, Feed>) IntegrationManager.RemoveAppInternal(AppEntry) IntegrationManager.UpdateAppInternal(AppEntry, Feed) IntegrationManager.AddAccessPointsInternal(AppEntry, Feed, IReadOnlyCollection<AccessPoint>) IntegrationManager.RemoveAccessPointsInternal(AppEntry, IEnumerable<AccessPoint>) IntegrationManager.RepairAppInternal(AppEntry, Feed) IntegrationManager.Finish() IntegrationManagerBase.AppList IntegrationManagerBase.AddApp(FeedTarget) IntegrationManagerBase.AddApp(string, Requirements, Feed) IntegrationManagerBase.RemoveApp(AppEntry) IntegrationManagerBase.UpdateApp(AppEntry, Feed) IntegrationManagerBase.UpdateApp(AppEntry, Feed, Requirements) IntegrationManagerBase.AddAccessPoints(AppEntry, Feed, IEnumerable<AccessPoint>) IntegrationManagerBase.RemoveAccessPoints(AppEntry, IEnumerable<AccessPoint>) IntegrationManagerBase.Repair(Converter<FeedUri, Feed>) ManagerBase.Handler ManagerBase.MachineWide ManagerBase.AcquireMutex() ManagerBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks To prevent race-conditions there may only be one desktop integration class instance active at any given time. This class acquires a mutex upon calling its constructor and releases it upon calling Dispose(). Constructors CategoryIntegrationManager(Config, ITaskHandler, bool) Manages desktop integration via AccessPoints, grouping them into categories. public CategoryIntegrationManager(Config config, ITaskHandler handler, bool machineWide = false) Parameters config Config handler ITaskHandler machineWide bool Remarks To prevent race-conditions there may only be one desktop integration class instance active at any given time. This class acquires a mutex upon calling its constructor and releases it upon calling Dispose(). Fields AllCategories A list of all known AccessPoint categories. public static readonly string[] AllCategories Field Value string[] StandardCategories A list of recommended standard AccessPoint categories. public static readonly string[] StandardCategories Field Value string[] Methods AddAccessPointCategories(AppEntry, Feed, params string[]) Applies a category of AccessPoints for an application. public void AddAccessPointCategories(AppEntry appEntry, Feed feed, params string[] categories) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. categories string[] A list of all AccessPoint categories to be added to the already applied ones. Exceptions ConflictException One or more of the categories would cause a conflict with the existing AccessPoints in AppList. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveAccessPointCategories(AppEntry, params string[]) Removes a category of already applied AccessPoints for an application. public void RemoveAccessPointCategories(AppEntry appEntry, params string[] categories) Parameters appEntry AppEntry The application being integrated. categories string[] A list of all AccessPoint categories to be removed from the already applied ones. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.ConflictData.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ConflictData.html",
    "title": "Class ConflictData | Zero Install .NET API",
    "summary": "Class ConflictData Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Stores information about an AccessPoint causing a conflict and the AppEntry containing it. public sealed record ConflictData : IEquatable<ConflictData> Inheritance object ConflictData Implements IEquatable<ConflictData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ConflictData(AccessPoint, AppEntry) Stores information about an AccessPoint causing a conflict and the AppEntry containing it. public ConflictData(AccessPoint AccessPoint, AppEntry AppEntry) Parameters AccessPoint AccessPoint The AccessPoint causing the conflict. AppEntry AppEntry The application containing the AccessPoint. Properties AccessPoint The AccessPoint causing the conflict. public AccessPoint AccessPoint { get; init; } Property Value AccessPoint AppEntry The application containing the AccessPoint. public AppEntry AppEntry { get; init; } Property Value AppEntry"
  },
  "api/ZeroInstall.DesktopIntegration.ConflictDataUtils.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ConflictDataUtils.html",
    "title": "Class ConflictDataUtils | Zero Install .NET API",
    "summary": "Class ConflictDataUtils Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Helper methods for creating ConflictData lists. public static class ConflictDataUtils Inheritance object ConflictDataUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckForConflicts(AppList, IEnumerable<AccessPoint>, AppEntry) Checks new AccessPoint candidates for conflicts with existing ones. public static void CheckForConflicts(this AppList appList, IEnumerable<AccessPoint> accessPoints, AppEntry appEntry) Parameters appList AppList The AppList containing the existing AccessPoints. accessPoints IEnumerable<AccessPoint> The set of AccessPoints candidates to check. appEntry AppEntry The AppEntry the accessPoints are intended for. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. ConflictException One or more of the accessPoints would cause a conflict with the existing AccessPoints in AppList. GetConflictData(IEnumerable<AccessPoint>, AppEntry) Returns all ConflictDatas for a set of new AccessPoint candidates. public static IDictionary<string, ConflictData> GetConflictData(this IEnumerable<AccessPoint> accessPoints, AppEntry appEntry) Parameters accessPoints IEnumerable<AccessPoint> The set of AccessPoints candidates to build the list for. appEntry AppEntry The AppEntry the accessPoints are intended for. Returns IDictionary<string, ConflictData> A dictionary of conflict IDs mapping to the according ConflictData. Exceptions ConflictException There are inner conflicts within accessPoints. GetConflictData(IEnumerable<AppEntry>) Returns all ConflictDatas for a set of existing AppEntrys. public static IDictionary<string, ConflictData> GetConflictData(this IEnumerable<AppEntry> appEntries) Parameters appEntries IEnumerable<AppEntry> The AppEntrys to build the list for. Returns IDictionary<string, ConflictData> A dictionary of conflict IDs mapping to the according ConflictData. Exceptions ConflictException There are preexisting conflicts within appEntries."
  },
  "api/ZeroInstall.DesktopIntegration.ConflictException.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ConflictException.html",
    "title": "Class ConflictException | Zero Install .NET API",
    "summary": "Class ConflictException Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Indicates a desktop integration operation could not be completed due to conflicting AccessPoints. public sealed class ConflictException : InvalidOperationException, ISerializable Inheritance object Exception SystemException InvalidOperationException ConflictException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ConflictException() Initializes a new instance of the InvalidOperationException class. public ConflictException() ConflictException(string) Initializes a new instance of the InvalidOperationException class with a specified error message. public ConflictException(string message) Parameters message string The message that describes the error. ConflictException(string, Exception) Initializes a new instance of the InvalidOperationException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ConflictException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Properties Entries The entries that are in conflict with each other. public IEnumerable<ConflictData>? Entries { get; } Property Value IEnumerable<ConflictData> Methods ExistingConflict(params ConflictData[]) Creates an exception indicating an existing desktop integration conflict. public static ConflictException ExistingConflict(params ConflictData[] entries) Parameters entries ConflictData[] The entries that are in conflict with each other. Returns ConflictException InnerConflict(params ConflictData[]) Creates an exception indicating an inner desktop integration conflict. public static ConflictException InnerConflict(params ConflictData[] entries) Parameters entries ConflictData[] The entries that are in conflict with each other. Returns ConflictException NewConflict(ConflictData, ConflictData) Creates an exception indicating a new desktop integration conflict. public static ConflictException NewConflict(ConflictData existingEntry, ConflictData newEntry) Parameters existingEntry ConflictData The existing entry that is preventing newEntry from being applied. newEntry ConflictData The new entry that is in conflict with existingEntry. Returns ConflictException"
  },
  "api/ZeroInstall.DesktopIntegration.ICategoryIntegrationManager.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ICategoryIntegrationManager.html",
    "title": "Interface ICategoryIntegrationManager | Zero Install .NET API",
    "summary": "Interface ICategoryIntegrationManager Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Manages desktop integration via AccessPoints, grouping them into categories. public interface ICategoryIntegrationManager : IIntegrationManager Inherited Members IIntegrationManager.AppList IIntegrationManager.MachineWide IIntegrationManager.AddApp(FeedTarget) IIntegrationManager.AddApp(string, Requirements, Feed) IIntegrationManager.RemoveApp(AppEntry) IIntegrationManager.UpdateApp(AppEntry, Feed) IIntegrationManager.UpdateApp(AppEntry, Feed, Requirements) IIntegrationManager.AddAccessPoints(AppEntry, Feed, IEnumerable<AccessPoint>) IIntegrationManager.RemoveAccessPoints(AppEntry, IEnumerable<AccessPoint>) IIntegrationManager.Repair(Converter<FeedUri, Feed>) Methods AddAccessPointCategories(AppEntry, Feed, params string[]) Applies a category of AccessPoints for an application. void AddAccessPointCategories(AppEntry appEntry, Feed feed, params string[] categories) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. categories string[] A list of all AccessPoint categories to be added to the already applied ones. Exceptions ConflictException One or more of the categories would cause a conflict with the existing AccessPoints in AppList. OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveAccessPointCategories(AppEntry, params string[]) Removes a category of already applied AccessPoints for an application. void RemoveAccessPointCategories(AppEntry appEntry, params string[] categories) Parameters appEntry AppEntry The application being integrated. categories string[] A list of all AccessPoint categories to be removed from the already applied ones. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.IIntegrationManager.html": {
    "href": "api/ZeroInstall.DesktopIntegration.IIntegrationManager.html",
    "title": "Interface IIntegrationManager | Zero Install .NET API",
    "summary": "Interface IIntegrationManager Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Manages an AppList and desktop integration via AccessPoints. public interface IIntegrationManager Properties AppList Stores a list of applications and their desktop integrations. Only use for read-access externally! Use this class' methods for any modifications. AppList AppList { get; } Property Value AppList MachineWide Apply operations machine-wide instead of just for the current user. bool MachineWide { get; } Property Value bool Methods AddAccessPoints(AppEntry, Feed, IEnumerable<AccessPoint>) Applies AccessPoints for an application. void AddAccessPoints(AppEntry appEntry, Feed feed, IEnumerable<AccessPoint> accessPoints) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. accessPoints IEnumerable<AccessPoint> The access points to apply. Exceptions OperationCanceledException The user canceled the task. ConflictException One or more of the accessPoints would cause a conflict with the existing AccessPoints in AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddApp(string, Requirements, Feed) Creates a new named AppEntry and adds it to the AppList. AppEntry AddApp(string petName, Requirements requirements, Feed feed) Parameters petName string The user-defined pet-name of the application. requirements Requirements The requirements describing the application to add. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException An application with the same petName is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddApp(FeedTarget) Creates a new unnamed AppEntry and adds it to the AppList. AppEntry AddApp(FeedTarget target) Parameters target FeedTarget The application to add. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException The application is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveAccessPoints(AppEntry, IEnumerable<AccessPoint>) Removes already applied AccessPoints for an application. void RemoveAccessPoints(AppEntry appEntry, IEnumerable<AccessPoint> accessPoints) Parameters appEntry AppEntry The application being integrated. accessPoints IEnumerable<AccessPoint> The access points to unapply. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveApp(AppEntry) Removes an AppEntry from the AppList while unapplying any remaining AccessPoints. void RemoveApp(AppEntry appEntry) Parameters appEntry AppEntry The application to remove. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Repair(Converter<FeedUri, Feed>) Reapplies all AccessPoints for all AppEntrys. void Repair(Converter<FeedUri, Feed> feedRetriever) Parameters feedRetriever Converter<FeedUri, Feed> Callback method used to retrieve additional Feeds on demand. Exceptions OperationCanceledException The user canceled the task. ConflictException The AppList has inner conflicts. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. UpdateApp(AppEntry, Feed) Updates an AppEntry with new metadata and capabilities from a Feed. This may unapply and remove some existing AccessPoints. void UpdateApp(AppEntry appEntry, Feed feed) Parameters appEntry AppEntry The application entry to update. feed Feed The feed providing additional metadata, capabilities, etc. for the application. UpdateApp(AppEntry, Feed, Requirements) Updates a named AppEntry with new Requirements. void UpdateApp(AppEntry appEntry, Feed feed, Requirements requirements) Parameters appEntry AppEntry The application entry to update. feed Feed The feed providing additional metadata, capabilities, etc. for the application. requirements Requirements The new requirements to apply to the app."
  },
  "api/ZeroInstall.DesktopIntegration.IconStores.html": {
    "href": "api/ZeroInstall.DesktopIntegration.IconStores.html",
    "title": "Class IconStores | Zero Install .NET API",
    "summary": "Class IconStores Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Provides IIconStore instances. public static class IconStores Inheritance object IconStores Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Cache(Config, ITaskHandler) Provides icon files for display in table- or tile-like GUIs. Files may be discarded later. public static IIconStore Cache(Config config, ITaskHandler handler) Parameters config Config handler ITaskHandler Returns IIconStore Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. DesktopIntegration(Config, ITaskHandler, bool) Provides icon files for use with desktop integration. Files will remain persisted. public static IIconStore DesktopIntegration(Config config, ITaskHandler handler, bool machineWide) Parameters config Config handler ITaskHandler machineWide bool Returns IIconStore Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.IntegrationManager.html": {
    "href": "api/ZeroInstall.DesktopIntegration.IntegrationManager.html",
    "title": "Class IntegrationManager | Zero Install .NET API",
    "summary": "Class IntegrationManager Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Manages an AppList and desktop integration via AccessPoints. [MustDisposeResource] public class IntegrationManager : IntegrationManagerBase, IDisposable, IIntegrationManager Inheritance object ManagerBase IntegrationManagerBase IntegrationManager Implements IDisposable IIntegrationManager Derived CategoryIntegrationManager SyncIntegrationManager Inherited Members IntegrationManagerBase.AppList IntegrationManagerBase.AddApp(FeedTarget) IntegrationManagerBase.AddApp(string, Requirements, Feed) IntegrationManagerBase.RemoveApp(AppEntry) IntegrationManagerBase.UpdateApp(AppEntry, Feed) IntegrationManagerBase.UpdateApp(AppEntry, Feed, Requirements) IntegrationManagerBase.AddAccessPoints(AppEntry, Feed, IEnumerable<AccessPoint>) IntegrationManagerBase.RemoveAccessPoints(AppEntry, IEnumerable<AccessPoint>) IntegrationManagerBase.Repair(Converter<FeedUri, Feed>) ManagerBase.Handler ManagerBase.MachineWide ManagerBase.AcquireMutex() ManagerBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks To prevent race-conditions there may only be one desktop integration class instance active at any given time. This class acquires a mutex upon calling its constructor and releases it upon calling Dispose(). Constructors IntegrationManager(Config, ITaskHandler, bool) Creates a new integration manager using the default AppList (creating a new one if missing). Performs Mutex-based locking! public IntegrationManager(Config config, ITaskHandler handler, bool machineWide = false) Parameters config Config User settings controlling network behaviour. handler ITaskHandler A callback object used when the user is to be informed about the progress of long-running operations such as downloads. machineWide bool Apply operations machine-wide instead of just for the current user. Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. Fields AppListPath The storage location of the AppList file. protected readonly string AppListPath Field Value string ChangedWindowMessageID The window message ID (for use with BroadcastMessage(int)) that signals integration changes to interested observers. public static readonly int ChangedWindowMessageID Field Value int Config User settings controlling network behaviour. protected readonly Config Config Field Value Config Properties MutexName The name of the cross-process mutex used to signal that a desktop integration process class is currently active. protected override string MutexName { get; } Property Value string Methods AddAccessPointsInternal(AppEntry, Feed, IReadOnlyCollection<AccessPoint>) Applies AccessPoints for an application. protected override void AddAccessPointsInternal(AppEntry appEntry, Feed feed, IReadOnlyCollection<AccessPoint> accessPoints) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. accessPoints IReadOnlyCollection<AccessPoint> The access points to apply. Exceptions ArgumentException Entries from appEntry is the same reference as accessPoints. OperationCanceledException The user canceled the task. KeyNotFoundException An AccessPoint reference to a Capability is invalid. ConflictException One or more of the accessPoints would cause a conflict with the existing AccessPoints in AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddAppInternal(string, Requirements, Feed) Creates a new named AppEntry and adds it to the AppList. protected override AppEntry AddAppInternal(string petName, Requirements requirements, Feed feed) Parameters petName string The user-defined pet-name of the application. requirements Requirements The requirements describing the application to add. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException An application with the same petName is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddAppInternal(AppEntry, Converter<FeedUri, Feed>) Creates a new AppEntry based on an existing prototype (applying any AccessPoints) and adds it to the AppList. protected override void AddAppInternal(AppEntry prototype, Converter<FeedUri, Feed> feedRetriever) Parameters prototype AppEntry An existing AppEntry to use as a prototype. feedRetriever Converter<FeedUri, Feed> Callback method used to retrieve additional Feeds on demand. AddAppInternal(FeedTarget) Creates a new unnamed AppEntry and adds it to the AppList. protected override AppEntry AddAppInternal(FeedTarget target) Parameters target FeedTarget The application to add. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException The application is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Finish() To be called after integration operations have been completed to inform the desktop environment and save the AppList. protected override void Finish() GetDir(bool, params string[]) Returns a path for a directory that can be used for desktop integration. public static string GetDir(bool machineWide, params string[] resource) Parameters machineWide bool true if the directory should be machine-wide and machine-specific instead of roaming with the user profile. resource string[] The directory name of the resource to be stored. Returns string A fully qualified directory path. The directory is guaranteed to already exist. Remarks If a new directory is created with machineWide set to true on Windows, ACLs are set to deny write access for non-Administrator users. Exceptions IOException A problem occurred while creating a directory. UnauthorizedAccessException Creating a directory is not permitted. RemoveAccessPointsInternal(AppEntry, IEnumerable<AccessPoint>) Removes already applied AccessPoints for an application. protected override void RemoveAccessPointsInternal(AppEntry appEntry, IEnumerable<AccessPoint> accessPoints) Parameters appEntry AppEntry The AppEntry containing the accessPoints. accessPoints IEnumerable<AccessPoint> The access points to unapply. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveAppInternal(AppEntry) Removes an AppEntry from the AppList while unapplying any remaining AccessPoints. protected override void RemoveAppInternal(AppEntry appEntry) Parameters appEntry AppEntry The application to remove. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RepairAppInternal(AppEntry, Feed) Reapplies all AccessPoints for a specific AppEntry. protected override void RepairAppInternal(AppEntry appEntry, Feed feed) Parameters appEntry AppEntry The application entry to repair. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Exceptions OperationCanceledException The user canceled the task. ConflictException appEntry conflicts with the rest of the AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. UpdateAppInternal(AppEntry, Feed) Updates an AppEntry with new metadata and capabilities from a Feed. This may unapply and remove some existing AccessPoints. protected override void UpdateAppInternal(AppEntry appEntry, Feed feed) Parameters appEntry AppEntry The application entry to update. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid."
  },
  "api/ZeroInstall.DesktopIntegration.IntegrationManagerBase.html": {
    "href": "api/ZeroInstall.DesktopIntegration.IntegrationManagerBase.html",
    "title": "Class IntegrationManagerBase | Zero Install .NET API",
    "summary": "Class IntegrationManagerBase Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Base class for IIntegrationManager implementations using template methods. [MustDisposeResource] public abstract class IntegrationManagerBase : ManagerBase, IDisposable, IIntegrationManager Inheritance object ManagerBase IntegrationManagerBase Implements IDisposable IIntegrationManager Derived IntegrationManager Inherited Members ManagerBase.Handler ManagerBase.MachineWide ManagerBase.MutexName ManagerBase.AcquireMutex() ManagerBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntegrationManagerBase(ITaskHandler, bool) Base class for IIntegrationManager implementations using template methods. protected IntegrationManagerBase(ITaskHandler handler, bool machineWide = false) Parameters handler ITaskHandler A callback object used when the user is to be informed about the progress of long-running operations such as downloads. machineWide bool Apply operations machine-wide instead of just for the current user. Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. Properties AppList Stores a list of applications and their desktop integrations. Only use for read-access externally! Use this class' methods for any modifications. public AppList AppList { get; protected init; } Property Value AppList Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. Methods AddAccessPoints(AppEntry, Feed, IEnumerable<AccessPoint>) Applies AccessPoints for an application. public void AddAccessPoints(AppEntry appEntry, Feed feed, IEnumerable<AccessPoint> accessPoints) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. accessPoints IEnumerable<AccessPoint> The access points to apply. Exceptions OperationCanceledException The user canceled the task. ConflictException One or more of the accessPoints would cause a conflict with the existing AccessPoints in AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddAccessPointsInternal(AppEntry, Feed, IReadOnlyCollection<AccessPoint>) Applies AccessPoints for an application. protected abstract void AddAccessPointsInternal(AppEntry appEntry, Feed feed, IReadOnlyCollection<AccessPoint> accessPoints) Parameters appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. accessPoints IReadOnlyCollection<AccessPoint> The access points to apply. Exceptions ArgumentException Entries from appEntry is the same reference as accessPoints. OperationCanceledException The user canceled the task. KeyNotFoundException An AccessPoint reference to a Capability is invalid. ConflictException One or more of the accessPoints would cause a conflict with the existing AccessPoints in AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddApp(string, Requirements, Feed) Creates a new named AppEntry and adds it to the AppList. public AppEntry AddApp(string petName, Requirements requirements, Feed feed) Parameters petName string The user-defined pet-name of the application. requirements Requirements The requirements describing the application to add. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException An application with the same petName is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddApp(FeedTarget) Creates a new unnamed AppEntry and adds it to the AppList. public AppEntry AddApp(FeedTarget target) Parameters target FeedTarget The application to add. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException The application is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddAppInternal(string, Requirements, Feed) Creates a new named AppEntry and adds it to the AppList. protected abstract AppEntry AddAppInternal(string petName, Requirements requirements, Feed feed) Parameters petName string The user-defined pet-name of the application. requirements Requirements The requirements describing the application to add. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException An application with the same petName is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. AddAppInternal(AppEntry, Converter<FeedUri, Feed>) Creates a new AppEntry based on an existing prototype (applying any AccessPoints) and adds it to the AppList. protected abstract void AddAppInternal(AppEntry prototype, Converter<FeedUri, Feed> feedRetriever) Parameters prototype AppEntry An existing AppEntry to use as a prototype. feedRetriever Converter<FeedUri, Feed> Callback method used to retrieve additional Feeds on demand. Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. AddAppInternal(FeedTarget) Creates a new unnamed AppEntry and adds it to the AppList. protected abstract AppEntry AddAppInternal(FeedTarget target) Parameters target FeedTarget The application to add. Returns AppEntry The newly created application entry (already added to AppList). Exceptions InvalidOperationException The application is already in the list. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Finish() To be called after integration operations have been completed to inform the desktop environment and save the AppList. protected abstract void Finish() Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. RemoveAccessPoints(AppEntry, IEnumerable<AccessPoint>) Removes already applied AccessPoints for an application. public void RemoveAccessPoints(AppEntry appEntry, IEnumerable<AccessPoint> accessPoints) Parameters appEntry AppEntry The application being integrated. accessPoints IEnumerable<AccessPoint> The access points to unapply. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveAccessPointsInternal(AppEntry, IEnumerable<AccessPoint>) Removes already applied AccessPoints for an application. protected abstract void RemoveAccessPointsInternal(AppEntry appEntry, IEnumerable<AccessPoint> accessPoints) Parameters appEntry AppEntry The AppEntry containing the accessPoints. accessPoints IEnumerable<AccessPoint> The access points to unapply. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveApp(AppEntry) Removes an AppEntry from the AppList while unapplying any remaining AccessPoints. public void RemoveApp(AppEntry appEntry) Parameters appEntry AppEntry The application to remove. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RemoveAppInternal(AppEntry) Removes an AppEntry from the AppList while unapplying any remaining AccessPoints. protected abstract void RemoveAppInternal(AppEntry appEntry) Parameters appEntry AppEntry The application to remove. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid. IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Repair(Converter<FeedUri, Feed>) Reapplies all AccessPoints for all AppEntrys. public void Repair(Converter<FeedUri, Feed> feedRetriever) Parameters feedRetriever Converter<FeedUri, Feed> Callback method used to retrieve additional Feeds on demand. Exceptions OperationCanceledException The user canceled the task. ConflictException The AppList has inner conflicts. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. RepairAppInternal(AppEntry, Feed) Reapplies all AccessPoints for a specific AppEntry. protected abstract void RepairAppInternal(AppEntry appEntry, Feed feed) Parameters appEntry AppEntry The application entry to repair. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Exceptions OperationCanceledException The user canceled the task. ConflictException appEntry conflicts with the rest of the AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. UpdateApp(AppEntry, Feed) Updates an AppEntry with new metadata and capabilities from a Feed. This may unapply and remove some existing AccessPoints. public void UpdateApp(AppEntry appEntry, Feed feed) Parameters appEntry AppEntry The application entry to update. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. UpdateApp(AppEntry, Feed, Requirements) Updates a named AppEntry with new Requirements. public void UpdateApp(AppEntry appEntry, Feed feed, Requirements requirements) Parameters appEntry AppEntry The application entry to update. feed Feed The feed providing additional metadata, capabilities, etc. for the application. requirements Requirements The new requirements to apply to the app. Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. UpdateAppInternal(AppEntry, Feed) Updates an AppEntry with new metadata and capabilities from a Feed. This may unapply and remove some existing AccessPoints. protected abstract void UpdateAppInternal(AppEntry appEntry, Feed feed) Parameters appEntry AppEntry The application entry to update. feed Feed The feed providing additional metadata, capabilities, etc. for the application. Exceptions KeyNotFoundException An AccessPoint reference to a Capability is invalid."
  },
  "api/ZeroInstall.DesktopIntegration.Suggest.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Suggest.html",
    "title": "Class Suggest | Zero Install .NET API",
    "summary": "Class Suggest Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Suggests suitable default AccessPoints for specific Feeds. public static class Suggest Inheritance object Suggest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Aliases(Feed) Returns a list of suitable default AppAliass. public static IEnumerable<AppAlias> Aliases(Feed feed) Parameters feed Feed Returns IEnumerable<AppAlias> AutoStart(Feed) Returns a list of suitable default AutoStart(Feed)s. public static IEnumerable<AutoStart> AutoStart(Feed feed) Parameters feed Feed Returns IEnumerable<AutoStart> DesktopIcons(Feed) Returns a list of suitable default DesktopIcons. public static IEnumerable<DesktopIcon> DesktopIcons(Feed feed) Parameters feed Feed Returns IEnumerable<DesktopIcon> MenuEntries(Feed) Returns a list of suitable default MenuEntrys. public static IEnumerable<MenuEntry> MenuEntries(Feed feed) Parameters feed Feed Returns IEnumerable<MenuEntry> SendTo(Feed) Returns a list of suitable default SendTo(Feed)s. public static IEnumerable<SendTo> SendTo(Feed feed) Parameters feed Feed Returns IEnumerable<SendTo>"
  },
  "api/ZeroInstall.DesktopIntegration.SyncIntegrationManager.html": {
    "href": "api/ZeroInstall.DesktopIntegration.SyncIntegrationManager.html",
    "title": "Class SyncIntegrationManager | Zero Install .NET API",
    "summary": "Class SyncIntegrationManager Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Synchronizes the AppList with other computers. [MustDisposeResource] public class SyncIntegrationManager : IntegrationManager, IDisposable, IIntegrationManager Inheritance object ManagerBase IntegrationManagerBase IntegrationManager SyncIntegrationManager Implements IDisposable IIntegrationManager Inherited Members IntegrationManager.MutexName IntegrationManager.ChangedWindowMessageID IntegrationManager.Config IntegrationManager.GetDir(bool, params string[]) IntegrationManager.AppListPath IntegrationManager.AddAppInternal(FeedTarget) IntegrationManager.AddAppInternal(string, Requirements, Feed) IntegrationManager.AddAppInternal(AppEntry, Converter<FeedUri, Feed>) IntegrationManager.RemoveAppInternal(AppEntry) IntegrationManager.UpdateAppInternal(AppEntry, Feed) IntegrationManager.AddAccessPointsInternal(AppEntry, Feed, IReadOnlyCollection<AccessPoint>) IntegrationManager.RemoveAccessPointsInternal(AppEntry, IEnumerable<AccessPoint>) IntegrationManager.RepairAppInternal(AppEntry, Feed) IntegrationManager.Finish() IntegrationManagerBase.AppList IntegrationManagerBase.AddApp(FeedTarget) IntegrationManagerBase.AddApp(string, Requirements, Feed) IntegrationManagerBase.RemoveApp(AppEntry) IntegrationManagerBase.UpdateApp(AppEntry, Feed) IntegrationManagerBase.UpdateApp(AppEntry, Feed, Requirements) IntegrationManagerBase.AddAccessPoints(AppEntry, Feed, IEnumerable<AccessPoint>) IntegrationManagerBase.RemoveAccessPoints(AppEntry, IEnumerable<AccessPoint>) IntegrationManagerBase.Repair(Converter<FeedUri, Feed>) ManagerBase.Handler ManagerBase.MachineWide ManagerBase.AcquireMutex() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks To prevent race-conditions there may only be one desktop integration class instance active at any given time. This class acquires a mutex upon calling its constructor and releases it upon calling Dispose(). Constructors SyncIntegrationManager(Config, Converter<FeedUri, Feed>, ITaskHandler, bool) Creates a new sync manager. Performs Mutex-based locking! public SyncIntegrationManager(Config config, Converter<FeedUri, Feed> feedRetriever, ITaskHandler handler, bool machineWide = false) Parameters config Config Configuration for communicating with a sync server. feedRetriever Converter<FeedUri, Feed> Callback method used to retrieve additional Feeds on demand. handler ITaskHandler A callback object used when the user is to be informed about the progress of long-running operations such as downloads. machineWide bool Apply operations machine-wide instead of just for the current user. Exceptions IOException A problem occurred while accessing the AppList file. UnauthorizedAccessException Read or write access to the AppList file is not permitted or another desktop integration class is currently active. InvalidDataException A problem occurred while deserializing an XML file. Fields AppListLastSyncSuffix The suffix added to the AppList path to store a copy of the state at the last sync point. public const string AppListLastSyncSuffix = \".last-sync\" Field Value string Methods Dispose() Releases the mutex. public override void Dispose() Sync(SyncResetMode) Synchronize the AppList with the sync server and (un)apply AccessPoints accordingly. public void Sync(SyncResetMode resetMode = SyncResetMode.None) Parameters resetMode SyncResetMode Controls how synchronization data is reset. Exceptions OperationCanceledException The user canceled the task. InvalidDataException A problem occurred while deserializing an XML file or the specified crypto key was wrong. KeyNotFoundException An AccessPoint reference to a Capability is invalid. ConflictException One or more new AccessPoint would cause a conflict with the existing AccessPoints in AppList. WebException A problem occurred while communicating with the sync server or while downloading additional data (such as icons). IOException A problem occurs while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.SyncRaceException.html": {
    "href": "api/ZeroInstall.DesktopIntegration.SyncRaceException.html",
    "title": "Class SyncRaceException | Zero Install .NET API",
    "summary": "Class SyncRaceException Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Multiple computers are trying to sync with the same account at the same time. public class SyncRaceException : WebException, ISerializable Inheritance object Exception SystemException InvalidOperationException WebException SyncRaceException Implements ISerializable Inherited Members WebException.Response WebException.Status Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods WebExceptionExtensions.ShouldTryMirror(WebException, Uri) Constructors SyncRaceException() public SyncRaceException()"
  },
  "api/ZeroInstall.DesktopIntegration.SyncResetMode.html": {
    "href": "api/ZeroInstall.DesktopIntegration.SyncResetMode.html",
    "title": "Enum SyncResetMode | Zero Install .NET API",
    "summary": "Enum SyncResetMode Namespace ZeroInstall.DesktopIntegration Assembly ZeroInstall.DesktopIntegration.dll Controls how synchronization data is reset by Sync(SyncResetMode) public enum SyncResetMode Fields Client = 1 Replace all data on the client with data from the server. None = 0 Merge data from client and server normally. Server = 2 Replace all data on the server with data from the client."
  },
  "api/ZeroInstall.DesktopIntegration.Unix.AppAlias.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.AppAlias.html",
    "title": "Class AppAlias | Zero Install .NET API",
    "summary": "Class AppAlias Namespace ZeroInstall.DesktopIntegration.Unix Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying AppAlias on Unix systems. public static class AppAlias Inheritance object AppAlias Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(FeedTarget, string?, string, IIconStore, bool) Creates an application alias in the current system. public static void Create(FeedTarget target, string? command, string aliasName, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being integrated. command string The command within target the alias shall point to; can be null. aliasName string The name of the alias to be created. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Create the alias machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted. Remove(string, bool) Removes an application alias from the current system. public static void Remove(string aliasName, bool machineWide) Parameters aliasName string The name of the alias to be removed. machineWide bool The alias was created machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem. UnauthorizedAccessException Write access to the filesystem is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Unix.ContextMenu.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.ContextMenu.html",
    "title": "Class ContextMenu | Zero Install .NET API",
    "summary": "Class ContextMenu Namespace ZeroInstall.DesktopIntegration.Unix Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying ContextMenu and ContextMenu on GNOME systems. public static class ContextMenu Inheritance object ContextMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Apply(FeedTarget, ContextMenu, IIconStore, bool) Adds a context menu entry to the current system. public static void Apply(FeedTarget target, ContextMenu contextMenu, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being integrated. contextMenu ContextMenu The context menu entry to add. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Add the context menu entry machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted. Remove(ContextMenu, bool) Removes a context menu entry from the current system. public static void Remove(ContextMenu contextMenu, bool machineWide) Parameters contextMenu ContextMenu The context menu entry to remove. machineWide bool Remove the context menu entry machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem. UnauthorizedAccessException Write access to the filesystem is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Unix.DefaultProgram.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.DefaultProgram.html",
    "title": "Class DefaultProgram | Zero Install .NET API",
    "summary": "Class DefaultProgram Namespace ZeroInstall.DesktopIntegration.Unix Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying DefaultProgram and DefaultProgram on GNOME or KDE systems. public static class DefaultProgram Inheritance object DefaultProgram Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Register(FeedTarget, DefaultProgram, IIconStore, bool, bool) Registers an application as a candidate for a default program for some service in the current system. public static void Register(FeedTarget target, DefaultProgram defaultProgram, IIconStore iconStore, bool machineWide, bool accessPoint = false) Parameters target FeedTarget The application being integrated. defaultProgram DefaultProgram The default program information to be registered. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the registration machine-wide instead of just for the current user. accessPoint bool Indicates that the program should be set as the current default for the service it provides. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted. Unregister(DefaultProgram, bool, bool) Unregisters an application as a candidate for a default program in the current system. This can only be applied machine-wide, not per user. public static void Unregister(DefaultProgram defaultProgram, bool machineWide, bool accessPoint = false) Parameters defaultProgram DefaultProgram The default program information to be removed. machineWide bool Apply the registration machine-wide instead of just for the current user. accessPoint bool Indicates that the program was set as the current default for the service it provides. Exceptions IOException A problem occurred while writing to the filesystem. UnauthorizedAccessException Write access to the filesystem is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Unix.FileType.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.FileType.html",
    "title": "Class FileType | Zero Install .NET API",
    "summary": "Class FileType Namespace ZeroInstall.DesktopIntegration.Unix Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying FileType and FileType on FreeDesktop.org systems. public static class FileType Inheritance object FileType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Register(FeedTarget, FileType, IIconStore, bool, bool) Registers a file type in the current system. public static void Register(FeedTarget target, FileType fileType, IIconStore iconStore, bool machineWide, bool accessPoint = false) Parameters target FeedTarget The application being integrated. fileType FileType The file type to register. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Register the file type machine-wide instead of just for the current user. accessPoint bool Indicates that the file associations shall become default handlers for their respective types. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted. Unregister(FileType, bool, bool) Unregisters a file type in the current system. public static void Unregister(FileType fileType, bool machineWide, bool accessPoint = false) Parameters fileType FileType The file type to remove. machineWide bool Unregister the file type machine-wide instead of just for the current user. accessPoint bool Indicates that the file associations were default handlers for their respective types. Exceptions IOException A problem occurred while writing to the filesystem. UnauthorizedAccessException Write access to the filesystem is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Unix.FreeDesktop.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.FreeDesktop.html",
    "title": "Class FreeDesktop | Zero Install .NET API",
    "summary": "Class FreeDesktop Namespace ZeroInstall.DesktopIntegration.Unix Assembly ZeroInstall.DesktopIntegration.dll Utility class for creating and modifying FreeDesktop.org Desktop Entries. public static class FreeDesktop Inheritance object FreeDesktop Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(DesktopIcon, FeedTarget, IIconStore, bool) public static void Create(DesktopIcon desktopIcon, FeedTarget target, IIconStore iconStore, bool machineWide) Parameters desktopIcon DesktopIcon target FeedTarget iconStore IIconStore machineWide bool Create(MenuEntry, FeedTarget, IIconStore, bool) public static void Create(MenuEntry menuEntry, FeedTarget target, IIconStore iconStore, bool machineWide) Parameters menuEntry MenuEntry target FeedTarget iconStore IIconStore machineWide bool Remove(DesktopIcon, bool) public static void Remove(DesktopIcon desktopIcon, bool machineWide) Parameters desktopIcon DesktopIcon machineWide bool Remove(MenuEntry, bool) public static void Remove(MenuEntry menuEntry, bool machineWide) Parameters menuEntry MenuEntry machineWide bool"
  },
  "api/ZeroInstall.DesktopIntegration.Unix.UrlProtocol.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.UrlProtocol.html",
    "title": "Class UrlProtocol | Zero Install .NET API",
    "summary": "Class UrlProtocol Namespace ZeroInstall.DesktopIntegration.Unix Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying UrlProtocol and UrlProtocol on GNOME systems. public static class UrlProtocol Inheritance object UrlProtocol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Register(FeedTarget, UrlProtocol, IIconStore, bool, bool) Registers a URL protocol in the current system. public static void Register(FeedTarget target, UrlProtocol urlProtocol, IIconStore iconStore, bool machineWide, bool accessPoint = false) Parameters target FeedTarget The application being integrated. urlProtocol UrlProtocol The URL protocol to register. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Register the URL protocol machine-wide instead of just for the current user. accessPoint bool Indicates that the handler shall become the default handler for the protocol. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted. Unregister(UrlProtocol, bool, bool) Unregisters a URL protocol in the current system. public static void Unregister(UrlProtocol urlProtocol, bool machineWide, bool accessPoint = false) Parameters urlProtocol UrlProtocol The URL protocol to remove. machineWide bool Unregister the URL protocol machine-wide instead of just for the current user. accessPoint bool Indicates that the handler was the default handler for the protocol. Exceptions IOException A problem occurred while writing to the filesystem. UnauthorizedAccessException Write access to the filesystem is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Unix.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Unix.html",
    "title": "Namespace ZeroInstall.DesktopIntegration.Unix | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.DesktopIntegration.Unix Desktop integration code for Unix-like systems (e.g. Linux). Classes AppAlias Contains control logic for applying AppAlias on Unix systems. ContextMenu Contains control logic for applying ContextMenu and ContextMenu on GNOME systems. DefaultProgram Contains control logic for applying DefaultProgram and DefaultProgram on GNOME or KDE systems. FileType Contains control logic for applying FileType and FileType on FreeDesktop.org systems. FreeDesktop Utility class for creating and modifying FreeDesktop.org Desktop Entries. UrlProtocol Contains control logic for applying UrlProtocol and UrlProtocol on GNOME systems."
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.AutoPlayModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.AutoPlayModel.html",
    "title": "Class AutoPlayModel | Zero Install .NET API",
    "summary": "Class AutoPlayModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps a AutoPlay for data binding. public class AutoPlayModel : IconCapabilityModel Inheritance object CapabilityModel IconCapabilityModel AutoPlayModel Inherited Members IconCapabilityModel.Description CapabilityModel.Capability CapabilityModel.Use CapabilityModel.Changed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutoPlayModel(AutoPlay, bool) public AutoPlayModel(AutoPlay capability, bool used) Parameters capability AutoPlay used bool Properties Events All Events concatenated with \", \". public string Events { get; } Property Value string"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.CapabilityModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.CapabilityModel.html",
    "title": "Class CapabilityModel | Zero Install .NET API",
    "summary": "Class CapabilityModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps a DefaultCapability for data binding. public abstract class CapabilityModel Inheritance object CapabilityModel Derived IconCapabilityModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CapabilityModel(DefaultCapability, bool) Creates a new instance. protected CapabilityModel(DefaultCapability capability, bool used) Parameters capability DefaultCapability That shall be wrapped. used bool Indicates whether the Capability was already used. Properties Capability The wrapped Capability. [Browsable(false)] public DefaultCapability Capability { get; } Property Value DefaultCapability Changed Indicates whether the Use of the Capability has been changed. [Browsable(false)] public bool Changed { get; } Property Value bool Use Indicates whether the Capability shall be used or not. public bool Use { get; set; } Property Value bool"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.CapabilityModelExtensions.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.CapabilityModelExtensions.html",
    "title": "Class CapabilityModelExtensions | Zero Install .NET API",
    "summary": "Class CapabilityModelExtensions Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Contains extension methods for CapabilityModel BindingList<T>s. public static class CapabilityModelExtensions Inheritance object CapabilityModelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetAllUse<T>(BindingList<T>, bool) Sets all Use values within a list/model to a specific value. public static void SetAllUse<T>(this BindingList<T> model, bool value) where T : CapabilityModel Parameters model BindingList<T> A model representing the underlying DefaultCapabilitys and their selection states. value bool The value to set. Type Parameters T The specific kind of DefaultAccessPoint to handle."
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.ContextMenuModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.ContextMenuModel.html",
    "title": "Class ContextMenuModel | Zero Install .NET API",
    "summary": "Class ContextMenuModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps a ContextMenu for data binding. public class ContextMenuModel : IconCapabilityModel Inheritance object CapabilityModel IconCapabilityModel ContextMenuModel Inherited Members IconCapabilityModel.Description CapabilityModel.Capability CapabilityModel.Use CapabilityModel.Changed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContextMenuModel(ContextMenu, bool) public ContextMenuModel(ContextMenu contextMenu, bool used) Parameters contextMenu ContextMenu used bool Properties Name The name of the first entry in Verbs. public string? Name { get; } Property Value string"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.DefaultProgramModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.DefaultProgramModel.html",
    "title": "Class DefaultProgramModel | Zero Install .NET API",
    "summary": "Class DefaultProgramModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps a DefaultProgram for data binding. public class DefaultProgramModel : IconCapabilityModel Inheritance object CapabilityModel IconCapabilityModel DefaultProgramModel Inherited Members IconCapabilityModel.Description CapabilityModel.Capability CapabilityModel.Use CapabilityModel.Changed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultProgramModel(DefaultProgram, bool) public DefaultProgramModel(DefaultProgram capability, bool used) Parameters capability DefaultProgram used bool Properties Service Returns Service. public string Service { get; } Property Value string"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.FileTypeModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.FileTypeModel.html",
    "title": "Class FileTypeModel | Zero Install .NET API",
    "summary": "Class FileTypeModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps a FileType for data binding. public class FileTypeModel : IconCapabilityModel Inheritance object CapabilityModel IconCapabilityModel FileTypeModel Inherited Members IconCapabilityModel.Description CapabilityModel.Capability CapabilityModel.Use CapabilityModel.Changed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileTypeModel(FileType, bool) public FileTypeModel(FileType fileType, bool used) Parameters fileType FileType used bool Properties Extensions All Extensions concatenated with \", \". public string Extensions { get; } Property Value string"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.IconCapabilityModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.IconCapabilityModel.html",
    "title": "Class IconCapabilityModel | Zero Install .NET API",
    "summary": "Class IconCapabilityModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps an IconCapability for data binding. public class IconCapabilityModel : CapabilityModel Inheritance object CapabilityModel IconCapabilityModel Derived AutoPlayModel ContextMenuModel DefaultProgramModel FileTypeModel UrlProtocolModel Inherited Members CapabilityModel.Capability CapabilityModel.Use CapabilityModel.Changed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IconCapabilityModel(IconCapability, bool) protected IconCapabilityModel(IconCapability capability, bool used) Parameters capability IconCapability used bool Properties Description Returns the description of the IconCapability dependant on CurrentUICulture. public string Description { get; } Property Value string"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.IntegrationState.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.IntegrationState.html",
    "title": "Class IntegrationState | Zero Install .NET API",
    "summary": "Class IntegrationState Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll A View-Model for modifying desktop integration. Provides data-binding lists and applies modifications in bulk. public class IntegrationState Inheritance object IntegrationState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntegrationState(IIntegrationManager, AppEntry, Feed) Creates a new integration state View-Model. public IntegrationState(IIntegrationManager integrationManager, AppEntry appEntry, Feed feed) Parameters integrationManager IIntegrationManager The integration manager used to apply selected integration options. appEntry AppEntry The application being integrated. feed Feed The feed providing additional metadata, icons, etc. for the application. Fields Aliases public readonly BindingList<AppAlias> Aliases Field Value BindingList<AppAlias> AutoPlay public readonly BindingList<AutoPlayModel> AutoPlay Field Value BindingList<AutoPlayModel> AutoStarts public readonly BindingList<AutoStart> AutoStarts Field Value BindingList<AutoStart> ContextMenu public readonly BindingList<ContextMenuModel> ContextMenu Field Value BindingList<ContextMenuModel> DefaultProgram public readonly BindingList<DefaultProgramModel> DefaultProgram Field Value BindingList<DefaultProgramModel> DesktopIcons public readonly BindingList<DesktopIcon> DesktopIcons Field Value BindingList<DesktopIcon> FileTypes public readonly BindingList<FileTypeModel> FileTypes Field Value BindingList<FileTypeModel> MenuEntries public readonly BindingList<MenuEntry> MenuEntries Field Value BindingList<MenuEntry> SendTo public readonly BindingList<SendTo> SendTo Field Value BindingList<SendTo> UrlProtocols public readonly BindingList<UrlProtocolModel> UrlProtocols Field Value BindingList<UrlProtocolModel> Properties AppEntry The application being integrated. public AppEntry AppEntry { get; } Property Value AppEntry CapabilityRegistration Controls whether CapabilityRegistration is used. public bool CapabilityRegistration { get; set; } Property Value bool Feed The feed providing additional metadata, icons, etc. for the application. public Feed Feed { get; } Property Value Feed Methods ApplyChanges() Applies any changes made to the View-Model to the underlying system. public void ApplyChanges() Exceptions OperationCanceledException The user canceled the task. ConflictException One or more of the new AccessPoints would cause a conflict with the existing AccessPoints in AppList. WebException A problem occurred while downloading additional data (such as icons). IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.UrlProtocolModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.UrlProtocolModel.html",
    "title": "Class UrlProtocolModel | Zero Install .NET API",
    "summary": "Class UrlProtocolModel Namespace ZeroInstall.DesktopIntegration.ViewModel Assembly ZeroInstall.DesktopIntegration.dll Wraps a UrlProtocol for data binding. public class UrlProtocolModel : IconCapabilityModel Inheritance object CapabilityModel IconCapabilityModel UrlProtocolModel Inherited Members IconCapabilityModel.Description CapabilityModel.Capability CapabilityModel.Use CapabilityModel.Changed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UrlProtocolModel(UrlProtocol, bool) public UrlProtocolModel(UrlProtocol capability, bool used) Parameters capability UrlProtocol used bool Properties KnownPrefixes All KnownPrefixes concatenated with \", \". If no KnownPrefixes is available ID will be returned. public string KnownPrefixes { get; } Property Value string"
  },
  "api/ZeroInstall.DesktopIntegration.ViewModel.html": {
    "href": "api/ZeroInstall.DesktopIntegration.ViewModel.html",
    "title": "Namespace ZeroInstall.DesktopIntegration.ViewModel | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.DesktopIntegration.ViewModel Classes that wrap desktop integration capabilities in a data binding-friendly manner. Classes AutoPlayModel Wraps a AutoPlay for data binding. CapabilityModel Wraps a DefaultCapability for data binding. CapabilityModelExtensions Contains extension methods for CapabilityModel BindingList<T>s. ContextMenuModel Wraps a ContextMenu for data binding. DefaultProgramModel Wraps a DefaultProgram for data binding. FileTypeModel Wraps a FileType for data binding. IconCapabilityModel Wraps an IconCapability for data binding. IntegrationState A View-Model for modifying desktop integration. Provides data-binding lists and applies modifications in bulk. UrlProtocolModel Wraps a UrlProtocol for data binding."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.AppAlias.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.AppAlias.html",
    "title": "Class AppAlias | Zero Install .NET API",
    "summary": "Class AppAlias Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying AppAlias on Windows systems. public static class AppAlias Inheritance object AppAlias Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RegKeyAppPaths The HKCU/HKLM registry key for storing application lookup paths. public const string RegKeyAppPaths = \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\" Field Value string Methods Create(FeedTarget, string?, string, IIconStore, bool) Creates an application alias in the current system. public static void Create(FeedTarget target, string? command, string aliasName, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being integrated. command string The command within target the alias shall point to; can be null. aliasName string The name of the alias to be created. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Create the alias machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. GetStubDir(bool) Returns the path of the directory used to store alias stub EXEs. public static string GetStubDir(bool machineWide) Parameters machineWide bool true for a machine-wide directory; false for a directory just for the current user. Returns string Remove(string, bool) Removes an application alias from the current system. public static void Remove(string aliasName, bool machineWide) Parameters aliasName string The name of the alias to be removed. machineWide bool The alias was created machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.AppRegistration.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.AppRegistration.html",
    "title": "Class AppRegistration | Zero Install .NET API",
    "summary": "Class AppRegistration Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying AppRegistration on Windows systems. public static class AppRegistration Inheritance object AppRegistration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RegKeyMachineRegisteredApplications The HKLM registry key for registering applications as candidates for default programs. public const string RegKeyMachineRegisteredApplications = \"SOFTWARE\\\\RegisteredApplications\" Field Value string RegSubKeyFileAssocs The registry subkey containing FileType references. public const string RegSubKeyFileAssocs = \"FileAssociations\" Field Value string RegSubKeyStartMenu The registry subkey containing DefaultProgram references. public const string RegSubKeyStartMenu = \"StartMenu\" Field Value string RegSubKeyUrlAssocs The registry subkey containing UrlProtocol references. public const string RegSubKeyUrlAssocs = \"URLAssociations\" Field Value string RegValueAppDescription The registry value name for the application description. public const string RegValueAppDescription = \"ApplicationDescription\" Field Value string RegValueAppIcon The registry value name for the application icon. public const string RegValueAppIcon = \"ApplicationIcon\" Field Value string RegValueAppName The registry value name for the application name. public const string RegValueAppName = \"ApplicationName\" Field Value string Methods Register(FeedTarget, AppRegistration, IEnumerable<VerbCapability>, IIconStore, bool) Applies application registration to the current system. public static void Register(FeedTarget target, AppRegistration appRegistration, IEnumerable<VerbCapability> verbCapabilities, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being integrated. appRegistration AppRegistration The registration information to be applied. verbCapabilities IEnumerable<VerbCapability> The capabilities that the application is to be registered with. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the registration machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(AppRegistration, bool) Removes application registration from the current system. public static void Unregister(AppRegistration appRegistration, bool machineWide) Parameters appRegistration AppRegistration The registration information to be removed. machineWide bool Apply the registration machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.AutoPlay.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.AutoPlay.html",
    "title": "Class AutoPlay | Zero Install .NET API",
    "summary": "Class AutoPlay Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying AutoPlay and AutoPlay on Windows systems. public static class AutoPlay Inheritance object AutoPlay Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RegKeyAssocs The HKCU/HKLM registry key for storing AutoPlay handler associations. public const string RegKeyAssocs = \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\AutoplayHandlers\\\\EventHandlers\" Field Value string RegKeyChosenAssocs The HKCU registry key for storing user-selected AutoPlay handlers. public const string RegKeyChosenAssocs = \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\AutoplayHandlers\\\\UserChosenExecuteHandlers\" Field Value string RegKeyHandlers The HKCU/HKLM registry key for storing AutoPlay handlers. public const string RegKeyHandlers = \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\AutoplayHandlers\\\\Handlers\" Field Value string RegValueDescription The registry value name for storing the description of the AutoPlay action. public const string RegValueDescription = \"Action\" Field Value string RegValueIcon The registry value name for storing the icon for the AutoPlay action. public const string RegValueIcon = \"DefaultIcon\" Field Value string RegValueProgID The registry value name for storing the programmatic identifier to invoke. public const string RegValueProgID = \"InvokeProgID\" Field Value string RegValueProvider The registry value name for storing the name of the application providing the AutoPlay action. public const string RegValueProvider = \"Provider\" Field Value string RegValueVerb The registry value name for storing the name of the verb to invoke. public const string RegValueVerb = \"InvokeVerb\" Field Value string Methods Register(FeedTarget, AutoPlay, IIconStore, bool, bool) Adds an AutoPlay handler registration to the current system. public static void Register(FeedTarget target, AutoPlay autoPlay, IIconStore iconStore, bool machineWide, bool accessPoint = false) Parameters target FeedTarget The application being integrated. autoPlay AutoPlay The AutoPlay handler information to be applied. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Register the handler machine-wide instead of just for the current user. accessPoint bool Indicates that the handler should become the default handler for all Events. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(AutoPlay, bool, bool) Removes an AutoPlay handler registration from the current system. public static void Unregister(AutoPlay autoPlay, bool machineWide, bool accessPoint = false) Parameters autoPlay AutoPlay The AutoPlay handler information to be removed. machineWide bool Remove the handler machine-wide instead of just for the current user. accessPoint bool Indicates that the handler should was the default handler for all Events. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.BrowserNativeMessagingHost.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.BrowserNativeMessagingHost.html",
    "title": "Class BrowserNativeMessagingHost | Zero Install .NET API",
    "summary": "Class BrowserNativeMessagingHost Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying BrowserNativeMessaging on Windows systems. public static class BrowserNativeMessagingHost Inheritance object BrowserNativeMessagingHost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Register(FeedTarget, BrowserNativeMessaging, IIconStore, bool) public static void Register(FeedTarget target, BrowserNativeMessaging capability, IIconStore iconStore, bool machineWide) Parameters target FeedTarget capability BrowserNativeMessaging iconStore IIconStore machineWide bool Unregister(BrowserNativeMessaging, bool) public static void Unregister(BrowserNativeMessaging capability, bool machineWide) Parameters capability BrowserNativeMessaging machineWide bool"
  },
  "api/ZeroInstall.DesktopIntegration.Windows.ComServer.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.ComServer.html",
    "title": "Class ComServer | Zero Install .NET API",
    "summary": "Class ComServer Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying ComServer on Windows systems. public static class ComServer Inheritance object ComServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RegKeyClassesIDs The HKCR registry key for storing COM class IDs. public const string RegKeyClassesIDs = \"CLSID\" Field Value string Methods Register(FeedTarget, ComServer, IIconStore, bool) Registers a COM server in the current system. public static void Register(FeedTarget target, ComServer comServer, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being integrated. comServer ComServer The COM server to be registered. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Register the COM server machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(ComServer, bool) Unregisters a COM server in the current system. public static void Unregister(ComServer comServer, bool machineWide) Parameters comServer ComServer The COM server to be unregistered. machineWide bool Unregister the COM server machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.ContextMenu.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.ContextMenu.html",
    "title": "Class ContextMenu | Zero Install .NET API",
    "summary": "Class ContextMenu Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying ContextMenu and ContextMenu on Windows systems. public static class ContextMenu Inheritance object ContextMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Prefix Prepended before programmatic identifiers used by Zero Install in the registry. This prevents conflicts with non-Zero Install installations. public const string Prefix = \"ZeroInstall.ContextMenu.\" Field Value string RegKeyClassesAll The HKCU registry key for registering things for all filesystem objects (files and directories). public const string RegKeyClassesAll = \"AllFilesystemObjects\" Field Value string RegKeyClassesDirectories The HKCU registry key for registering things for all directories. public const string RegKeyClassesDirectories = \"Directory\" Field Value string RegKeyClassesExecutableFiles The HKCU registry key for registering things for different kinds of executable files. public static readonly string[] RegKeyClassesExecutableFiles Field Value string[] RegKeyClassesFiles The HKCU registry key for registering things for all files. public const string RegKeyClassesFiles = \"*\" Field Value string Methods Apply(FeedTarget, ContextMenu, IIconStore, bool) Adds a context menu entry to the current system. public static void Apply(FeedTarget target, ContextMenu contextMenu, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being integrated. contextMenu ContextMenu The context menu entry to add. iconStore IIconStore A callback object used when the user is to be informed about the progress of long-running operations such as downloads. machineWide bool Add the context menu entry machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Remove(ContextMenu, bool) Removes a context menu entry from the current system. public static void Remove(ContextMenu contextMenu, bool machineWide) Parameters contextMenu ContextMenu The context menu entry to remove. machineWide bool Remove the context menu entry machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.DefaultProgram.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.DefaultProgram.html",
    "title": "Class DefaultProgram | Zero Install .NET API",
    "summary": "Class DefaultProgram Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying DefaultProgram and DefaultProgram on Windows systems. public static class DefaultProgram Inheritance object DefaultProgram Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RegKeyMachineClients The HKLM registry key for registering applications as clients for specific services. public const string RegKeyMachineClients = \"SOFTWARE\\\\Clients\" Field Value string RegSubKeyInstallInfo The name of the registry subkeys containing information about application installation commands and status. public const string RegSubKeyInstallInfo = \"InstallInfo\" Field Value string RegValueHideIconsCommand The registry value name below RegSubKeyInstallInfo for the command to remove icons/shortcuts to the application. public const string RegValueHideIconsCommand = \"HideIconsCommand\" Field Value string RegValueIconsVisible The registry value name below RegSubKeyInstallInfo for storing whether the application's icons are currently visible. public const string RegValueIconsVisible = \"IconsVisible\" Field Value string RegValueLocalizedName The registry value name for localized name storage. public const string RegValueLocalizedName = \"LocalizedString\" Field Value string RegValueReinstallCommand The registry value name below RegSubKeyInstallInfo for the command to set an application as the default program. public const string RegValueReinstallCommand = \"ReinstallCommand\" Field Value string RegValueShowIconsCommand The registry value name below RegSubKeyInstallInfo for the command to create icons/shortcuts to the application. public const string RegValueShowIconsCommand = \"ShowIconsCommand\" Field Value string Methods Register(FeedTarget, DefaultProgram, IIconStore, bool) Registers an application as a candidate for a default program for some service in the current system. This can only be applied machine-wide, not per user. public static void Register(FeedTarget target, DefaultProgram defaultProgram, IIconStore iconStore, bool accessPoint = false) Parameters target FeedTarget The application being integrated. defaultProgram DefaultProgram The default program information to be registered. iconStore IIconStore Stores icon files downloaded from the web as local files. accessPoint bool Indicates that the program should be set as the current default for the service it provides. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(DefaultProgram, bool) Unregisters an application as a candidate for a default program in the current system. This can only be applied machine-wide, not per user. public static void Unregister(DefaultProgram defaultProgram, bool accessPoint = false) Parameters defaultProgram DefaultProgram The default program information to be removed. accessPoint bool Indicates that the program was set as the current default for the service it provides. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.FileType.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.FileType.html",
    "title": "Class FileType | Zero Install .NET API",
    "summary": "Class FileType Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying FileType and FileType on Windows systems. public static class FileType Inheritance object FileType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields RegSubKeyOpenWith The registry subkey containing \"open with\" ProgID references. public const string RegSubKeyOpenWith = \"OpenWithProgIDs\" Field Value string RegValueContentType The registry value name for MIME type storage. public const string RegValueContentType = \"Content Type\" Field Value string RegValueFriendlyName The registry value name for friendly type name storage. public const string RegValueFriendlyName = \"FriendlyTypeName\" Field Value string RegValuePerceivedType The registry value name for perceived type storage. public const string RegValuePerceivedType = \"PerceivedType\" Field Value string Methods Register(FeedTarget, FileType, IIconStore, bool, bool) Registers a file type in the current system. public static void Register(FeedTarget target, FileType fileType, IIconStore iconStore, bool machineWide, bool accessPoint = false) Parameters target FeedTarget The application being integrated. fileType FileType The file type to register. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Register the file type machine-wide instead of just for the current user. accessPoint bool Indicates that the file associations shall become default handlers for their respective types. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(FileType, bool, bool) Unregisters a file type in the current system. public static void Unregister(FileType fileType, bool machineWide, bool accessPoint = false) Parameters fileType FileType The file type to remove. machineWide bool Unregister the file type machine-wide instead of just for the current user. accessPoint bool Indicates that the file associations were default handlers for their respective types. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.PathEnv.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.PathEnv.html",
    "title": "Class PathEnv | Zero Install .NET API",
    "summary": "Class PathEnv Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Manages the PATH environment variable. public static class PathEnv Inheritance object PathEnv Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDir(string, bool) Adds a directory to the search PATH. public static void AddDir(string directory, bool machineWide) Parameters directory string The directory to add to the search PATH. machineWide bool true to use the machine-wide PATH variable; false for the per-user variant. Get(bool) Returns the current search PATH. public static string[] Get(bool machineWide) Parameters machineWide bool true to use the machine-wide PATH variable; false for the per-user variant. Returns string[] The individual directories listed in the search path. RemoveDir(string, bool) Removes a directory from the search PATH. public static void RemoveDir(string directory, bool machineWide) Parameters directory string The directory to remove from the search PATH. machineWide bool true to use the machine-wide PATH variable; false for the per-user variant. Set(IEnumerable<string>, bool) Sets the current search PATH. public static void Set(IEnumerable<string> directories, bool machineWide) Parameters directories IEnumerable<string> The individual directories to list in the search PATH. machineWide bool true to use the machine-wide PATH variable; false for the per-user variant."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.Shortcut.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.Shortcut.html",
    "title": "Class Shortcut | Zero Install .NET API",
    "summary": "Class Shortcut Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Creates Windows shortcut files (.lnk). public static class Shortcut Inheritance object Shortcut Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(string, string, string?, string?, string?, string?) Creates a new Windows shortcut. public static void Create(string path, string targetPath, string? arguments = null, string? iconLocation = null, string? description = null, string? appId = null) Parameters path string The location to place the shortcut at. targetPath string The target path the shortcut shall point to. arguments string Additional arguments to pass to the target; can be null. iconLocation string The path of the icon to use for the shortcut; leave null ot get the icon from targetPath. description string A short human-readable description; can be null. appId string The Application User Model ID; used by Windows to associate shortcuts and pinned taskbar entries with running processes. Create(AutoStart, FeedTarget, IIconStore, bool) Creates a new Windows shortcut in the \"Startup\" menu. public static void Create(AutoStart autoStart, FeedTarget target, IIconStore iconStore, bool machineWide) Parameters autoStart AutoStart Information about the shortcut to be created. target FeedTarget The target the shortcut shall point to. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Create the shortcut machine-wide instead of just for the current user. Create(DesktopIcon, FeedTarget, IIconStore, bool) Creates a new Windows shortcut on the desktop. public static void Create(DesktopIcon desktopIcon, FeedTarget target, IIconStore iconStore, bool machineWide) Parameters desktopIcon DesktopIcon Information about the shortcut to be created. target FeedTarget The target the shortcut shall point to. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Create the shortcut machine-wide instead of just for the current user. Create(MenuEntry, FeedTarget, IIconStore, bool) Creates a new Windows shortcut in the start menu or on the start page. public static void Create(MenuEntry menuEntry, FeedTarget target, IIconStore iconStore, bool machineWide) Parameters menuEntry MenuEntry Information about the shortcut to be created. target FeedTarget The target the shortcut shall point to. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Create the shortcut machine-wide instead of just for the current user. Create(QuickLaunch, FeedTarget, IIconStore) Creates a new Windows shortcut in the quick launch bar. public static void Create(QuickLaunch quickLaunch, FeedTarget target, IIconStore iconStore) Parameters quickLaunch QuickLaunch Information about the shortcut to be created. target FeedTarget The target the shortcut shall point to. iconStore IIconStore Stores icon files downloaded from the web as local files. Create(SendTo, FeedTarget, IIconStore) Creates a new Windows shortcut in the \"Send to\" menu. public static void Create(SendTo sendTo, FeedTarget target, IIconStore iconStore) Parameters sendTo SendTo Information about the shortcut to be created. target FeedTarget The target the shortcut shall point to. iconStore IIconStore Stores icon files downloaded from the web as local files. GetStartMenuPath(string?, string?, bool) Builds a path for a shortcut in the start menu programs folder, optionally appending a category. public static string GetStartMenuPath(string? category, string? name, bool machineWide) Parameters category string The name of the category/directory below the programs folder; can be null. name string The name of the shortcut (without the .lnk ending). machineWide bool true to use the machine-wide start menu; false for the per-user variant. Returns string Exceptions IOException name or category contains invalid characters. Remove(AutoStart, bool) Removes a Windows shortcut from the \"Startup\" menu. public static void Remove(AutoStart autoStart, bool machineWide) Parameters autoStart AutoStart Information about the shortcut to be removed. machineWide bool The shortcut was created machine-wide instead of just for the current user. Remove(DesktopIcon, bool) Removes a Windows shortcut from the desktop. public static void Remove(DesktopIcon desktopIcon, bool machineWide) Parameters desktopIcon DesktopIcon Information about the shortcut to be removed. machineWide bool The shortcut was created machine-wide instead of just for the current user. Remove(MenuEntry, bool) Removes a Windows shortcut from the start menu or on the start page. public static void Remove(MenuEntry menuEntry, bool machineWide) Parameters menuEntry MenuEntry Information about the shortcut to be removed. machineWide bool The shortcut was created machine-wide instead of just for the current user. Remove(QuickLaunch) Removes a Windows shortcut from the quick launch bar. public static void Remove(QuickLaunch quickLaunch) Parameters quickLaunch QuickLaunch Information about the shortcut to be removed. Remove(SendTo) Removes a Windows shortcut from the \"Send to\" menu. public static void Remove(SendTo sendTo) Parameters sendTo SendTo Information about the shortcut to be removed."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.StubBuilder.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.StubBuilder.html",
    "title": "Class StubBuilder | Zero Install .NET API",
    "summary": "Class StubBuilder Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Builds stub EXEs that execute \"0install\" commands. public class StubBuilder Inheritance object StubBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StubBuilder(IIconStore) Builds stub EXEs that execute \"0install\" commands. public StubBuilder(IIconStore iconStore) Parameters iconStore IIconStore Methods BuildRunStub(string, FeedTarget, string?, bool) Builds a stub EXE that executes the 0install run command at a specific path. public void BuildRunStub(string path, FeedTarget target, string? command, bool needsTerminal) Parameters path string The path to store the generated EXE file. target FeedTarget The application to be launched. command string The command argument to be passed to the 0install run command; can be null. needsTerminal bool true if the sub should be a command-line app, false if it should be a GUI app. Exceptions OperationCanceledException The user canceled the task. InvalidOperationException There was a compilation error while generating the stub EXE. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted. GetRunCommandLine(FeedTarget, string?, bool, bool?) Returns a command-line for executing the 0install run command. Generates and returns a stub EXE if possible, falls back to directly pointing to the \"0install\" EXE otherwise. public IReadOnlyList<string> GetRunCommandLine(FeedTarget target, string? command, bool machineWide, bool? needsTerminal = null) Parameters target FeedTarget The application to be launched. command string The command argument to be passed to the 0install run command; can be null. machineWide bool true place the generated stub in a machine-wide location; false to place it in the current user profile. needsTerminal bool? true if the sub should be a command-line app, false if it should be a GUI app, null if it should be auto-detected. Returns IReadOnlyList<string> Exceptions OperationCanceledException The user canceled the task. InvalidOperationException There was a compilation error while generating the stub EXE. IOException A problem occurred while writing to the filesystem. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.UninstallEntry.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.UninstallEntry.html",
    "title": "Class UninstallEntry | Zero Install .NET API",
    "summary": "Class UninstallEntry Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Manages uninstall registry entries on Windows systems. public static class UninstallEntry Inheritance object UninstallEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Register(string, string, string[], string[]?, string?, Uri?, string?, string?, long?, bool) Adds an entry to the list of uninstallable applications. public static void Register(string id, string name, string[] uninstallCommand, string[]? modifyCommand = null, string? publisher = null, Uri? homepage = null, string? iconPath = null, string? version = null, long? size = null, bool machineWide = false) Parameters id string The ID of the entry to create. name string The name of the application. uninstallCommand string[] The command-line to invoke for uninstalling the application. modifyCommand string[] The command-line to invoke for modifying the state of the application. publisher string The publisher (company or organization) of the application. homepage Uri The URL of a web-page describing application in more detail. iconPath string The path of an icon file. version string The application's current version. size long? The application's size in bytes. machineWide bool Apply the registration machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Register(FeedTarget, IIconStore, bool) Adds an entry to the list of uninstallable applications. public static void Register(FeedTarget target, IIconStore iconStore, bool machineWide) Parameters target FeedTarget The application being added. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Apply the registration machine-wide instead of just for the current user. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(string, bool) Removes an entry from the list of uninstallable applications. public static void Unregister(string id, bool machineWide) Parameters id string The ID of the entry to be removed. machineWide bool Apply the registration machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(FeedUri, bool) Removes an entry from the list of uninstallable applications. public static void Unregister(FeedUri uri, bool machineWide) Parameters uri FeedUri The feed to be removed. machineWide bool Apply the registration machine-wide instead of just for the current user. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.UrlProtocol.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.UrlProtocol.html",
    "title": "Class UrlProtocol | Zero Install .NET API",
    "summary": "Class UrlProtocol Namespace ZeroInstall.DesktopIntegration.Windows Assembly ZeroInstall.DesktopIntegration.dll Contains control logic for applying UrlProtocol and UrlProtocol on Windows systems. public static class UrlProtocol Inheritance object UrlProtocol Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ProtocolIndicator The registry value name used to indicate that a programmatic identifier is actually a ULR protocol handler. public const string ProtocolIndicator = \"URL Protocol\" Field Value string RegKeyUserVistaUrlAssoc The HKCU registry key where Windows Vista and newer store URL protocol associations. public const string RegKeyUserVistaUrlAssoc = \"Software\\\\Microsoft\\\\Windows\\\\Shell\\\\Associations\\\\UrlAssociations\" Field Value string Methods Register(FeedTarget, UrlProtocol, IIconStore, bool, bool) Registers a URL protocol in the current system. public static void Register(FeedTarget target, UrlProtocol urlProtocol, IIconStore iconStore, bool machineWide, bool accessPoint = false) Parameters target FeedTarget The application being integrated. urlProtocol UrlProtocol The URL protocol to register. iconStore IIconStore Stores icon files downloaded from the web as local files. machineWide bool Register the URL protocol machine-wide instead of just for the current user. accessPoint bool Indicates that the handler shall become the default handler for the protocol. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while writing to the filesystem or registry. WebException A problem occurred while downloading additional data (such as icons). UnauthorizedAccessException Write access to the filesystem or registry is not permitted. Unregister(UrlProtocol, bool, bool) Unregisters a URL protocol in the current system. public static void Unregister(UrlProtocol urlProtocol, bool machineWide, bool accessPoint = false) Parameters urlProtocol UrlProtocol The URL protocol to remove. machineWide bool Unregister the URL protocol machine-wide instead of just for the current user. accessPoint bool Indicates that the handler was the default handler for the protocol. Exceptions IOException A problem occurred while writing to the filesystem or registry. UnauthorizedAccessException Write access to the filesystem or registry is not permitted."
  },
  "api/ZeroInstall.DesktopIntegration.Windows.html": {
    "href": "api/ZeroInstall.DesktopIntegration.Windows.html",
    "title": "Namespace ZeroInstall.DesktopIntegration.Windows | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.DesktopIntegration.Windows Windows-specific desktop integration code. Classes AppAlias Contains control logic for applying AppAlias on Windows systems. AppRegistration Contains control logic for applying AppRegistration on Windows systems. AutoPlay Contains control logic for applying AutoPlay and AutoPlay on Windows systems. BrowserNativeMessagingHost Contains control logic for applying BrowserNativeMessaging on Windows systems. ComServer Contains control logic for applying ComServer on Windows systems. ContextMenu Contains control logic for applying ContextMenu and ContextMenu on Windows systems. DefaultProgram Contains control logic for applying DefaultProgram and DefaultProgram on Windows systems. FileType Contains control logic for applying FileType and FileType on Windows systems. PathEnv Manages the PATH environment variable. Shortcut Creates Windows shortcut files (.lnk). StubBuilder Builds stub EXEs that execute \"0install\" commands. UninstallEntry Manages uninstall registry entries on Windows systems. UrlProtocol Contains control logic for applying UrlProtocol and UrlProtocol on Windows systems."
  },
  "api/ZeroInstall.DesktopIntegration.html": {
    "href": "api/ZeroInstall.DesktopIntegration.html",
    "title": "Namespace ZeroInstall.DesktopIntegration | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.DesktopIntegration Integrating applications with desktop environments (creating menu entries, etc.). NuGet package: ZeroInstall.DesktopIntegration Namespaces ZeroInstall.DesktopIntegration.AccessPoints Structures for parsing and in-memory representation of access points applied to a system. ZeroInstall.DesktopIntegration.Unix Desktop integration code for Unix-like systems (e.g. Linux). ZeroInstall.DesktopIntegration.ViewModel Classes that wrap desktop integration capabilities in a data binding-friendly manner. ZeroInstall.DesktopIntegration.Windows Windows-specific desktop integration code. Classes AppEntry Represents an application in the AppList identified by its interface URI. AppList Stores a list of applications and the kind of desktop integration the user chose for them. CapabilityExtensions Contains extension methods for Capabilitys. CategoryIntegrationManager Manages desktop integration via AccessPoints, grouping them into categories. ConflictData Stores information about an AccessPoint causing a conflict and the AppEntry containing it. ConflictDataUtils Helper methods for creating ConflictData lists. ConflictException Indicates a desktop integration operation could not be completed due to conflicting AccessPoints. IconStores Provides IIconStore instances. IntegrationManager Manages an AppList and desktop integration via AccessPoints. IntegrationManagerBase Base class for IIntegrationManager implementations using template methods. Suggest Suggests suitable default AccessPoints for specific Feeds. SyncIntegrationManager Synchronizes the AppList with other computers. SyncRaceException Multiple computers are trying to sync with the same account at the same time. Interfaces ICategoryIntegrationManager Manages desktop integration via AccessPoints, grouping them into categories. IIntegrationManager Manages an AppList and desktop integration via AccessPoints. Enums SyncResetMode Controls how synchronization data is reset by Sync(SyncResetMode)"
  },
  "api/ZeroInstall.Model.Architecture.html": {
    "href": "api/ZeroInstall.Model.Architecture.html",
    "title": "Struct Architecture | Zero Install .NET API",
    "summary": "Struct Architecture Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Describes a combination of an operating system and a CPU architecture. [TypeConverter(typeof(ArchitectureConverter))] [Serializable] public record struct Architecture : IEquatable<Architecture> Implements IEquatable<Architecture> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ArchitectureExtensions.RunsOn(Architecture, Architecture) Constructors Architecture(string) Creates a new architecture structure from a string in the form \"os-cpu\". public Architecture(string architecture) Parameters architecture string Exceptions FormatException architecture is not in the form \"os-cpu\" Architecture(OS, Cpu) Describes a combination of an operating system and a CPU architecture. public Architecture(OS OS = OS.All, Cpu Cpu = Cpu.All) Parameters OS OS Determines which operating systems are supported. Cpu Cpu Determines which CPU-architectures are supported. Fields CurrentSystem An architecture representing the currently running system. public static readonly Architecture CurrentSystem Field Value Architecture Properties Cpu Determines which CPU-architectures are supported. public Cpu Cpu { readonly get; set; } Property Value Cpu OS Determines which operating systems are supported. public OS OS { readonly get; set; } Property Value OS Methods ToString() Returns the architecture in the form \"os-cpu\". Safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Model.ArchitectureExtensions.html": {
    "href": "api/ZeroInstall.Model.ArchitectureExtensions.html",
    "title": "Class ArchitectureExtensions | Zero Install .NET API",
    "summary": "Class ArchitectureExtensions Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Contains extension methods for Architecture, OS and Cpu. public static class ArchitectureExtensions Inheritance object ArchitectureExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Is32Bit(Cpu) Indicates whether the CPU architecture is 32-bit. public static bool Is32Bit(this Cpu cpu) Parameters cpu Cpu Returns bool Is64Bit(Cpu) Indicates whether the CPU architecture is 64-bit. public static bool Is64Bit(this Cpu cpu) Parameters cpu Cpu Returns bool RunsOn(Architecture, Architecture) Determines whether an implementation for architecture can run on target. public static bool RunsOn(this Architecture architecture, Architecture target) Parameters architecture Architecture target Architecture Returns bool RunsOn(Cpu, Cpu) Determines whether an implementation for cpu can run on target. public static bool RunsOn(this Cpu cpu, Cpu target) Parameters cpu Cpu target Cpu Returns bool RunsOn(OS, OS) Determines whether an implementation for os can run on target. public static bool RunsOn(this OS os, OS target) Parameters os OS target OS Returns bool"
  },
  "api/ZeroInstall.Model.Archive.html": {
    "href": "api/ZeroInstall.Model.Archive.html",
    "title": "Class Archive | Zero Install .NET API",
    "summary": "Class Archive Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Retrieves an implementation by downloading and extracting an archive. [Serializable] [Equatable] public sealed class Archive : DownloadRetrievalMethod, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<RetrievalMethod>, IRecipeStep, ICloneable<IRecipeStep>, IEquatable<DownloadRetrievalMethod>, IEquatable<Archive> Inheritance object XmlUnknown FeedElement RetrievalMethod DownloadRetrievalMethod Archive Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<RetrievalMethod> IRecipeStep ICloneable<IRecipeStep> IEquatable<DownloadRetrievalMethod> IEquatable<Archive> Inherited Members DownloadRetrievalMethod.Href DownloadRetrievalMethod.Size FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields KnownMimeTypes All known MimeType values for archives. public static readonly IEnumerable<string> KnownMimeTypes Field Value IEnumerable<string> MimeType7Z A MimeType value for archives. public const string MimeType7Z = \"application/x-7z-compressed\" Field Value string MimeTypeCab A MimeType value for archives. public const string MimeTypeCab = \"application/vnd.ms-cab-compressed\" Field Value string MimeTypeDeb A MimeType value for archives. public const string MimeTypeDeb = \"application/x-deb\" Field Value string MimeTypeDmg A MimeType value for archives. public const string MimeTypeDmg = \"application/x-apple-diskimage\" Field Value string MimeTypeMsi A MimeType value for archives. public const string MimeTypeMsi = \"application/x-msi\" Field Value string MimeTypeRar A MimeType value for archives. public const string MimeTypeRar = \"application/vnd.rar\" Field Value string MimeTypeRpm A MimeType value for archives. public const string MimeTypeRpm = \"application/x-rpm\" Field Value string MimeTypeRubyGem A MimeType value for archives. public const string MimeTypeRubyGem = \"application/x-ruby-gem\" Field Value string MimeTypeTar A MimeType value for archives. public const string MimeTypeTar = \"application/x-tar\" Field Value string MimeTypeTarBzip A MimeType value for archives. public const string MimeTypeTarBzip = \"application/x-bzip-compressed-tar\" Field Value string MimeTypeTarGzip A MimeType value for archives. public const string MimeTypeTarGzip = \"application/x-compressed-tar\" Field Value string MimeTypeTarLzip A MimeType value for archives. public const string MimeTypeTarLzip = \"application/x-lzip-compressed-tar\" Field Value string MimeTypeTarLzma A MimeType value for archives. public const string MimeTypeTarLzma = \"application/x-lzma-compressed-tar\" Field Value string MimeTypeTarXz A MimeType value for archives. public const string MimeTypeTarXz = \"application/x-xz-compressed-tar\" Field Value string MimeTypeTarZstandard A MimeType value for archives. public const string MimeTypeTarZstandard = \"application/x-zstd-compressed-tar\" Field Value string MimeTypeZip A MimeType value for archives. public const string MimeTypeZip = \"application/zip\" Field Value string Properties Destination The subdirectory below the implementation directory to extract the archive into as a Unix-style path; null or Empty for top-level. public string? Destination { get; set; } Property Value string DownloadSize The effective size of the file on the server. public override long DownloadSize { get; } Property Value long Extract The directory to extract into relative to the implementation root as a Unix-style path; null or Empty for entire archive. public string? Extract { get; set; } Property Value string MimeType The type of the archive as a MIME type. If missing, the type is guessed from the extension on the Href attribute. This value is case-insensitive. [TypeConverter(typeof(ArchiveMimeTypeConverter))] public string? MimeType { get; set; } Property Value string StartOffset The number of bytes at the beginning of the file which should be ignored. The value in Size does not include the skipped bytes. public int StartOffset { get; set; } Property Value int Remarks This is useful for some self-extracting archives which are made up of a shell script followed by a normal archive in a single file. Methods Clone() Creates a deep copy of this Archive instance. public override RetrievalMethod Clone() Returns RetrievalMethod The new copy of the Archive. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetFileExtension(string) Gets the default file extension for a particular archive MIME type. public static string GetFileExtension(string mimeType) Parameters mimeType string The MIME type to get the extension for. Returns string The file extension including the leading dot, e.g. '.zip'. '.*' if unknown. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GuessMimeType(string) Tries to guess the MIME type of an archive file by looking at its file extension. public static string GuessMimeType(string fileName) Parameters fileName string The file name to analyze. Returns string Exceptions NotSupportedException The file extension does not correspond to a known archive type. Normalize(FeedUri?) Sets missing default values and handles legacy elements. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. InvalidDataException A required property is not set or invalid. ToString() Returns the archive in the form \"Location (MimeType, Size + StartOffset, Extract) => Destination\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Archive?, Archive?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Archive? left, Archive? right) Parameters left Archive The left object right Archive The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Archive?, Archive?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Archive? left, Archive? right) Parameters left Archive The left object right Archive The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Arg.html": {
    "href": "api/ZeroInstall.Model.Arg.html",
    "title": "Class Arg | Zero Install .NET API",
    "summary": "Class Arg Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A single command-line arguments to be passed to an executable. [Serializable] [Equatable] public class Arg : ArgBase, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<ArgBase>, ICloneable<Arg>, IEquatable<Arg> Inheritance object XmlUnknown FeedElement ArgBase Arg Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<ArgBase> ICloneable<Arg> IEquatable<Arg> Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Value A single command-line arguments to be passed to an executable. Will be automatically escaped to allow proper concatenation of multiple arguments containing spaces. public required string Value { get; set; } Property Value string Methods Clone() Creates a deep copy of this Arg instance. public override ArgBase Clone() Returns ArgBase The new copy of the Arg. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Arg?) protected bool Equals(Arg? other) Parameters other Arg Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns Value. Not safe for parsing! public override string ToString() Returns string Operators operator ==(Arg?, Arg?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Arg? left, Arg? right) Parameters left Arg The left object right Arg The right object Returns bool true if the objects are equal; otherwise, false. implicit operator Arg(string) Convenience cast for turning strings into plain Args. public static implicit operator Arg(string value) Parameters value string Returns Arg operator !=(Arg?, Arg?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Arg? left, Arg? right) Parameters left Arg The left object right Arg The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.ArgBase.html": {
    "href": "api/ZeroInstall.Model.ArgBase.html",
    "title": "Class ArgBase | Zero Install .NET API",
    "summary": "Class ArgBase Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Common base class for Arg and ForEachArgs. [TypeConverter(typeof(ArgBaseConverter))] public abstract class ArgBase : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<ArgBase> Inheritance object XmlUnknown FeedElement ArgBase Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<ArgBase> Derived Arg ForEachArgs Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(object) FeedElement.Equals(FeedElement) FeedElement.GetHashCode() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clone() Creates a deep copy of this ArgBase instance. public abstract ArgBase Clone() Returns ArgBase The new copy of the ArgBase. Normalize() Converts legacy elements, sets default values, etc.. public abstract void Normalize() Exceptions InvalidDataException A required property is not set or invalid. Operators implicit operator ArgBase(string) Convenience cast for turning strings into plain Args. public static implicit operator ArgBase(string value) Parameters value string Returns ArgBase"
  },
  "api/ZeroInstall.Model.Binding.html": {
    "href": "api/ZeroInstall.Model.Binding.html",
    "title": "Class Binding | Zero Install .NET API",
    "summary": "Class Binding Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Bindings specify how the chosen implementation is made known to the running program. public abstract class Binding : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding> Inheritance object XmlUnknown FeedElement Binding Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> Derived EnvironmentBinding ExecutableInBinding OverlayBinding Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(object) FeedElement.Equals(FeedElement) FeedElement.GetHashCode() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Bindings can appear in Dependencys, in which case they tell a component how to find its dependency, or in Element, where they tell a component how to find itself. Methods Clone() Creates a deep copy of this Binding instance. public abstract Binding Clone() Returns Binding The new copy of the Binding. Normalize() Converts legacy elements, sets default values, etc.. public virtual void Normalize() Exceptions InvalidDataException A required property is not set or invalid."
  },
  "api/ZeroInstall.Model.Capabilities.AppRegistration.html": {
    "href": "api/ZeroInstall.Model.Capabilities.AppRegistration.html",
    "title": "Class AppRegistration | Zero Install .NET API",
    "summary": "Class AppRegistration Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Indicates that an application should be listed in the \"Set your Default Programs\" UI (Windows Vista and later). [Serializable] [Equatable] public sealed class AppRegistration : Capability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<AppRegistration> Inheritance object XmlUnknown Capability AppRegistration Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<AppRegistration> Inherited Members Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks The actual integration information is pulled from the other Capabilitys. Properties CapabilityRegPath The registry path relative to HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE which should be used to store the application's capability registration information. public required string CapabilityRegPath { get; set; } Property Value string ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. WindowsMachineWideOnly Indicates whether this capability can be registered only machine-wide and not per-user on Windows systems. public override bool WindowsMachineWideOnly { get; } Property Value bool Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the capability in the form \"CapabilityRegPath\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(AppRegistration?, AppRegistration?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AppRegistration? left, AppRegistration? right) Parameters left AppRegistration The left object right AppRegistration The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AppRegistration?, AppRegistration?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AppRegistration? left, AppRegistration? right) Parameters left AppRegistration The left object right AppRegistration The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.AutoPlay.html": {
    "href": "api/ZeroInstall.Model.Capabilities.AutoPlay.html",
    "title": "Class AutoPlay | Zero Install .NET API",
    "summary": "Class AutoPlay Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll An application's ability to handle one or more AutoPlay events. [Serializable] [Equatable] public sealed class AutoPlay : IconCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability>, IEquatable<AutoPlay> Inheritance object XmlUnknown Capability DefaultCapability IconCapability AutoPlay Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> IEquatable<AutoPlay> Inherited Members IconCapability.Descriptions IconCapability.Icons IconCapability.GetIcon(string) DefaultCapability.ExplicitOnly Capability.WindowsMachineWideOnly Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Events The IDs of the events this action can handle. [Browsable(false)] [OrderedEquality] public List<AutoPlayEvent> Events { get; } Property Value List<AutoPlayEvent> Provider The name of the application as shown in the AutoPlay selection list. public required string Provider { get; set; } Property Value string Verb The command to execute when the handler gets called. [Browsable(false)] public required Verb Verb { get; set; } Property Value Verb Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the capability in the form \"ID\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(AutoPlay?, AutoPlay?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AutoPlay? left, AutoPlay? right) Parameters left AutoPlay The left object right AutoPlay The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AutoPlay?, AutoPlay?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AutoPlay? left, AutoPlay? right) Parameters left AutoPlay The left object right AutoPlay The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.AutoPlayEvent.html": {
    "href": "api/ZeroInstall.Model.Capabilities.AutoPlayEvent.html",
    "title": "Class AutoPlayEvent | Zero Install .NET API",
    "summary": "Class AutoPlayEvent Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll A specific AutoPlay event such as \"Audio CD inserted\". [Serializable] [Equatable] public class AutoPlayEvent : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<AutoPlayEvent>, IEquatable<AutoPlayEvent> Inheritance object XmlUnknown AutoPlayEvent Implements IEquatable<XmlUnknown> ICloneable<AutoPlayEvent> IEquatable<AutoPlayEvent> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields NameBurnBluRay Canonical Name. public const string NameBurnBluRay = \"HandleBDBurningOnArrival\" Field Value string NameBurnCD Canonical Name. public const string NameBurnCD = \"HandleCDBurningOnArrival\" Field Value string NameBurnDvd Canonical Name. public const string NameBurnDvd = \"HandleDVDBurningOnArrival\" Field Value string NamePlayBluRay Canonical Name. public const string NamePlayBluRay = \"PlayBluRayOnArrival\" Field Value string NamePlayCDAudio Canonical Name. public const string NamePlayCDAudio = \"PlayCDAudioOnArrival\" Field Value string NamePlayDvdAudioO Canonical Name. public const string NamePlayDvdAudioO = \"PlayDVDAudioOnArrival\" Field Value string NamePlayDvdMovie Canonical Name. public const string NamePlayDvdMovie = \"PlayDVDMovieOnArrival\" Field Value string NamePlayMusicFiles Canonical Name. public const string NamePlayMusicFiles = \"PlayMusicFilesOnArrival\" Field Value string NamePlaySuperVideoCDMovie Canonical Name. public const string NamePlaySuperVideoCDMovie = \"PlaySuperVideoCDMovieOnArrival\" Field Value string NamePlayVideoCDMovie Canonical Name. public const string NamePlayVideoCDMovie = \"PlayVideoCDMovieOnArrival\" Field Value string NamePlayVideoFiles Canonical Name. public const string NamePlayVideoFiles = \"PlayVideoFilesOnArrival\" Field Value string Properties Name The name of the event. May only contain alphanumeric characters, spaces ( ), dots (.), underscores (_), hyphens (-) and plus signs (+). public required string Name { get; set; } Property Value string Methods Clone() Creates a deep copy of this AutoPlayEvent instance. public AutoPlayEvent Clone() Returns AutoPlayEvent The new copy of the AutoPlayEvent. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(AutoPlayEvent?) protected bool Equals(AutoPlayEvent? other) Parameters other AutoPlayEvent Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the event in the form \"Name\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(AutoPlayEvent?, AutoPlayEvent?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(AutoPlayEvent? left, AutoPlayEvent? right) Parameters left AutoPlayEvent The left object right AutoPlayEvent The right object Returns bool true if the objects are equal; otherwise, false. operator !=(AutoPlayEvent?, AutoPlayEvent?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(AutoPlayEvent? left, AutoPlayEvent? right) Parameters left AutoPlayEvent The left object right AutoPlayEvent The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.BrowserExtension.html": {
    "href": "api/ZeroInstall.Model.Capabilities.BrowserExtension.html",
    "title": "Class BrowserExtension | Zero Install .NET API",
    "summary": "Class BrowserExtension Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll A browser extension. [Serializable] [Equatable] public class BrowserExtension : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<BrowserExtension>, IEquatable<BrowserExtension> Inheritance object XmlUnknown BrowserExtension Implements IEquatable<XmlUnknown> ICloneable<BrowserExtension> IEquatable<BrowserExtension> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ID The ID of the browser extension, without prefixes like chrome-extension://. public required string ID { get; set; } Property Value string Methods Clone() Creates a deep copy of this BrowserExtension instance. public BrowserExtension Clone() Returns BrowserExtension Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(BrowserExtension?) protected bool Equals(BrowserExtension? other) Parameters other BrowserExtension Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the extension in the form \"ID\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(BrowserExtension?, BrowserExtension?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(BrowserExtension? left, BrowserExtension? right) Parameters left BrowserExtension The left object right BrowserExtension The right object Returns bool true if the objects are equal; otherwise, false. operator !=(BrowserExtension?, BrowserExtension?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(BrowserExtension? left, BrowserExtension? right) Parameters left BrowserExtension The left object right BrowserExtension The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.BrowserNativeMessaging.html": {
    "href": "api/ZeroInstall.Model.Capabilities.BrowserNativeMessaging.html",
    "title": "Class BrowserNativeMessaging | Zero Install .NET API",
    "summary": "Class BrowserNativeMessaging Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll An application's ability to act as a browser native messaging host. [Serializable] [Equatable] public sealed class BrowserNativeMessaging : Capability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<BrowserNativeMessaging> Inheritance object XmlUnknown Capability BrowserNativeMessaging Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<BrowserNativeMessaging> Inherited Members Capability.WindowsMachineWideOnly Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BrowserExtensions List of browser extensions that should have access to the native messaging host. [Browsable(false)] [OrderedEquality] public List<BrowserExtension> BrowserExtensions { get; } Property Value List<BrowserExtension> Browsers The browsers the native messaging host can be registered in. [Browsable(false)] [OrderedEquality] public List<string> Browsers { get; } Property Value List<string> See Also KnownBrowsers BrowsersString Used for XML serialization. [TypeConverter(typeof(BrowserNameConverter))] [IgnoreEquality] public string BrowsersString { get; set; } Property Value string See Also Browsers Command The name of the command in the Feed to use; leave null for NameRun. [TypeConverter(typeof(CommandNameConverter))] public string? Command { get; set; } Property Value string ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Name The name used to call the native messaging host from browser extensions. public required string Name { get; set; } Property Value string Remarks Can only contain lowercase alphanumeric characters, underscores and dots. Can't start or end with a dot, and a dot can't be followed by another dot. Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the capability in the form \"Browser: Name => Command\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(BrowserNativeMessaging?, BrowserNativeMessaging?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(BrowserNativeMessaging? left, BrowserNativeMessaging? right) Parameters left BrowserNativeMessaging The left object right BrowserNativeMessaging The right object Returns bool true if the objects are equal; otherwise, false. operator !=(BrowserNativeMessaging?, BrowserNativeMessaging?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(BrowserNativeMessaging? left, BrowserNativeMessaging? right) Parameters left BrowserNativeMessaging The left object right BrowserNativeMessaging The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.Capability.html": {
    "href": "api/ZeroInstall.Model.Capabilities.Capability.html",
    "title": "Class Capability | Zero Install .NET API",
    "summary": "Class Capability Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll A capability tells the desktop environment what an application can do and in which fashion this can be represented to the user. [Equatable] public abstract class Capability : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability> Inheritance object XmlUnknown Capability Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> Derived AppRegistration BrowserNativeMessaging ComServer DefaultCapability RemoveHook Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public abstract IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. ID An ID that differentiates this capability from other capabilities of the same type within the feed. May only contain alphanumeric characters, spaces ( ), dots (.), underscores (_), hyphens (-) and plus signs (+). public required string ID { get; set; } Property Value string Remarks Also serves as a programmatic identifier within the desktop environment. In case of conflicts, the first capability listed with a specific ID will take precedence. WindowsMachineWideOnly Indicates whether this capability can be registered only machine-wide and not per-user on Windows systems. [Browsable(false)] [IgnoreEquality] public virtual bool WindowsMachineWideOnly { get; } Property Value bool Methods Clone() Creates a deep copy of this Capability instance. public abstract Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Capability?) protected bool Equals(Capability? other) Parameters other Capability Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public virtual void Normalize() Exceptions InvalidDataException A required property is not set or invalid. Operators operator ==(Capability?, Capability?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Capability? left, Capability? right) Parameters left Capability The left object right Capability The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Capability?, Capability?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Capability? left, Capability? right) Parameters left Capability The left object right Capability The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.CapabilityList.html": {
    "href": "api/ZeroInstall.Model.Capabilities.CapabilityList.html",
    "title": "Class CapabilityList | Zero Install .NET API",
    "summary": "Class CapabilityList Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Groups a number of application Capabilitys (for a specific operating system) that can be registered in a desktop environment. [Serializable] [Equatable] public sealed class CapabilityList : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<CapabilityList>, IEquatable<CapabilityList> Inheritance object XmlUnknown CapabilityList Implements IEquatable<XmlUnknown> ICloneable<CapabilityList> IEquatable<CapabilityList> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields XmlNamespace The XML namespace used for storing application capabilities. public const string XmlNamespace = \"http://0install.de/schema/desktop-integration/capabilities\" Field Value string XsdLocation The URI to retrieve an XSD containing the XML Schema information for this class in serialized form. public const string XsdLocation = \"https://docs.0install.net/specifications/capabilities.xsd\" Field Value string Properties Entries A list of Capabilitys. [Browsable(false)] [OrderedEquality] public List<Capability> Entries { get; } Property Value List<Capability> OS Determines for which operating system the Capabilitys are applicable. public OS OS { get; set; } Property Value OS Methods Clone() Creates a deep copy of this CapabilityList instance. public CapabilityList Clone() Returns CapabilityList The new copy of the CapabilityList. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetCapability<T>(string) Retrieves the first Capability that matches a specific type and ID. Safe for missing elements. public T? GetCapability<T>(string id) where T : Capability Parameters id string The ID to match. Returns T The first matching Capability; null if no match was found. Type Parameters T The capability type to match. Exceptions KeyNotFoundException No capability matching id and T was found. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the capability list in the form \"OS\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(CapabilityList?, CapabilityList?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(CapabilityList? left, CapabilityList? right) Parameters left CapabilityList The left object right CapabilityList The right object Returns bool true if the objects are equal; otherwise, false. operator !=(CapabilityList?, CapabilityList?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(CapabilityList? left, CapabilityList? right) Parameters left CapabilityList The left object right CapabilityList The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.CapabilityListExtensions.html": {
    "href": "api/ZeroInstall.Model.Capabilities.CapabilityListExtensions.html",
    "title": "Class CapabilityListExtensions | Zero Install .NET API",
    "summary": "Class CapabilityListExtensions Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Contains extension methods for CapabilityLists. public static class CapabilityListExtensions Inheritance object CapabilityListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompatibleCapabilities(IEnumerable<CapabilityList>) Flattens a set of CapabilityLists into a single stream of Capabilitys, filtering out OSes that do not match CurrentSystem. [LinqTunnel] public static IEnumerable<Capability> CompatibleCapabilities(this IEnumerable<CapabilityList> capabilityLists) Parameters capabilityLists IEnumerable<CapabilityList> Returns IEnumerable<Capability>"
  },
  "api/ZeroInstall.Model.Capabilities.ComServer.html": {
    "href": "api/ZeroInstall.Model.Capabilities.ComServer.html",
    "title": "Class ComServer | Zero Install .NET API",
    "summary": "Class ComServer Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll An application's ability to act as a COM server. [Serializable] [Equatable] public sealed class ComServer : Capability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<ComServer> Inheritance object XmlUnknown Capability ComServer Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<ComServer> Inherited Members Capability.WindowsMachineWideOnly Capability.ID Capability.Normalize() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the capability in the form \"-\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ComServer?, ComServer?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ComServer? left, ComServer? right) Parameters left ComServer The left object right ComServer The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ComServer?, ComServer?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ComServer? left, ComServer? right) Parameters left ComServer The left object right ComServer The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.ContextMenu.html": {
    "href": "api/ZeroInstall.Model.Capabilities.ContextMenu.html",
    "title": "Class ContextMenu | Zero Install .NET API",
    "summary": "Class ContextMenu Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll An entry in the file manager's context menu for all file types. [Serializable] [Equatable] public sealed class ContextMenu : VerbCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability>, IEquatable<VerbCapability>, IEquatable<ContextMenu> Inheritance object XmlUnknown Capability DefaultCapability IconCapability VerbCapability ContextMenu Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> IEquatable<VerbCapability> IEquatable<ContextMenu> Inherited Members VerbCapability.Verbs VerbCapability.Normalize() IconCapability.Descriptions IconCapability.Icons IconCapability.GetIcon(string) DefaultCapability.ExplicitOnly Capability.WindowsMachineWideOnly Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Extensions A list of file extensions this context menu entry is displayed for. Only applicable when Target is Files. The context menu is shown for all file types when this empty. [Browsable(false)] [OrderedEquality] public List<FileTypeExtension> Extensions { get; } Property Value List<FileTypeExtension> Target Controls which file system object types this context menu entry is displayed for. public ContextMenuTarget Target { get; set; } Property Value ContextMenuTarget Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the capability in the form \"ID\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ContextMenu?, ContextMenu?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ContextMenu? left, ContextMenu? right) Parameters left ContextMenu The left object right ContextMenu The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ContextMenu?, ContextMenu?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ContextMenu? left, ContextMenu? right) Parameters left ContextMenu The left object right ContextMenu The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.ContextMenuTarget.html": {
    "href": "api/ZeroInstall.Model.Capabilities.ContextMenuTarget.html",
    "title": "Enum ContextMenuTarget | Zero Install .NET API",
    "summary": "Enum ContextMenuTarget Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Describes how important a dependency is (i.e. whether ignoring it is an option). public enum ContextMenuTarget Fields All = 3 The context menu entry is displayed for all filesystem objects (files and directories). Directories = 2 The context menu entry is displayed for all directories. ExecutableFiles = 1 The context menu entry is displayed for executable files. Files = 0 The context menu entry is displayed for all files."
  },
  "api/ZeroInstall.Model.Capabilities.DefaultCapability.html": {
    "href": "api/ZeroInstall.Model.Capabilities.DefaultCapability.html",
    "title": "Class DefaultCapability | Zero Install .NET API",
    "summary": "Class DefaultCapability Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Abstract base class for capabilities that can be applied as default handlers for something at the user's request. [Equatable] public abstract class DefaultCapability : Capability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability> Inheritance object XmlUnknown Capability DefaultCapability Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> Derived IconCapability Inherited Members Capability.WindowsMachineWideOnly Capability.ID Capability.ConflictIDs Capability.Normalize() Capability.Clone() Capability.Equals(Capability) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ExplicitOnly When set to true this capability is not applied as a default handler without explicit confirmation from the user. public bool ExplicitOnly { get; set; } Property Value bool Remarks Use this to exclude exotic capabilities from default integration categories. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(DefaultCapability?) protected bool Equals(DefaultCapability? other) Parameters other DefaultCapability Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DefaultCapability?, DefaultCapability?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DefaultCapability? left, DefaultCapability? right) Parameters left DefaultCapability The left object right DefaultCapability The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DefaultCapability?, DefaultCapability?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DefaultCapability? left, DefaultCapability? right) Parameters left DefaultCapability The left object right DefaultCapability The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.DefaultProgram.html": {
    "href": "api/ZeroInstall.Model.Capabilities.DefaultProgram.html",
    "title": "Class DefaultProgram | Zero Install .NET API",
    "summary": "Class DefaultProgram Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Can act as the default provider for a well-known service such web-browser, e-mail client. [Serializable] [Equatable] public sealed class DefaultProgram : VerbCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability>, IEquatable<VerbCapability>, IEquatable<DefaultProgram> Inheritance object XmlUnknown Capability DefaultCapability IconCapability VerbCapability DefaultProgram Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> IEquatable<VerbCapability> IEquatable<DefaultProgram> Inherited Members VerbCapability.Verbs IconCapability.Descriptions IconCapability.Icons IconCapability.GetIcon(string) DefaultCapability.ExplicitOnly Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ServiceCalender Canonical Service for calender tools. public const string ServiceCalender = \"Calender\" Field Value string ServiceContacts Canonical Service for address books. public const string ServiceContacts = \"Contacts\" Field Value string ServiceInternet Canonical Service for web browsers. public const string ServiceInternet = \"StartMenuInternet\" Field Value string ServiceInternetCall Canonical Service for internet call tools. public const string ServiceInternetCall = \"Internet Call\" Field Value string ServiceJava Canonical Service for Java Virtual Machines. public const string ServiceJava = \"JVM\" Field Value string ServiceMail Canonical Service for mail clients. public const string ServiceMail = \"Mail\" Field Value string ServiceMedia Canonical Service for media players. public const string ServiceMedia = \"Media\" Field Value string ServiceMessenger Canonical Service for instant messengers. public const string ServiceMessenger = \"IM\" Field Value string Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. InstallCommands Lists the commands the application registers for use by Windows' \"Set Program Access and Defaults\". Will be transparently replaced with Zero Install commands at runtime. public InstallCommands InstallCommands { get; set; } Property Value InstallCommands Remarks These strings are used for registry filtering. They are never actually executed. Service The name of the service the application provides. Well-known values on Windows are: Mail, Media, IM, JVM, Calender, Contacts, Internet Call public required string Service { get; set; } Property Value string WindowsMachineWideOnly Indicates whether this capability can be registered only machine-wide and not per-user on Windows systems. public override bool WindowsMachineWideOnly { get; } Property Value bool Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the capability in the form \"Service (ID)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(DefaultProgram?, DefaultProgram?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DefaultProgram? left, DefaultProgram? right) Parameters left DefaultProgram The left object right DefaultProgram The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DefaultProgram?, DefaultProgram?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DefaultProgram? left, DefaultProgram? right) Parameters left DefaultProgram The left object right DefaultProgram The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.FileType.html": {
    "href": "api/ZeroInstall.Model.Capabilities.FileType.html",
    "title": "Class FileType | Zero Install .NET API",
    "summary": "Class FileType Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll An application's ability to open a certain file type. [Serializable] [Equatable] public sealed class FileType : VerbCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability>, IEquatable<VerbCapability>, IEquatable<FileType> Inheritance object XmlUnknown Capability DefaultCapability IconCapability VerbCapability FileType Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> IEquatable<VerbCapability> IEquatable<FileType> Inherited Members VerbCapability.Verbs IconCapability.Descriptions IconCapability.Icons IconCapability.GetIcon(string) DefaultCapability.ExplicitOnly Capability.WindowsMachineWideOnly Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Extensions A list of all file extensions associated with this file type. [Browsable(false)] [OrderedEquality] public List<FileTypeExtension> Extensions { get; } Property Value List<FileTypeExtension> Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the capability in the form \"ID\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(FileType?, FileType?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FileType? left, FileType? right) Parameters left FileType The left object right FileType The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FileType?, FileType?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FileType? left, FileType? right) Parameters left FileType The left object right FileType The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.FileTypeExtension.html": {
    "href": "api/ZeroInstall.Model.Capabilities.FileTypeExtension.html",
    "title": "Class FileTypeExtension | Zero Install .NET API",
    "summary": "Class FileTypeExtension Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll A specific file extension used to identify a file type. [Serializable] [Equatable] public class FileTypeExtension : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<FileTypeExtension>, IEquatable<FileTypeExtension> Inheritance object XmlUnknown FileTypeExtension Implements IEquatable<XmlUnknown> ICloneable<FileTypeExtension> IEquatable<FileTypeExtension> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields TypeApplication Canonical PerceivedType. public const string TypeApplication = \"application\" Field Value string TypeAudio Canonical PerceivedType. public const string TypeAudio = \"audio\" Field Value string TypeCompressed Canonical PerceivedType. public const string TypeCompressed = \"compressed\" Field Value string TypeContacts Canonical PerceivedType. public const string TypeContacts = \"contacts\" Field Value string TypeDocument Canonical PerceivedType. public const string TypeDocument = \"document\" Field Value string TypeFolder Canonical PerceivedType. public const string TypeFolder = \"folder\" Field Value string TypeGameMedia Canonical PerceivedType. public const string TypeGameMedia = \"gamemedia\" Field Value string TypeImage Canonical PerceivedType. public const string TypeImage = \"image\" Field Value string TypeSystem Canonical PerceivedType. public const string TypeSystem = \"system\" Field Value string TypeText Canonical PerceivedType. public const string TypeText = \"text\" Field Value string TypeVideo Canonical PerceivedType. public const string TypeVideo = \"video\" Field Value string Properties MimeType The MIME type associated with the file extension. public string? MimeType { get; set; } Property Value string PerceivedType Defines the broad category of file types this extension falls into. Well-known values on Windows are: folder, text, image, audio, video, compressed, document, system, application public string? PerceivedType { get; set; } Property Value string Value The file extension including the leading dot (e.g., \".jpg\"). public required string Value { get; set; } Property Value string Methods Clone() Creates a deep copy of this FileTypeExtension instance. public FileTypeExtension Clone() Returns FileTypeExtension The new copy of the FileTypeExtension. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(FileTypeExtension?) protected bool Equals(FileTypeExtension? other) Parameters other FileTypeExtension Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the extension in the form \"Value (MimeType)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(FileTypeExtension?, FileTypeExtension?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FileTypeExtension? left, FileTypeExtension? right) Parameters left FileTypeExtension The left object right FileTypeExtension The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FileTypeExtension?, FileTypeExtension?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FileTypeExtension? left, FileTypeExtension? right) Parameters left FileTypeExtension The left object right FileTypeExtension The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.IconCapability.html": {
    "href": "api/ZeroInstall.Model.Capabilities.IconCapability.html",
    "title": "Class IconCapability | Zero Install .NET API",
    "summary": "Class IconCapability Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Abstract base class for capabilities that can have multiple Icons and descriptions. [Serializable] [Equatable] public abstract class IconCapability : DefaultCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability> Inheritance object XmlUnknown Capability DefaultCapability IconCapability Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> Derived AutoPlay VerbCapability Inherited Members DefaultCapability.ExplicitOnly DefaultCapability.Equals(DefaultCapability) Capability.WindowsMachineWideOnly Capability.ID Capability.ConflictIDs Capability.Normalize() Capability.Clone() Capability.Equals(Capability) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Descriptions Full descriptions for different languages, which can be several paragraphs long. [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Descriptions { get; } Property Value LocalizableStringCollection Icons Zero or more icons to represent the capability. Used for things like file icons. [Browsable(false)] [OrderedEquality] public List<Icon> Icons { get; } Property Value List<Icon> Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(IconCapability?) protected bool Equals(IconCapability? other) Parameters other IconCapability Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetIcon(string) Returns the first icon with a specific MIME type. public Icon? GetIcon(string mimeType) Parameters mimeType string The MimeType to try to find. Will only return exact matches. Returns Icon The best matching icon that was found or null if no matching icon was found. Operators operator ==(IconCapability?, IconCapability?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(IconCapability? left, IconCapability? right) Parameters left IconCapability The left object right IconCapability The right object Returns bool true if the objects are equal; otherwise, false. operator !=(IconCapability?, IconCapability?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(IconCapability? left, IconCapability? right) Parameters left IconCapability The left object right IconCapability The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.InstallCommands.html": {
    "href": "api/ZeroInstall.Model.Capabilities.InstallCommands.html",
    "title": "Struct InstallCommands | Zero Install .NET API",
    "summary": "Struct InstallCommands Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Lists the commands the application normally registers for use by Windows' \"Set Program Access and Defaults\". Used by registry virtualization to stand in for the actual Zero Install commands at runtime. [TypeConverter(typeof(InstallCommandsConverter))] [Serializable] public record struct InstallCommands : IEquatable<InstallCommands> Implements IEquatable<InstallCommands> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors InstallCommands(string?, string?, string?, string?, string?, string?) Lists the commands the application normally registers for use by Windows' \"Set Program Access and Defaults\". Used by registry virtualization to stand in for the actual Zero Install commands at runtime. public InstallCommands(string? Reinstall, string? ReinstallArgs, string? ShowIcons, string? ShowIconsArgs, string? HideIcons, string? HideIconsArgs) Parameters Reinstall string The path (relative to the installation directory) to the executable used to set an application as the default program without any arguments. ReinstallArgs string Additional arguments for the executable specified in Reinstall. ShowIcons string The path (relative to the installation directory) to the executable used to create icons/shortcuts to the application without any arguments. ShowIconsArgs string Additional arguments for the executable specified in ShowIcons. HideIcons string The path (relative to the installation directory) to the executable used to remove icons/shortcuts to the application without any arguments. HideIconsArgs string Additional arguments for the executable specified in HideIcons. Properties HideIcons The path (relative to the installation directory) to the executable used to remove icons/shortcuts to the application without any arguments. public string? HideIcons { readonly get; set; } Property Value string HideIconsArgs Additional arguments for the executable specified in HideIcons. public string? HideIconsArgs { readonly get; set; } Property Value string Reinstall The path (relative to the installation directory) to the executable used to set an application as the default program without any arguments. public string? Reinstall { readonly get; set; } Property Value string ReinstallArgs Additional arguments for the executable specified in Reinstall. public string? ReinstallArgs { readonly get; set; } Property Value string ShowIcons The path (relative to the installation directory) to the executable used to create icons/shortcuts to the application without any arguments. public string? ShowIcons { readonly get; set; } Property Value string ShowIconsArgs Additional arguments for the executable specified in ShowIcons. public string? ShowIconsArgs { readonly get; set; } Property Value string"
  },
  "api/ZeroInstall.Model.Capabilities.KnownBrowsers.html": {
    "href": "api/ZeroInstall.Model.Capabilities.KnownBrowsers.html",
    "title": "Class KnownBrowsers | Zero Install .NET API",
    "summary": "Class KnownBrowsers Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Well-known web broswers. public static class KnownBrowsers Inheritance object KnownBrowsers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields All public static readonly string[] All Field Value string[] Brave public const string Brave = \"Brave\" Field Value string Chrome public const string Chrome = \"Chrome\" Field Value string Chromium public const string Chromium = \"Chromium\" Field Value string Edge public const string Edge = \"Edge\" Field Value string Firefox public const string Firefox = \"Firefox\" Field Value string Opera public const string Opera = \"Opera\" Field Value string Vivaldi public const string Vivaldi = \"Vivaldi\" Field Value string"
  },
  "api/ZeroInstall.Model.Capabilities.KnownProtocolPrefix.html": {
    "href": "api/ZeroInstall.Model.Capabilities.KnownProtocolPrefix.html",
    "title": "Class KnownProtocolPrefix | Zero Install .NET API",
    "summary": "Class KnownProtocolPrefix Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Names a well-known protocol prefix. Used for protocols that are shared across many applications (e.g. HTTP, FTP) but not for application-specific protocols. [Serializable] [Equatable] public class KnownProtocolPrefix : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<KnownProtocolPrefix>, IEquatable<KnownProtocolPrefix> Inheritance object XmlUnknown KnownProtocolPrefix Implements IEquatable<XmlUnknown> ICloneable<KnownProtocolPrefix> IEquatable<KnownProtocolPrefix> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Value The value of the prefix (e.g. \"http\"). public required string Value { get; set; } Property Value string Methods Clone() Creates a deep copy of this KnownProtocolPrefix instance. public KnownProtocolPrefix Clone() Returns KnownProtocolPrefix The new copy of the KnownProtocolPrefix. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(KnownProtocolPrefix?) protected bool Equals(KnownProtocolPrefix? other) Parameters other KnownProtocolPrefix Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the prefix in the form \"Value\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(KnownProtocolPrefix?, KnownProtocolPrefix?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(KnownProtocolPrefix? left, KnownProtocolPrefix? right) Parameters left KnownProtocolPrefix The left object right KnownProtocolPrefix The right object Returns bool true if the objects are equal; otherwise, false. operator !=(KnownProtocolPrefix?, KnownProtocolPrefix?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(KnownProtocolPrefix? left, KnownProtocolPrefix? right) Parameters left KnownProtocolPrefix The left object right KnownProtocolPrefix The right object Returns bool true if the objects are not equal; otherwise, false. See Also KnownPrefixes"
  },
  "api/ZeroInstall.Model.Capabilities.RemoveHook.html": {
    "href": "api/ZeroInstall.Model.Capabilities.RemoveHook.html",
    "title": "Class RemoveHook | Zero Install .NET API",
    "summary": "Class RemoveHook Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll A hook/callback into the application to be called during 0install remove. [Serializable] [Equatable] public sealed class RemoveHook : Capability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<RemoveHook> Inheritance object XmlUnknown Capability RemoveHook Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<RemoveHook> Inherited Members Capability.WindowsMachineWideOnly Capability.ID Capability.Normalize() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Arguments Command-line arguments to be passed to the command. Will be automatically escaped to allow proper concatenation of multiple arguments containing spaces. [Browsable(false)] [OrderedEquality] public List<Arg> Arguments { get; } Property Value List<Arg> Command The name of the command in the Feed to use when a removal of the app is requested; leave null for NameRun. [TypeConverter(typeof(CommandNameConverter))] public string? Command { get; set; } Property Value string ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the capability in the form \"Command\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(RemoveHook?, RemoveHook?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(RemoveHook? left, RemoveHook? right) Parameters left RemoveHook The left object right RemoveHook The right object Returns bool true if the objects are equal; otherwise, false. operator !=(RemoveHook?, RemoveHook?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(RemoveHook? left, RemoveHook? right) Parameters left RemoveHook The left object right RemoveHook The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.UrlProtocol.html": {
    "href": "api/ZeroInstall.Model.Capabilities.UrlProtocol.html",
    "title": "Class UrlProtocol | Zero Install .NET API",
    "summary": "Class UrlProtocol Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll An application's ability to handle a certain URL protocol such as HTTP. [Serializable] [Equatable] public sealed class UrlProtocol : VerbCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability>, IEquatable<VerbCapability>, IEquatable<UrlProtocol> Inheritance object XmlUnknown Capability DefaultCapability IconCapability VerbCapability UrlProtocol Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> IEquatable<VerbCapability> IEquatable<UrlProtocol> Inherited Members VerbCapability.Verbs IconCapability.Descriptions IconCapability.Icons IconCapability.GetIcon(string) DefaultCapability.ExplicitOnly Capability.WindowsMachineWideOnly Capability.ID XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ConflictIDs Identifiers from a namespace global to all Capabilitys. Collisions in this namespace indicate that the concerned Capabilitys are in conflict cannot be registered on a single system at the same time. [Browsable(false)] [IgnoreEquality] public override IEnumerable<string> ConflictIDs { get; } Property Value IEnumerable<string> Remarks These identifiers are not guaranteed to stay the same between versions. They should not be stored in files but instead always generated on demand. KnownPrefixes A well-known protocol prefix such as \"http\". Should be empty and set in ID instead if it is a custom protocol. [Browsable(false)] [OrderedEquality] public List<KnownProtocolPrefix> KnownPrefixes { get; } Property Value List<KnownProtocolPrefix> Methods Clone() Creates a deep copy of this Capability instance. public override Capability Clone() Returns Capability The new copy of the Capability. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the capability in the form \"ID\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(UrlProtocol?, UrlProtocol?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(UrlProtocol? left, UrlProtocol? right) Parameters left UrlProtocol The left object right UrlProtocol The right object Returns bool true if the objects are equal; otherwise, false. operator !=(UrlProtocol?, UrlProtocol?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(UrlProtocol? left, UrlProtocol? right) Parameters left UrlProtocol The left object right UrlProtocol The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.Verb.html": {
    "href": "api/ZeroInstall.Model.Capabilities.Verb.html",
    "title": "Class Verb | Zero Install .NET API",
    "summary": "Class Verb Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll The mapping of an action/verb (e.g. open, edit) to a Command. [Serializable] [Equatable] public sealed class Verb : XmlUnknown, IEquatable<XmlUnknown>, IDescriptionContainer, ICloneable<Verb>, IEquatable<Verb> Inheritance object XmlUnknown Verb Implements IEquatable<XmlUnknown> IDescriptionContainer ICloneable<Verb> IEquatable<Verb> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields NameEdit Canonical Name for opening a file in editing mode. public const string NameEdit = \"edit\" Field Value string NameOpen Canonical Name for opening a file. public const string NameOpen = \"open\" Field Value string NameOpenAs Canonical Name for opening a file in an application of the user's choice. public const string NameOpenAs = \"openas\" Field Value string NameOpenNew Canonical Name for opening a file in a new window. public const string NameOpenNew = \"opennew\" Field Value string NamePlay Canonical Name for opening a media file and starting playback immediately. public const string NamePlay = \"play\" Field Value string NamePreview Canonical Name for displaying a quick, simple response that allows the user to rapidly preview and dismiss items. public const string NamePreview = \"Preview\" Field Value string NamePrint Canonical Name for printing a file while displaying as little as necessary to complete the task. public const string NamePrint = \"print\" Field Value string Properties Arguments Command-line arguments to be passed to the command. Will be automatically escaped to allow proper concatenation of multiple arguments containing spaces. \"${item}\" gets replaced with the path of the file being opened. [Browsable(false)] [OrderedEquality] public List<Arg> Arguments { get; } Property Value List<Arg> ArgumentsLiteral Command-line arguments to be passed to the command in escaped form. \"%V\" gets replaced with the path of the file being opened. This is ignored if Arguments has elements. public string? ArgumentsLiteral { get; set; } Property Value string Command The name of the command in the Feed to use when launching via this capability; leave null for NameRun. [TypeConverter(typeof(CommandNameConverter))] public string? Command { get; set; } Property Value string Descriptions Full descriptions for different languages, which can be several paragraphs long. [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Descriptions { get; } Property Value LocalizableStringCollection Extended Set this to true to hide the verb in the Windows context menu unless the Shift key is pressed when opening the menu. public bool Extended { get; set; } Property Value bool Name The name of the verb. Must be an alphanumeric string. Use canonical names to get automatic localization; specify Descriptions otherwise. [TypeConverter(typeof(VerbNameConverter))] public required string Name { get; set; } Property Value string SingleElementOnly Set this to true to hide the verb if more than one element is selected. public bool SingleElementOnly { get; set; } Property Value bool Remarks Use this to help avoid running out of resources if the user opens too many files. Methods Clone() Creates a deep copy of this Verb instance. public Verb Clone() Returns Verb The new copy of the Verb. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the extension in the form \"Name = Command\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Verb?, Verb?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Verb? left, Verb? right) Parameters left Verb The left object right Verb The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Verb?, Verb?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Verb? left, Verb? right) Parameters left Verb The left object right Verb The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.VerbCapability.html": {
    "href": "api/ZeroInstall.Model.Capabilities.VerbCapability.html",
    "title": "Class VerbCapability | Zero Install .NET API",
    "summary": "Class VerbCapability Namespace ZeroInstall.Model.Capabilities Assembly ZeroInstall.Model.dll Abstract base class for capabilities that can have multiple Verbs. [Equatable] public abstract class VerbCapability : IconCapability, IEquatable<XmlUnknown>, ICloneable<Capability>, IEquatable<Capability>, IEquatable<DefaultCapability>, IIconContainer, IDescriptionContainer, IEquatable<IconCapability>, IEquatable<VerbCapability> Inheritance object XmlUnknown Capability DefaultCapability IconCapability VerbCapability Implements IEquatable<XmlUnknown> ICloneable<Capability> IEquatable<Capability> IEquatable<DefaultCapability> IIconContainer IDescriptionContainer IEquatable<IconCapability> IEquatable<VerbCapability> Derived ContextMenu DefaultProgram FileType UrlProtocol Inherited Members IconCapability.Descriptions IconCapability.Icons IconCapability.GetIcon(string) IconCapability.Equals(IconCapability) DefaultCapability.ExplicitOnly DefaultCapability.Equals(DefaultCapability) Capability.WindowsMachineWideOnly Capability.ID Capability.ConflictIDs Capability.Clone() Capability.Equals(Capability) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Verbs A list of all available operations for the element. [Browsable(false)] [OrderedEquality] public List<Verb> Verbs { get; } Property Value List<Verb> Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(VerbCapability?) protected bool Equals(VerbCapability? other) Parameters other VerbCapability Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. Operators operator ==(VerbCapability?, VerbCapability?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(VerbCapability? left, VerbCapability? right) Parameters left VerbCapability The left object right VerbCapability The right object Returns bool true if the objects are equal; otherwise, false. operator !=(VerbCapability?, VerbCapability?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(VerbCapability? left, VerbCapability? right) Parameters left VerbCapability The left object right VerbCapability The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Capabilities.html": {
    "href": "api/ZeroInstall.Model.Capabilities.html",
    "title": "Namespace ZeroInstall.Model.Capabilities | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Model.Capabilities Extends the feed format with structures for describing application capabilities. This forms the basis for desktop integration. Classes AppRegistration Indicates that an application should be listed in the \"Set your Default Programs\" UI (Windows Vista and later). AutoPlay An application's ability to handle one or more AutoPlay events. AutoPlayEvent A specific AutoPlay event such as \"Audio CD inserted\". BrowserExtension A browser extension. BrowserNativeMessaging An application's ability to act as a browser native messaging host. Capability A capability tells the desktop environment what an application can do and in which fashion this can be represented to the user. CapabilityList Groups a number of application Capabilitys (for a specific operating system) that can be registered in a desktop environment. CapabilityListExtensions Contains extension methods for CapabilityLists. ComServer An application's ability to act as a COM server. ContextMenu An entry in the file manager's context menu for all file types. DefaultCapability Abstract base class for capabilities that can be applied as default handlers for something at the user's request. DefaultProgram Can act as the default provider for a well-known service such web-browser, e-mail client. FileType An application's ability to open a certain file type. FileTypeExtension A specific file extension used to identify a file type. IconCapability Abstract base class for capabilities that can have multiple Icons and descriptions. KnownBrowsers Well-known web broswers. KnownProtocolPrefix Names a well-known protocol prefix. Used for protocols that are shared across many applications (e.g. HTTP, FTP) but not for application-specific protocols. RemoveHook A hook/callback into the application to be called during 0install remove. UrlProtocol An application's ability to handle a certain URL protocol such as HTTP. Verb The mapping of an action/verb (e.g. open, edit) to a Command. VerbCapability Abstract base class for capabilities that can have multiple Verbs. Structs InstallCommands Lists the commands the application normally registers for use by Windows' \"Set Program Access and Defaults\". Used by registry virtualization to stand in for the actual Zero Install commands at runtime. Enums ContextMenuTarget Describes how important a dependency is (i.e. whether ignoring it is an option)."
  },
  "api/ZeroInstall.Model.Catalog.html": {
    "href": "api/ZeroInstall.Model.Catalog.html",
    "title": "Class Catalog | Zero Install .NET API",
    "summary": "Class Catalog Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Contains a list of Feeds, reduced to only contain information relevant for overview lists. [Serializable] [XmlNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")] [Equatable] public class Catalog : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<Catalog>, IEquatable<Catalog> Inheritance object XmlUnknown Catalog Implements IEquatable<XmlUnknown> ICloneable<Catalog> IEquatable<Catalog> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See also: https://docs.0install.net/specifications/catalog/ Fields SchemaLocation Provides XML Editors with location hints for XSD files. public string SchemaLocation Field Value string XmlNamespace The XML namespace used for storing feed catalogs. Used in combination with XmlNamespace. public const string XmlNamespace = \"http://0install.de/schema/injector/catalog\" Field Value string XsdLocation The URI to retrieve an XSD containing the XML Schema information for this class in serialized form. public const string XsdLocation = \"https://docs.0install.net/specifications/catalog.xsd\" Field Value string XsiSchemaLocation Provides XML Editors with location hints for XSD files. public const string XsiSchemaLocation = \"http://0install.de/schema/injector/catalog https://docs.0install.net/specifications/catalog.xsd\" Field Value string Properties Feeds A list of Feeds contained within this catalog. [Browsable(false)] [OrderedEquality] public List<Feed> Feeds { get; } Property Value List<Feed> this[FeedUri] Returns the Feed with a specific URI. public Feed this[FeedUri uri] { get; } Parameters uri FeedUri The Uri to look for. Property Value Feed The identified Feed. Exceptions KeyNotFoundException No Feed matching uri was found in Feeds. Methods Clone() Creates a deep copy of this Catalog instance. public Catalog Clone() Returns Catalog The new copy of the Catalog. ContainsFeed(FeedUri) Determines whether this catalog contains a Feed with a specific URI. public bool ContainsFeed(FeedUri uri) Parameters uri FeedUri The Uri to look for. Returns bool true if a matching feed was found; false otherwise. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Catalog?) protected bool Equals(Catalog? other) Parameters other Catalog Returns bool FindByShortName(string?) Returns the first Feed that matches a specific short name. public Feed? FindByShortName(string? shortName) Parameters shortName string The short name to look for. Must match either Name or BinaryName of NameRun. Returns Feed The first matching Feed; null if no match was found. GetFeed(FeedUri) Returns the Feed with a specific URI. Safe for missing elements. public Feed? GetFeed(FeedUri uri) Parameters uri FeedUri The Uri to look for. Returns Feed The identified Feed; null if no matching entry was found. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Normalizes the catalog and all feeds it contains. Flattens inheritance structures, converts legacy elements, sets default values, etc.. public void Normalize(FeedUri? catalogUri = null) Parameters catalogUri FeedUri The URI the catalog was originally loaded from. Exceptions NotSupportedException The catalog requires a newer version of Zero Install. InvalidDataException A required property is not set or invalid. Search(string?) Returns all Feeds that match a specific search query. public IEnumerable<Feed> Search(string? query) Parameters query string The search query. Must be contained within Name or BinaryName of NameRun. Returns IEnumerable<Feed> All Feeds matching query. Operators operator ==(Catalog?, Catalog?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Catalog? left, Catalog? right) Parameters left Catalog The left object right Catalog The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Catalog?, Catalog?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Catalog? left, Catalog? right) Parameters left Catalog The left object right Catalog The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Category.html": {
    "href": "api/ZeroInstall.Model.Category.html",
    "title": "Class Category | Zero Install .NET API",
    "summary": "Class Category Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An application category (e.g. Game or Office). Used for organizing application menus. [Serializable] [Equatable] public sealed class Category : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Category>, IEquatable<Category> Inheritance object XmlUnknown FeedElement Category Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Category> IEquatable<Category> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields WellKnownNames Well-known values for Name if TypeNamespace is empty. public static readonly string[] WellKnownNames Field Value string[] Properties Name The category name as specified by the TypeNamespace. [TypeConverter(typeof(CategoryNameConverter))] public string? Name { get; set; } Property Value string TypeNamespace If no type is given, then the category is one of the 'Main' categories defined by the freedesktop.org menu specification (http://standards.freedesktop.org/menu-spec/latest/apa.html). Otherwise, it is a URI giving the namespace for the category. public string? TypeNamespace { get; set; } Property Value string Methods Clone() Creates a plain copy of this category. public Category Clone() Returns Category The cloned category. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns Name directly. Safe for parsing! public override string ToString() Returns string Operators operator ==(Category?, Category?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Category? left, Category? right) Parameters left Category The left object right Category The right object Returns bool true if the objects are equal; otherwise, false. implicit operator Category(string) Convenience cast for turning strings into Categorys. public static implicit operator Category(string value) Parameters value string Returns Category operator !=(Category?, Category?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Category? left, Category? right) Parameters left Category The left object right Category The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Command.html": {
    "href": "api/ZeroInstall.Model.Command.html",
    "title": "Class Command | Zero Install .NET API",
    "summary": "Class Command Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A command says how to run an Implementation as a program. [Serializable] [Equatable] public class Command : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IArgBaseContainer, IBindingContainer, IDependencyContainer, ICloneable<Command>, IEquatable<Command> Inheritance object XmlUnknown FeedElement Command Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IArgBaseContainer IBindingContainer IDependencyContainer ICloneable<Command> IEquatable<Command> Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Fields NameCompile Canonical Name used by 0compile. public const string NameCompile = \"compile\" Field Value string NameRun Canonical Name corresponding to Main. public const string NameRun = \"run\" Field Value string NameRunGui Conventional Name for GUI-only versions of applications. public const string NameRunGui = \"run-gui\" Field Value string NameTest Canonical Name corresponding to SelfTest. public const string NameTest = \"test\" Field Value string Properties Arguments A list of command-line arguments to be passed to an implementation executable. [Browsable(false)] [OrderedEquality] public List<ArgBase> Arguments { get; } Property Value List<ArgBase> Bindings A list of Bindings for Implementations to locate Dependencys. [Browsable(false)] [OrderedEquality] public List<Binding> Bindings { get; } Property Value List<Binding> Dependencies A list of interfaces this command depends upon. [Browsable(false)] [OrderedEquality] public List<Dependency> Dependencies { get; } Property Value List<Dependency> Name The name of the command. Well-known names are NameRun, NameTest and NameCompile. [TypeConverter(typeof(CommandNameConverter))] public required string Name { get; set; } Property Value string Path The relative path of an executable inside the implementation that should be executed to run this command. public string? Path { get; set; } Property Value string Restrictions A list of interfaces that are restricted to specific versions when used. [Browsable(false)] [OrderedEquality] public List<Restriction> Restrictions { get; } Property Value List<Restriction> Runner A special kind of dependency: the program that is used to run this one. For example, a Python program might specify Python as its runner. [Browsable(false)] public Runner? Runner { get; set; } Property Value Runner WorkingDir Switches the working directory of a process on startup to a location within an implementation. [Browsable(false)] public WorkingDir? WorkingDir { get; set; } Property Value WorkingDir Methods Clone() Creates a deep copy of this Command instance. public Command Clone() Returns Command The new copy of the Command. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Command?) protected bool Equals(Command? other) Parameters other Command Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public virtual void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the Command in the form \"Name (Path)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Command?, Command?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Command? left, Command? right) Parameters left Command The left object right Command The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Command?, Command?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Command? left, Command? right) Parameters left Command The left object right Command The right object Returns bool true if the objects are not equal; otherwise, false. See Also Commands"
  },
  "api/ZeroInstall.Model.Constraint.html": {
    "href": "api/ZeroInstall.Model.Constraint.html",
    "title": "Class Constraint | Zero Install .NET API",
    "summary": "Class Constraint Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Restricts the set of versions from which the injector may choose an Implementation. [Serializable] [Equatable] public class Constraint : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Constraint>, IEquatable<Constraint> Inheritance object XmlUnknown FeedElement Constraint Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Constraint> IEquatable<Constraint> Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Before This version and all later versions are unsuitable. public ImplementationVersion? Before { get; set; } Property Value ImplementationVersion NotBefore This is the lowest-numbered version that can be chosen. public ImplementationVersion? NotBefore { get; set; } Property Value ImplementationVersion Methods Clone() Creates a copy of this Constraint instance. public Constraint Clone() Returns Constraint The new copy of the Constraint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Constraint?) protected bool Equals(Constraint? other) Parameters other Constraint Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the constraint in the form \"NotBefore =< Ver %lt; Before\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Constraint?, Constraint?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Constraint? left, Constraint? right) Parameters left Constraint The left object right Constraint The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Constraint?, Constraint?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Constraint? left, Constraint? right) Parameters left Constraint The left object right Constraint The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.CopyFromStep.html": {
    "href": "api/ZeroInstall.Model.CopyFromStep.html",
    "title": "Class CopyFromStep | Zero Install .NET API",
    "summary": "Class CopyFromStep Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Copies files or directories from another implementation specified elsewhere in the same feed. [Serializable] [Equatable] public sealed class CopyFromStep : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IRecipeStep, ICloneable<IRecipeStep>, IEquatable<CopyFromStep> Inheritance object XmlUnknown FeedElement CopyFromStep Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IRecipeStep ICloneable<IRecipeStep> IEquatable<CopyFromStep> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Destination The destination file or directory relative to the implementation root as a Unix-style path; null for top-level. Must be set if Source points to a file. public string? Destination { get; set; } Property Value string ID The ID of the Implementation to copy from. public string? ID { get; set; } Property Value string Implementation Used to hold the Implementation the ID references after Normalize(FeedUri?) has been executed. [Browsable(false)] public Implementation? Implementation { get; set; } Property Value Implementation Source The source file or directory relative to the source implementation root as a Unix-style path; null or Empty for entire implementation. public string? Source { get; set; } Property Value string Methods Clone() Creates a deep copy of this CopyFromStep instance. public IRecipeStep Clone() Returns IRecipeStep The new copy of the CopyFromStep. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Converts legacy elements, sets default values, etc.. public void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. ToString() Returns the copy-from step in the form \"Copy from ID (Source => Destination)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(CopyFromStep?, CopyFromStep?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(CopyFromStep? left, CopyFromStep? right) Parameters left CopyFromStep The left object right CopyFromStep The right object Returns bool true if the objects are equal; otherwise, false. operator !=(CopyFromStep?, CopyFromStep?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(CopyFromStep? left, CopyFromStep? right) Parameters left CopyFromStep The left object right CopyFromStep The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Cpu.html": {
    "href": "api/ZeroInstall.Model.Cpu.html",
    "title": "Enum Cpu | Zero Install .NET API",
    "summary": "Enum Cpu Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Describes a CPU architecture. [TypeConverter(typeof(EnumXmlConverter<Cpu>))] public enum Cpu Extension Methods ArchitectureExtensions.Is32Bit(Cpu) ArchitectureExtensions.Is64Bit(Cpu) ArchitectureExtensions.RunsOn(Cpu, Cpu) Fields AArch64 = 10 Supports ARMv8 CPUs in 64-bit mode. All = 0 Supports all CPU architectures (e.g. developed with cross-platform language like Java). ArmV6L = 8 Supports ARMv6 CPUs in little-endian mode. ArmV7L = 9 Supports ARMv7 CPUs in little-endian mode. I386 = 1 Supports CPUs with the i386 architecture or newer (up to i686). I486 = 2 Supports CPUs with the i486 architecture or newer (up to i686). I586 = 3 Supports CPUs with the i586 architecture or newer (up to i686). I686 = 4 Supports CPUs with the i686. Ppc = 6 Supports CPUs with the PowerPC-architecture (used in older Macs). Ppc64 = 7 Requires a 64-bit capable PowerPC CPU. Source = 99 This is a source release and therefore architecture-independent. Unknown = 100 The supported CPU architecture has not been set yet. X64 = 5 Requires a x86-64 capable CPU."
  },
  "api/ZeroInstall.Model.Dependency.html": {
    "href": "api/ZeroInstall.Model.Dependency.html",
    "title": "Class Dependency | Zero Install .NET API",
    "summary": "Class Dependency Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A reference to an interface that is required as dependency. [Serializable] [Equatable] public class Dependency : Restriction, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Restriction>, IEquatable<Restriction>, IInterfaceUriBindingContainer, IInterfaceUri, IBindingContainer, ICloneable<Dependency>, IEquatable<Dependency> Inheritance object XmlUnknown FeedElement Restriction Dependency Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Restriction> IEquatable<Restriction> IInterfaceUriBindingContainer IInterfaceUri IBindingContainer ICloneable<Dependency> IEquatable<Dependency> Derived Runner Inherited Members Restriction.InterfaceUri Restriction.OS Restriction.Versions Restriction.Constraints Restriction.DistributionZeroInstall Restriction.Distributions Restriction.DistributionsString Restriction.Equals(Restriction) FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Bindings A list of Bindings for Implementations to locate Dependencys. [Browsable(false)] [OrderedEquality] public List<Binding> Bindings { get; } Property Value List<Binding> Importance Controls how important this dependency is (i.e. whether ignoring it is an option). public Importance Importance { get; set; } Property Value Importance Use This can be used to indicate that this dependency is only needed in some cases. Deprecated; use Commands instead. public string? Use { get; set; } Property Value string XmlTagName protected override string XmlTagName { get; } Property Value string Methods Clone() Creates a deep copy of this Dependency instance. public override Restriction Clone() Returns Restriction The new copy of the Dependency. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Dependency?) protected bool Equals(Dependency? other) Parameters other Dependency Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsApplicable(Requirements) Determines whether this reference is applicable for the given requirements. public override bool IsApplicable(Requirements requirements) Parameters requirements Requirements Returns bool Normalize() Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the dependency in the form \"Interface (Use)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Dependency?, Dependency?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Dependency? left, Dependency? right) Parameters left Dependency The left object right Dependency The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Dependency?, Dependency?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Dependency? left, Dependency? right) Parameters left Dependency The left object right Dependency The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.DependencyContainerExtensions.html": {
    "href": "api/ZeroInstall.Model.DependencyContainerExtensions.html",
    "title": "Class DependencyContainerExtensions | Zero Install .NET API",
    "summary": "Class DependencyContainerExtensions Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Provides extension methods for IDependencyContainer. public static class DependencyContainerExtensions Inheritance object DependencyContainerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEffectiveRestrictions(IDependencyContainer) A combination of Restrictions and Dependencies. public static IEnumerable<Restriction> GetEffectiveRestrictions(this IDependencyContainer container) Parameters container IDependencyContainer Returns IEnumerable<Restriction>"
  },
  "api/ZeroInstall.Model.Design.ArgBaseConverter.html": {
    "href": "api/ZeroInstall.Model.Design.ArgBaseConverter.html",
    "title": "Class ArgBaseConverter | Zero Install .NET API",
    "summary": "Class ArgBaseConverter Namespace ZeroInstall.Model.Design Assembly ZeroInstall.Model.dll Converts strings to Args and Args/ForEachArgs to strings. public class ArgBaseConverter : TypeConverter Inheritance object TypeConverter ArgBaseConverter Inherited Members TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetProperties(object) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValues(ITypeDescriptorContext) TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.IsValid(object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertFrom(ITypeDescriptorContext?, Type) Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context. public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. sourceType Type A Type that represents the type you want to convert from. Returns bool true if this converter can perform the conversion; otherwise, false. ConvertFrom(ITypeDescriptorContext?, CultureInfo?, object) Converts the given object to the type of this converter, using the specified context and culture information. public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. culture CultureInfo The CultureInfo to use as the current culture. value object The object to convert. Returns object An object that represents the converted value. Exceptions NotSupportedException The conversion cannot be performed. ConvertTo(ITypeDescriptorContext?, CultureInfo?, object?, Type) Converts the given value object to the specified type, using the specified context and culture information. public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. culture CultureInfo A CultureInfo. If null is passed, the current culture is assumed. value object The object to convert. destinationType Type The Type to convert the value parameter to. Returns object An object that represents the converted value. Exceptions ArgumentNullException The destinationType parameter is null. NotSupportedException The conversion cannot be performed."
  },
  "api/ZeroInstall.Model.Design.CategoryNameConverter.html": {
    "href": "api/ZeroInstall.Model.Design.CategoryNameConverter.html",
    "title": "Class CategoryNameConverter | Zero Install .NET API",
    "summary": "Class CategoryNameConverter Namespace ZeroInstall.Model.Design Assembly ZeroInstall.Model.dll public class CategoryNameConverter : StringConverter Inheritance object TypeConverter StringConverter CategoryNameConverter Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.CanConvertTo(Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetProperties(object) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.IsValid(object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetStandardValues(ITypeDescriptorContext?) Returns a collection of standard values for the data type this type converter is designed for when provided with a format context. public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. Returns TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection that holds a standard set of valid values, or null if the data type does not support a standard set of values. GetStandardValuesExclusive(ITypeDescriptorContext?) Returns whether the collection of standard values returned from GetStandardValues() is an exclusive list of possible values, using the specified context. public override bool GetStandardValuesExclusive(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. Returns bool true if the TypeConverter.StandardValuesCollection returned from GetStandardValues() is an exhaustive list of possible values; false if other values are possible. GetStandardValuesSupported(ITypeDescriptorContext?) Returns whether this object supports a standard set of values that can be picked from a list, using the specified context. public override bool GetStandardValuesSupported(ITypeDescriptorContext? context) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. Returns bool true if GetStandardValues() should be called to find a common set of values the object supports; otherwise, false."
  },
  "api/ZeroInstall.Model.Design.html": {
    "href": "api/ZeroInstall.Model.Design.html",
    "title": "Namespace ZeroInstall.Model.Design | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Model.Design TypeConverters used for serialization and to provide a better runtime experience when using PropertyGrids. Classes ArgBaseConverter Converts strings to Args and Args/ForEachArgs to strings. CategoryNameConverter"
  },
  "api/ZeroInstall.Model.DownloadRetrievalMethod.html": {
    "href": "api/ZeroInstall.Model.DownloadRetrievalMethod.html",
    "title": "Class DownloadRetrievalMethod | Zero Install .NET API",
    "summary": "Class DownloadRetrievalMethod Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents a retrieval method that downloads data from the net. [Equatable] public abstract class DownloadRetrievalMethod : RetrievalMethod, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<RetrievalMethod>, IRecipeStep, ICloneable<IRecipeStep>, IEquatable<DownloadRetrievalMethod> Inheritance object XmlUnknown FeedElement RetrievalMethod DownloadRetrievalMethod Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<RetrievalMethod> IRecipeStep ICloneable<IRecipeStep> IEquatable<DownloadRetrievalMethod> Derived Archive SingleFile Inherited Members RetrievalMethod.Clone() FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DownloadSize The effective size of the file on the server. [Browsable(false)] public virtual long DownloadSize { get; } Property Value long Href The URL to download the file from. Relative URLs are only allowed in local feed files. [Browsable(false)] public required Uri Href { get; set; } Property Value Uri Size The size of the file in bytes. The file must have the given size or it will be rejected. public long Size { get; set; } Property Value long Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(DownloadRetrievalMethod?) protected bool Equals(DownloadRetrievalMethod? other) Parameters other DownloadRetrievalMethod Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Sets missing default values and handles legacy elements. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. InvalidDataException A required property is not set or invalid. Operators operator ==(DownloadRetrievalMethod?, DownloadRetrievalMethod?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DownloadRetrievalMethod? left, DownloadRetrievalMethod? right) Parameters left DownloadRetrievalMethod The left object right DownloadRetrievalMethod The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DownloadRetrievalMethod?, DownloadRetrievalMethod?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DownloadRetrievalMethod? left, DownloadRetrievalMethod? right) Parameters left DownloadRetrievalMethod The left object right DownloadRetrievalMethod The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Element.html": {
    "href": "api/ZeroInstall.Model.Element.html",
    "title": "Class Element | Zero Install .NET API",
    "summary": "Class Element Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Abstract base class for ImplementationBase and Group. Contains those parameters that can be transferred from a Group to an Implementation. [Equatable] public abstract class Element : TargetBase, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IBindingContainer, IDependencyContainer, ICloneable<Element>, IEquatable<Element> Inheritance object XmlUnknown FeedElement TargetBase Element Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IBindingContainer IDependencyContainer ICloneable<Element> IEquatable<Element> Derived Group ImplementationBase PackageImplementation Inherited Members TargetBase.Languages TargetBase.Architecture TargetBase.CloneFromTo(TargetBase, TargetBase) TargetBase.Equals(TargetBase) FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Fields ReleaseDateFormat The Format(string, params object[]) format used by ReleasedString public const string ReleaseDateFormat = \"yyyy-MM-dd\" Field Value string ReleasedVerbatim Used to store the unparsed release date string (instead of Released) if it ContainsTemplateVariables(string). protected string? ReleasedVerbatim Field Value string Properties Bindings A list of Bindings for Implementations to locate Dependencys. [Browsable(false)] [OrderedEquality] public List<Binding> Bindings { get; } Property Value List<Binding> Commands A list of commands that can be used to launch this implementation. [Browsable(false)] [OrderedEquality] public List<Command> Commands { get; } Property Value List<Command> Remarks This will eventually replace Main and SelfTest. Dependencies A list of interfaces this implementation depends upon. [Browsable(false)] [OrderedEquality] public List<Dependency> Dependencies { get; } Property Value List<Dependency> DocDir The relative path of a directory inside the implementation that contains the package's documentation. This is the directory that would end up inside /usr/share/doc on a traditional Linux system. public string? DocDir { get; set; } Property Value string this[string] Returns the Command with a specific name. public Command? this[string name] { get; } Parameters name string The Name to look for; Empty for none. Property Value Command The first matching command; null if name is Empty. Remarks Should only be called after Normalize(FeedUri?) has been called, otherwise nested Implementations will not be considered. Exceptions KeyNotFoundException No matching Command was found. License License terms (typically a Trove category, as used on freshmeat.net). [TypeConverter(typeof(LicenseNameConverter))] public string? License { get; set; } Property Value string Main The relative path of an executable inside the implementation that should be executed by default when the interface is run. If an implementation has no main setting, then it cannot be executed without specifying one manually. This typically means that the interface is for a library. public string? Main { get; set; } Property Value string Remarks This is deprecated in favor of Commands. null corresponds to no Commands. An empty string corresponds to a Command with no Path. Released The date this implementation was made available. For development versions checked out from version control this attribute should not be present. public virtual DateTime Released { get; set; } Property Value DateTime ReleasedString The string form of Released. Only use this if the string ContainsTemplateVariables(string). public virtual string? ReleasedString { get; set; } Property Value string See Also Released Restrictions A list of interfaces that are restricted to specific versions when used. [Browsable(false)] [OrderedEquality] public List<Restriction> Restrictions { get; } Property Value List<Restriction> RolloutPercentage The percentage (0-100) of users that should treat this as Stable. May only be set if Stability is Unset or Testing. This can be used to perform staged rollouts. public virtual int RolloutPercentage { get; set; } Property Value int SelfTest The relative path of an executable inside the implementation that can be executed to test the program. The program must be non-interactive (e.g. it can't open any windows or prompt for input). It should return with an exit status of 0 if the tests pass. Any other status indicates failure. public string? SelfTest { get; set; } Property Value string Remarks This is deprecated in favor of Commands. null corresponds to no Commands. An empty string corresponds to a Command with no Path. Stability The default stability rating for this implementation. public virtual Stability Stability { get; set; } Property Value Stability Version The version number of the implementation. public virtual ImplementationVersion? Version { get; set; } Property Value ImplementationVersion VersionModifier A string to be appended to the version. The purpose of this is to allow complex version numbers (such as \"1.0-rc2\") in older versions of the injector. public virtual string? VersionModifier { get; set; } Property Value string Methods Clone() Creates a deep copy of this Element instance. public abstract Element Clone() Returns Element The new copy of the Element. CloneFromTo(Element, Element) Copies all known values from one instance to another. Helper method for instance cloning. protected static void CloneFromTo(Element from, Element to) Parameters from Element to Element ContainsCommand(string) Determines whether Commands contains a Command with a specific name. public bool ContainsCommand(string name) Parameters name string The Name to look for; Empty for none. Returns bool true if a matching command was found or if name is Empty; false otherwise. EnsureAttributes() Ensures that required values deserialized from XML attributes are set (not null). protected virtual void EnsureAttributes() Exceptions InvalidDataException A required property is not set or invalid. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Element?) protected bool Equals(Element? other) Parameters other Element Returns bool GetCommand(string) Returns the Command with a specific name. Safe for missing elements. public Command? GetCommand(string name) Parameters name string The Name to look for. Returns Command The first matching command; null if no matching one was found. Remarks Should only be called after Normalize(FeedUri?) has been called, otherwise nested Implementations will not be considered. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public virtual void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions InvalidDataException A required property is not set or invalid. Operators operator ==(Element?, Element?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Element? left, Element? right) Parameters left Element The left object right Element The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Element?, Element?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Element? left, Element? right) Parameters left Element The left object right Element The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.ElementCollectionExtensions.html": {
    "href": "api/ZeroInstall.Model.ElementCollectionExtensions.html",
    "title": "Class ElementCollectionExtensions | Zero Install .NET API",
    "summary": "Class ElementCollectionExtensions Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Provides extension methods for Element collections. public static class ElementCollectionExtensions Inheritance object ElementCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetImplementations(IReadOnlyCollection<Element>) Returns a flat list of all Implementations. public static IEnumerable<Implementation> GetImplementations(this IReadOnlyCollection<Element> elements) Parameters elements IReadOnlyCollection<Element> Returns IEnumerable<Implementation> RemoveImplementation(ICollection<Element>, string) Removes an Implementation identified by its ID. public static bool RemoveImplementation(this ICollection<Element> elements, string id) Parameters elements ICollection<Element> id string Returns bool true if the implementation was removed; false if the implementation could not be found."
  },
  "api/ZeroInstall.Model.EntryPoint.html": {
    "href": "api/ZeroInstall.Model.EntryPoint.html",
    "title": "Class EntryPoint | Zero Install .NET API",
    "summary": "Class EntryPoint Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Associates a Command with a user-friendly name and description. [Serializable] [Equatable] public sealed class EntryPoint : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IIconContainer, ISummaryContainer, IDescriptionContainer, ICloneable<EntryPoint>, IEquatable<EntryPoint> Inheritance object XmlUnknown FeedElement EntryPoint Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IIconContainer ISummaryContainer IDescriptionContainer ICloneable<EntryPoint> IEquatable<EntryPoint> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AppId The Application User Model ID; used by Windows to associate shortcuts and pinned taskbar entries with running processes. May not be longer than 128 characters and may not contain whitespace. public string? AppId { get; set; } Property Value string BinaryName The canonical name of the binary supplying the command (without file extensions). This is used to suggest suitable alias names. public string? BinaryName { get; set; } Property Value string Remarks Will default to Command when left null. Command The name of the Command this entry point represents. [TypeConverter(typeof(CommandNameConverter))] public required string Command { get; set; } Property Value string Descriptions Full descriptions for different languages, which can be several paragraphs long. [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Descriptions { get; } Property Value LocalizableStringCollection Icons Zero or more icons representing the command. Used for desktop icons, menu entries, etc.. [Browsable(false)] [OrderedEquality] public List<Icon> Icons { get; } Property Value List<Icon> Names User-friendly names for the command. If not present, Command is used instead. [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Names { get; } Property Value LocalizableStringCollection NeedsTerminal If true, indicates that the Command represented by this entry point requires a terminal in order to run. public bool NeedsTerminal { get; set; } Property Value bool SuggestAutoStart If true, indicates that this entry point should be offered as an auto-start candidate to the user. public bool SuggestAutoStart { get; set; } Property Value bool SuggestSendTo If true, indicates that this entry point should be offered as a candidate for the \"Send To\" context menu to the user. public bool SuggestSendTo { get; set; } Property Value bool Summaries Short one-line descriptions for different languages; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Summaries { get; } Property Value LocalizableStringCollection Methods Clone() Creates a deep copy of this EntryPoint instance. public EntryPoint Clone() Returns EntryPoint The new copy of the EntryPoint. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the EntryPoint in the form \"Command (BinaryName)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(EntryPoint?, EntryPoint?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(EntryPoint? left, EntryPoint? right) Parameters left EntryPoint The left object right EntryPoint The right object Returns bool true if the objects are equal; otherwise, false. operator !=(EntryPoint?, EntryPoint?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(EntryPoint? left, EntryPoint? right) Parameters left EntryPoint The left object right EntryPoint The right object Returns bool true if the objects are not equal; otherwise, false. See Also EntryPoints"
  },
  "api/ZeroInstall.Model.EnvironmentBinding.html": {
    "href": "api/ZeroInstall.Model.EnvironmentBinding.html",
    "title": "Class EnvironmentBinding | Zero Install .NET API",
    "summary": "Class EnvironmentBinding Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Make a chosen Implementation available by setting environment variables. [Serializable] [Equatable] public sealed class EnvironmentBinding : Binding, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding>, IEquatable<EnvironmentBinding> Inheritance object XmlUnknown FeedElement Binding EnvironmentBinding Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> IEquatable<EnvironmentBinding> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Default If the environment variable is not currently set then this value is used for prepending or appending. public string? Default { get; set; } Property Value string Insert The relative path of the item within the implementation to insert into the variable value. Use . to publish the root directory. public string? Insert { get; set; } Property Value string Remarks If this is set Value must be null. Mode Controls how the Insert or Value is added to the variable. public EnvironmentMode Mode { get; set; } Property Value EnvironmentMode Name The name of the environment variable. public required string Name { get; set; } Property Value string Separator Overrides the default separator character (\":\" on POSIX and \";\" on Windows). public string? Separator { get; set; } Property Value string Value A static value to set the variable to. public string? Value { get; set; } Property Value string Remarks If this is set Insert must be null. Methods Clone() Creates a deep copy of this EnvironmentBinding instance. public override Binding Clone() Returns Binding The new copy of the EnvironmentBinding. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the binding in the form \"Name = Value (Mode, Default)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(EnvironmentBinding?, EnvironmentBinding?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(EnvironmentBinding? left, EnvironmentBinding? right) Parameters left EnvironmentBinding The left object right EnvironmentBinding The right object Returns bool true if the objects are equal; otherwise, false. operator !=(EnvironmentBinding?, EnvironmentBinding?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(EnvironmentBinding? left, EnvironmentBinding? right) Parameters left EnvironmentBinding The left object right EnvironmentBinding The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.EnvironmentMode.html": {
    "href": "api/ZeroInstall.Model.EnvironmentMode.html",
    "title": "Enum EnvironmentMode | Zero Install .NET API",
    "summary": "Enum EnvironmentMode Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Controls how Insert or Value is added to a variable. public enum EnvironmentMode Fields Append = 1 The absolute path of the item is append to the end of the current value of the variable. Prepend = 0 The absolute path of the item is prepended to the current value of the variable. Replace = 2 The old value is overwritten, and the Default attribute is ignored."
  },
  "api/ZeroInstall.Model.ExecutableInBinding.html": {
    "href": "api/ZeroInstall.Model.ExecutableInBinding.html",
    "title": "Class ExecutableInBinding | Zero Install .NET API",
    "summary": "Class ExecutableInBinding Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Make a chosen Implementation available as an executable at runtime. [Equatable] public abstract class ExecutableInBinding : Binding, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding>, IEquatable<ExecutableInBinding> Inheritance object XmlUnknown FeedElement Binding ExecutableInBinding Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> IEquatable<ExecutableInBinding> Derived ExecutableInPath ExecutableInVar GenericBinding Inherited Members Binding.Clone() Binding.Normalize() FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command The name of the Command in the Implementation to launch; leave null for NameRun. [TypeConverter(typeof(CommandNameConverter))] public string? Command { get; set; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(ExecutableInBinding?) protected bool Equals(ExecutableInBinding? other) Parameters other ExecutableInBinding Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ExecutableInBinding?, ExecutableInBinding?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ExecutableInBinding? left, ExecutableInBinding? right) Parameters left ExecutableInBinding The left object right ExecutableInBinding The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ExecutableInBinding?, ExecutableInBinding?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ExecutableInBinding? left, ExecutableInBinding? right) Parameters left ExecutableInBinding The left object right ExecutableInBinding The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.ExecutableInPath.html": {
    "href": "api/ZeroInstall.Model.ExecutableInPath.html",
    "title": "Class ExecutableInPath | Zero Install .NET API",
    "summary": "Class ExecutableInPath Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Make a chosen Implementation available as an executable in the search PATH. [Serializable] [Equatable] public sealed class ExecutableInPath : ExecutableInBinding, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding>, IEquatable<ExecutableInBinding>, IEquatable<ExecutableInPath> Inheritance object XmlUnknown FeedElement Binding ExecutableInBinding ExecutableInPath Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> IEquatable<ExecutableInBinding> IEquatable<ExecutableInPath> Inherited Members ExecutableInBinding.Command FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Name The name of the executable (without file extensions). public required string Name { get; set; } Property Value string Methods Clone() Creates a deep copy of this ExecutableInPath instance. public override Binding Clone() Returns Binding The new copy of the ExecutableInPath. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the binding in the form \" Name = Command\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ExecutableInPath?, ExecutableInPath?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ExecutableInPath? left, ExecutableInPath? right) Parameters left ExecutableInPath The left object right ExecutableInPath The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ExecutableInPath?, ExecutableInPath?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ExecutableInPath? left, ExecutableInPath? right) Parameters left ExecutableInPath The left object right ExecutableInPath The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.ExecutableInVar.html": {
    "href": "api/ZeroInstall.Model.ExecutableInVar.html",
    "title": "Class ExecutableInVar | Zero Install .NET API",
    "summary": "Class ExecutableInVar Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Make a chosen Implementation available as an executable path in an environment variable. [Serializable] [Equatable] public sealed class ExecutableInVar : ExecutableInBinding, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding>, IEquatable<ExecutableInBinding>, IEquatable<ExecutableInVar> Inheritance object XmlUnknown FeedElement Binding ExecutableInBinding ExecutableInVar Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> IEquatable<ExecutableInBinding> IEquatable<ExecutableInVar> Inherited Members ExecutableInBinding.Command FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Name The name of the environment variable. public required string Name { get; set; } Property Value string Methods Clone() Creates a deep copy of this ExecutableInVar instance. public override Binding Clone() Returns Binding The new copy of the ExecutableInVar. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the binding in the form \"Name = Command\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ExecutableInVar?, ExecutableInVar?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ExecutableInVar? left, ExecutableInVar? right) Parameters left ExecutableInVar The left object right ExecutableInVar The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ExecutableInVar?, ExecutableInVar?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ExecutableInVar? left, ExecutableInVar? right) Parameters left ExecutableInVar The left object right ExecutableInVar The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Feed.html": {
    "href": "api/ZeroInstall.Model.Feed.html",
    "title": "Class Feed | Zero Install .NET API",
    "summary": "Class Feed Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A feed contains all the information required to download and execute an application. [Serializable] [XmlNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")] [Equatable] public class Feed : XmlUnknown, IEquatable<XmlUnknown>, IElementContainer, ISummaryContainer, IDescriptionContainer, IIconContainer, ICloneable<Feed>, IEquatable<Feed> Inheritance object XmlUnknown Feed Implements IEquatable<XmlUnknown> IElementContainer ISummaryContainer IDescriptionContainer IIconContainer ICloneable<Feed> IEquatable<Feed> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks See also: https://docs.0install.net/specifications/feed/ Fields SchemaLocation Provides XML Editors with location hints for XSD files. public string? SchemaLocation Field Value string XmlNamespace The XML namespace used for storing feed/interface-related data. public const string XmlNamespace = \"http://zero-install.sourceforge.net/2004/injector/interface\" Field Value string XsdLocation The URI to retrieve an XSD containing the XML Schema information for this class in serialized form. public const string XsdLocation = \"https://docs.0install.net/specifications/feed.xsd\" Field Value string XsiSchemaLocation Provides XML Editors with location hints for XSD files. public const string XsiSchemaLocation = \"http://zero-install.sourceforge.net/2004/injector/interface https://docs.0install.net/specifications/feed.xsd http://0install.de/schema/desktop-integration/capabilities https://docs.0install.net/specifications/capabilities.xsd\" Field Value string Properties CapabilityLists A set of Capability lists for different architectures. [Browsable(false)] [OrderedEquality] public List<CapabilityList> CapabilityLists { get; } Property Value List<CapabilityList> CatalogUri The URI of the Catalog this feed was stored within. Used as an implementation detail; not part of the regular feed format! [Browsable(false)] [IgnoreEquality] public FeedUri? CatalogUri { get; set; } Property Value FeedUri Categories A list of well-known categories the applications fits into. May influence the placement in the application menu. [Browsable(false)] [OrderedEquality] public List<Category> Categories { get; } Property Value List<Category> Descriptions Full descriptions for different languages, which can be several paragraphs long. [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Descriptions { get; } Property Value LocalizableStringCollection Elements A list of Groups and Implementations contained within this interface. [Browsable(false)] [OrderedEquality] public List<Element> Elements { get; } Property Value List<Element> EntryPoints A list of EntryPoints for starting this interface. [Browsable(false)] [OrderedEquality] public List<EntryPoint> EntryPoints { get; } Property Value List<EntryPoint> FeedFor The implementations in this feed are implementations of the given interface. This is used when adding a third-party feed. [Browsable(false)] [OrderedEquality] public List<InterfaceReference> FeedFor { get; } Property Value List<InterfaceReference> Feeds Zero ore more additional feeds containing implementations of this interface. [Browsable(false)] [OrderedEquality] public List<FeedReference> Feeds { get; } Property Value List<FeedReference> Homepage The URL of a web-page describing feed or program in more detail. [Browsable(false)] public Uri? Homepage { get; set; } Property Value Uri Icons Icons representing the application. Used in the Catalog GUI as well as for desktop icons, menu entries, etc.. [Browsable(false)] [OrderedEquality] public List<Icon> Icons { get; } Property Value List<Icon> Implementations A flat list of all Implementations contained in this feed. [Browsable(false)] [IgnoreEquality] public IEnumerable<Implementation> Implementations { get; } Property Value IEnumerable<Implementation> Remarks If this is used before Normalize(FeedUri?) has been called, incomplete Implementations may be returned, because the Group inheritance structure has not been resolved. this[string] Returns the Implementation with a specific ID string. public Implementation this[string id] { get; } Parameters id string The ID to look for. Property Value Implementation The identified Implementation. Remarks If this is used before Normalize(FeedUri?) has been called, incomplete Implementations may be returned, because the Group inheritance structure has not been resolved. Exceptions KeyNotFoundException No Implementation matching id was found in Elements. MinInjectorVersion This attribute gives the oldest version of the injector that can read this file. Older versions will tell the user to upgrade if they are asked to read the file. Versions prior to 0.20 do not perform this check, however. If the attribute is not present, the file can be read by all versions. [Browsable(false)] public ImplementationVersion? MinInjectorVersion { get; set; } Property Value ImplementationVersion Name A short name to identify the feed or program (e.g. \"Foo\"). public required string Name { get; set; } Property Value string NeedsTerminal If true, indicates that the program requires a terminal in order to run. Graphical launchers should therefore run this program in a suitable terminal emulator. [Browsable(false)] public bool NeedsTerminal { get; set; } Property Value bool Publisher The publisher (company or organization) of the program. public string? Publisher { get; set; } Property Value string ReplacedBy This interface Uri of the feed has been replaced by the given interface. Any references to the old URI should be updated to use the new one. [Browsable(false)] public InterfaceReference? ReplacedBy { get; set; } Property Value InterfaceReference See Also ManifestDigest SplashScreens Splash screens Zero Install can display during downloads, etc. for better branding. [Browsable(false)] [OrderedEquality] public List<Icon> SplashScreens { get; } Property Value List<Icon> Summaries Short one-line descriptions for different languages; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). [Browsable(false)] [OrderedEquality] public LocalizableStringCollection Summaries { get; } Property Value LocalizableStringCollection Uri This attribute is only needed for remote feeds (fetched via HTTP). The value must exactly match the expected URL, to prevent an attacker replacing one correctly-signed feed with another (e.g., returning a feed for the shred program when the user asked for the backup program). [Browsable(false)] public FeedUri? Uri { get; set; } Property Value FeedUri Methods Clone() Creates a deep copy of this Feed instance. public Feed Clone() Returns Feed The new copy of the Feed. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Feed?) protected bool Equals(Feed? other) Parameters other Feed Returns bool GetBestIcon(string, string?) Returns the best matching icon for a specific Command/EntryPoint. Will fall back to Icons. public Icon? GetBestIcon(string mimeType, string? command) Parameters mimeType string The MimeType to try to find. Will only return exact matches. command string The name of the command the icon should represent; null is equivalent to NameRun. Returns Icon The best matching icon that was found or null if no matching icon was found. GetBestName(CultureInfo, string?) Returns the best matching name for a specific Command/EntryPoint. public string GetBestName(CultureInfo language, string? command) Parameters language CultureInfo The language to look for; use InvariantCulture for none. command string The name of the command the name should represent; null is equivalent to NameRun. Returns string The best matching name that was found. GetBestSummary(CultureInfo, string?) Returns the best matching summary for a specific Command/EntryPoint. Will fall back to Summaries. public string? GetBestSummary(CultureInfo language, string? command) Parameters language CultureInfo The language to look for; use InvariantCulture for none. command string The name of the command the summary should represent; null is equivalent to NameRun. Returns string The best matching summary that was found; null if no matching summary was found. GetEntryPoint(string?) Returns the first EntryPoint referencing a specific Command. public EntryPoint? GetEntryPoint(string? command) Parameters command string The command name to search for; null is equivalent to NameRun. Returns EntryPoint The identified EntryPoint; null no matching one was found. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Prepares the feed for solver processing. Flattens inheritance structures, converts legacy elements, sets default values, etc.. Do not call it if you plan on serializing the feed again since it may lose some of its structure. public void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The URI the feed was originally loaded from. Exceptions NotSupportedException The feed requires a newer version of Zero Install. InvalidDataException A required property is not set or invalid. RemoveImplementation(string) Removes an Implementation identified by its ID. public bool RemoveImplementation(string id) Parameters id string Returns bool true if the implementation was removed; false if the implementation could not be found. ResolveInternalReferences() Resolves references between elements within the Feed. public void ResolveInternalReferences() Remarks This method should be called instead of Normalize(FeedUri?) if you plan on serializing the feed again since it preservers the structure. Exceptions InvalidDataException A reference could not be resolved. Strip() Strips the feed down to the application metadata removing specific Implementations. public void Strip() ToString() Returns the feed/interface in the form \"Name (Uri)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Feed?, Feed?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Feed? left, Feed? right) Parameters left Feed The left object right Feed The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Feed?, Feed?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Feed? left, Feed? right) Parameters left Feed The left object right Feed The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.FeedElement.html": {
    "href": "api/ZeroInstall.Model.FeedElement.html",
    "title": "Class FeedElement | Zero Install .NET API",
    "summary": "Class FeedElement Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Abstract base class for XML serializable classes that are part of the Zero Install feed model. [Equatable] public abstract class FeedElement : XmlUnknown, IEquatable<XmlUnknown>, IEquatable<FeedElement> Inheritance object XmlUnknown FeedElement Implements IEquatable<XmlUnknown> IEquatable<FeedElement> Derived ArgBase Binding Category Command Constraint CopyFromStep EntryPoint Icon InterfaceReference RemoveStep RenameStep Restriction RetrievalMethod TargetBase WorkingDir Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Does not include ZeroInstall.Model.Capabilities. Properties IfZeroInstallVersion Only process this element if the current Zero Install version matches the range. [Browsable(false)] public VersionRange? IfZeroInstallVersion { get; set; } Property Value VersionRange Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(FeedElement?) protected bool Equals(FeedElement? other) Parameters other FeedElement Returns bool FilterMismatch(IRecipeStep) Checks whether an element passes the specified IfZeroInstallVersion restriction, if any. protected static bool FilterMismatch(IRecipeStep step) Parameters step IRecipeStep Returns bool FilterMismatch<T>(T) Checks whether an element passes the specified IfZeroInstallVersion restriction, if any. protected static bool FilterMismatch<T>(T element) where T : FeedElement? Parameters element T Returns bool Type Parameters T GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(FeedElement?, FeedElement?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FeedElement? left, FeedElement? right) Parameters left FeedElement The left object right FeedElement The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FeedElement?, FeedElement?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FeedElement? left, FeedElement? right) Parameters left FeedElement The left object right FeedElement The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.FeedReference.html": {
    "href": "api/ZeroInstall.Model.FeedReference.html",
    "title": "Class FeedReference | Zero Install .NET API",
    "summary": "Class FeedReference Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A linked feed that contains more implementations of this interface. Is treated by the solver as if it were part of the main feed. [Serializable] [Equatable] public sealed class FeedReference : TargetBase, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, ICloneable<FeedReference>, IEquatable<FeedReference> Inheritance object XmlUnknown FeedElement TargetBase FeedReference Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> ICloneable<FeedReference> IEquatable<FeedReference> Inherited Members TargetBase.Languages TargetBase.Architecture FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Source The URL or local path used to locate the feed. public required FeedUri Source { get; set; } Property Value FeedUri Methods Clone() Creates a deep copy of this FeedReference instance. public FeedReference Clone() Returns FeedReference The new copy of the FeedReference. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the feed reference in the form \"Source (Architecture, Languages)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(FeedReference?, FeedReference?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FeedReference? left, FeedReference? right) Parameters left FeedReference The left object right FeedReference The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FeedReference?, FeedReference?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FeedReference? left, FeedReference? right) Parameters left FeedReference The left object right FeedReference The right object Returns bool true if the objects are not equal; otherwise, false. See Also Feeds"
  },
  "api/ZeroInstall.Model.FeedTarget.html": {
    "href": "api/ZeroInstall.Model.FeedTarget.html",
    "title": "Struct FeedTarget | Zero Install .NET API",
    "summary": "Struct FeedTarget Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Associates a FeedUri with the Feed data acquired from there. public readonly record struct FeedTarget : IEquatable<FeedTarget> Implements IEquatable<FeedTarget> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FeedTarget(FeedUri, Feed) Associates a FeedUri with the Feed data acquired from there. public FeedTarget(FeedUri Uri, Feed Feed) Parameters Uri FeedUri The URI or local path (must be absolute) to the feed. Feed Feed The data acquired from Uri. Normalize(FeedUri?) has already been called. Properties Feed The data acquired from Uri. Normalize(FeedUri?) has already been called. public Feed Feed { get; init; } Property Value Feed Uri The URI or local path (must be absolute) to the feed. public FeedUri Uri { get; init; } Property Value FeedUri Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/ZeroInstall.Model.FeedUri.html": {
    "href": "api/ZeroInstall.Model.FeedUri.html",
    "title": "Class FeedUri | Zero Install .NET API",
    "summary": "Class FeedUri Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents a feed or interface URI or local path. Unlike Uri this class only accepts HTTP(S) URLs and absolute local paths. [TypeConverter(typeof(StringConstructorConverter<FeedUri>))] [Equatable] public sealed class FeedUri : Uri, ISpanFormattable, IFormattable, ISerializable, IEquatable<FeedUri> Inheritance object Uri FeedUri Implements ISpanFormattable IFormattable ISerializable IEquatable<FeedUri> Inherited Members Uri.SchemeDelimiter Uri.UriSchemeFile Uri.UriSchemeFtp Uri.UriSchemeFtps Uri.UriSchemeGopher Uri.UriSchemeHttp Uri.UriSchemeHttps Uri.UriSchemeMailto Uri.UriSchemeNetPipe Uri.UriSchemeNetTcp Uri.UriSchemeNews Uri.UriSchemeNntp Uri.UriSchemeSftp Uri.UriSchemeSsh Uri.UriSchemeTelnet Uri.UriSchemeWs Uri.UriSchemeWss Uri.CheckHostName(string) Uri.CheckSchemeName(string) Uri.Compare(Uri, Uri, UriComponents, UriFormat, StringComparison) Uri.EscapeDataString(string) Uri.EscapeUriString(string) Uri.FromHex(char) Uri.GetComponents(UriComponents, UriFormat) Uri.GetLeftPart(UriPartial) Uri.HexEscape(char) Uri.HexUnescape(string, ref int) Uri.IsBaseOf(Uri) Uri.IsHexDigit(char) Uri.IsHexEncoding(string, int) Uri.IsWellFormedOriginalString() Uri.IsWellFormedUriString(string, UriKind) Uri.MakeRelative(Uri) Uri.MakeRelativeUri(Uri) Uri.TryCreate(string, in UriCreationOptions, out Uri) Uri.TryCreate(string, UriKind, out Uri) Uri.TryCreate(Uri, string, out Uri) Uri.TryCreate(Uri, Uri, out Uri) Uri.TryFormat(Span<char>, out int) Uri.UnescapeDataString(string) Uri.AbsolutePath Uri.AbsoluteUri Uri.Authority Uri.DnsSafeHost Uri.Fragment Uri.Host Uri.HostNameType Uri.IdnHost Uri.IsAbsoluteUri Uri.IsDefaultPort Uri.IsFile Uri.IsLoopback Uri.IsUnc Uri.LocalPath Uri.OriginalString Uri.PathAndQuery Uri.Port Uri.Query Uri.Scheme Uri.Segments Uri.UserEscaped Uri.UserInfo object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FeedUri(string) Creates a feed URI from a string. public FeedUri(string value) Parameters value string A string to parse as an HTTP(S) URL or an absolute local path. Exceptions UriFormatException value is not a valid HTTP(S) URL or an absolute local path. FeedUri(Uri) Creates a feed URI from an existing Uri. public FeedUri(Uri value) Parameters value Uri An existing Uri. Exceptions UriFormatException value is not a valid HTTP(S) URL or an absolute local path. FeedUri(FeedUri) Passing a FeedUri instance into the FeedUri constructor does nothing useful. Just use the original object. [Obsolete(\"Passing a FeedUri instance into the FeedUri constructor does nothing useful. Just use the original object.\")] public FeedUri(FeedUri value) Parameters value FeedUri Fields FakePrefix This is prepended to a FeedUri if it is meant for demo data and should not be used to actually fetch a feed. public const string FakePrefix = \"fake:\" Field Value string See Also IsFake FromDistributionPrefix This is prepended to FromFeed if data was pulled from a native package manager rather than the feed itself. public const string FromDistributionPrefix = \"distribution:\" Field Value string See Also PackageImplementation IsFromDistribution Properties IsFake Indicates whether this is a fake identifier meant for demo data and should not be used to actually fetch a feed. public bool IsFake { get; } Property Value bool See Also FakePrefix IsFromDistribution Indicates that an ImplementationSelection was generated with data from a native package manager rather than the feed itself. public bool IsFromDistribution { get; } Property Value bool See Also FromDistributionPrefix Methods Equals(object?) Compares two Uri instances for equality. public override bool Equals(object? obj) Parameters obj object Returns bool true if the two instances represent the same URI; otherwise, false. Escape() Escapes the identifier using URL encoding. public string Escape() Returns string Escape(string) Escapes an identifier using URL encoding. [Pure] public static string Escape(string value) Parameters value string Returns string EscapeComponent() Convert the identifier to a list of path components. e.g. \"http://example.com/foo.xml\" becomes [\"http\", \"example.com\", \"foo.xml\"], while \"/root/feed.xml\" becomes [\"file\", \"root__feed.xml\"]. The number of components is determined by the scheme (three for http, two for file). Uses [underscore_escape] to escape each component. public string[] EscapeComponent() Returns string[] GetHashCode() Gets the hash code for the URI. public override int GetHashCode() Returns int The hash value generated for this URI. PrettyEscape() Escapes the identifier using URL encoding except for slashes (encoded as #) and colons (left as-is on POSIX systems). public string PrettyEscape() Returns string PrettyEscape(string) Escapes an identifier using URL encoding except for slashes (encoded as #) and colons (left as-is on POSIX systems). [Pure] public static string PrettyEscape(string value) Parameters value string Returns string PrettyUnescape(string) Unescapes an identifier using URL encoding except for slashes (encoded as #). [Pure] public static FeedUri PrettyUnescape(string escaped) Parameters escaped string Returns FeedUri ToString() Returns a string representation of the URI, not adhering to the escaping rules of RFC 2396. Not safe for parsing! public override string ToString() Returns string ToStringRfc() An alternate version of ToString() that produces results escaped according to RFC 2396. Safe for parsing! public string ToStringRfc() Returns string Unescape(string) Unescapes an identifier using URL encoding. public static FeedUri Unescape(string escaped) Parameters escaped string Returns FeedUri Exceptions UriFormatException The unescaped string is not a valid HTTP(S) URL or an absolute local path. Operators operator ==(FeedUri?, FeedUri?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FeedUri? left, FeedUri? right) Parameters left FeedUri The left object right FeedUri The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FeedUri?, FeedUri?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FeedUri? left, FeedUri? right) Parameters left FeedUri The left object right FeedUri The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.ForEachArgs.html": {
    "href": "api/ZeroInstall.Model.ForEachArgs.html",
    "title": "Class ForEachArgs | Zero Install .NET API",
    "summary": "Class ForEachArgs Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Expands an environment variable to multiple arguments. The variable specified in ItemFrom is split using Separator and the Arguments are added once for each item. [Serializable] [Equatable] public class ForEachArgs : ArgBase, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<ArgBase>, IEquatable<ForEachArgs> Inheritance object XmlUnknown FeedElement ArgBase ForEachArgs Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<ArgBase> IEquatable<ForEachArgs> Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Arguments A list of command-line arguments to be passed to an executable. \"${item}\" will be substituted with each for-each value. [Browsable(false)] [OrderedEquality] public List<Arg> Arguments { get; } Property Value List<Arg> ItemFrom The name of the environment variable to be expanded. public required string ItemFrom { get; set; } Property Value string Separator Overrides the default separator character (\":\" on POSIX and \";\" on Windows). public string? Separator { get; set; } Property Value string Methods Clone() Creates a deep copy of this ForEachArgs instance. public override ArgBase Clone() Returns ArgBase The new copy of the ForEachArgs. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(ForEachArgs?) protected bool Equals(ForEachArgs? other) Parameters other ForEachArgs Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the for-each instruction in the form \"ItemFrom\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ForEachArgs?, ForEachArgs?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ForEachArgs? left, ForEachArgs? right) Parameters left ForEachArgs The left object right ForEachArgs The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ForEachArgs?, ForEachArgs?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ForEachArgs? left, ForEachArgs? right) Parameters left ForEachArgs The left object right ForEachArgs The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.GenericBinding.html": {
    "href": "api/ZeroInstall.Model.GenericBinding.html",
    "title": "Class GenericBinding | Zero Install .NET API",
    "summary": "Class GenericBinding Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Zero Install will not know how to run a program using generic bindings itself, but it will include them in any selections documents it creates, which can then be executed by your custom code. [Serializable] [Equatable] public sealed class GenericBinding : ExecutableInBinding, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding>, IEquatable<ExecutableInBinding>, IEquatable<GenericBinding> Inheritance object XmlUnknown FeedElement Binding ExecutableInBinding GenericBinding Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> IEquatable<ExecutableInBinding> IEquatable<GenericBinding> Inherited Members ExecutableInBinding.Command Binding.Normalize() FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Path If your binding needs a path within the selected implementation, it is suggested that the path attribute be used for this. Other attributes and child elements should be namespaced to avoid collisions. public string? Path { get; set; } Property Value string Methods Clone() Creates a deep copy of this GenericBinding instance. public override Binding Clone() Returns Binding The new copy of the GenericBinding. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the binding in the form \"Path = Command\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(GenericBinding?, GenericBinding?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(GenericBinding? left, GenericBinding? right) Parameters left GenericBinding The left object right GenericBinding The right object Returns bool true if the objects are equal; otherwise, false. operator !=(GenericBinding?, GenericBinding?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(GenericBinding? left, GenericBinding? right) Parameters left GenericBinding The left object right GenericBinding The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Group.html": {
    "href": "api/ZeroInstall.Model.Group.html",
    "title": "Class Group | Zero Install .NET API",
    "summary": "Class Group Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll All attributes of a group are inherited by any child Groups and Implementations as defaults, but can be overridden there. All Dependencys and Bindings are inherited (sub-groups may add more Dependencys and Bindings to the list, but cannot remove any). [Serializable] [Equatable] public sealed class Group : Element, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IBindingContainer, IDependencyContainer, ICloneable<Element>, IEquatable<Element>, IElementContainer, IEquatable<Group> Inheritance object XmlUnknown FeedElement TargetBase Element Group Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IBindingContainer IDependencyContainer ICloneable<Element> IEquatable<Element> IElementContainer IEquatable<Group> Inherited Members Element.ReleaseDateFormat Element.Version Element.VersionModifier Element.Released Element.ReleasedString Element.Stability Element.RolloutPercentage Element.License Element.Main Element.SelfTest Element.DocDir Element.Dependencies Element.Restrictions Element.Bindings Element.Commands Element.ContainsCommand(string) Element.this[string] Element.GetCommand(string) TargetBase.Languages TargetBase.Architecture FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Properties Elements A list of Groups and Implementations contained within this group. [Browsable(false)] [OrderedEquality] public List<Element> Elements { get; } Property Value List<Element> Methods Clone() Creates a deep copy of this Element instance. public override Element Clone() Returns Element The new copy of the Element. CloneGroup() Creates a deep copy of this Group instance. public Group CloneGroup() Returns Group The new copy of the Group. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the group in the form \"Comma-separated list of set values\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Group?, Group?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Group? left, Group? right) Parameters left Group The left object right Group The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Group?, Group?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Group? left, Group? right) Parameters left Group The left object right Group The right object Returns bool true if the objects are not equal; otherwise, false. See Also Elements"
  },
  "api/ZeroInstall.Model.IArgBaseContainer.html": {
    "href": "api/ZeroInstall.Model.IArgBaseContainer.html",
    "title": "Interface IArgBaseContainer | Zero Install .NET API",
    "summary": "Interface IArgBaseContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains ArgBases. public interface IArgBaseContainer Properties Arguments A list of command-line arguments to be passed to an executable. List<ArgBase> Arguments { get; } Property Value List<ArgBase>"
  },
  "api/ZeroInstall.Model.IBindingContainer.html": {
    "href": "api/ZeroInstall.Model.IBindingContainer.html",
    "title": "Interface IBindingContainer | Zero Install .NET API",
    "summary": "Interface IBindingContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains Bindings. public interface IBindingContainer Properties Bindings A list of Bindings for Implementations to locate Dependencys. List<Binding> Bindings { get; } Property Value List<Binding>"
  },
  "api/ZeroInstall.Model.IDependencyContainer.html": {
    "href": "api/ZeroInstall.Model.IDependencyContainer.html",
    "title": "Interface IDependencyContainer | Zero Install .NET API",
    "summary": "Interface IDependencyContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains Dependencys and Restrictions. public interface IDependencyContainer Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Properties Dependencies A list of interfaces this implementation depends upon. List<Dependency> Dependencies { get; } Property Value List<Dependency> Restrictions A list of interfaces that are restricted to specific versions when used. List<Restriction> Restrictions { get; } Property Value List<Restriction>"
  },
  "api/ZeroInstall.Model.IDescriptionContainer.html": {
    "href": "api/ZeroInstall.Model.IDescriptionContainer.html",
    "title": "Interface IDescriptionContainer | Zero Install .NET API",
    "summary": "Interface IDescriptionContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that has localizable descriptions. public interface IDescriptionContainer Properties Descriptions Full descriptions for different languages, which can be several paragraphs long. [Browsable(false)] LocalizableStringCollection Descriptions { get; } Property Value LocalizableStringCollection"
  },
  "api/ZeroInstall.Model.IElementContainer.html": {
    "href": "api/ZeroInstall.Model.IElementContainer.html",
    "title": "Interface IElementContainer | Zero Install .NET API",
    "summary": "Interface IElementContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains Groups and Implementations. Supports a composite pattern. public interface IElementContainer Properties Elements A list of Groups and Implementations contained within this element. List<Element> Elements { get; } Property Value List<Element>"
  },
  "api/ZeroInstall.Model.IIconContainer.html": {
    "href": "api/ZeroInstall.Model.IIconContainer.html",
    "title": "Interface IIconContainer | Zero Install .NET API",
    "summary": "Interface IIconContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains Iconss. public interface IIconContainer Properties Icons Zero or more icons. [Browsable(false)] List<Icon> Icons { get; } Property Value List<Icon>"
  },
  "api/ZeroInstall.Model.IInterfaceUri.html": {
    "href": "api/ZeroInstall.Model.IInterfaceUri.html",
    "title": "Interface IInterfaceUri | Zero Install .NET API",
    "summary": "Interface IInterfaceUri Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains an interface URI. public interface IInterfaceUri Properties InterfaceUri An interface URI (URL or file path). FeedUri InterfaceUri { get; set; } Property Value FeedUri"
  },
  "api/ZeroInstall.Model.IInterfaceUriBindingContainer.html": {
    "href": "api/ZeroInstall.Model.IInterfaceUriBindingContainer.html",
    "title": "Interface IInterfaceUriBindingContainer | Zero Install .NET API",
    "summary": "Interface IInterfaceUriBindingContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that contains an interface URI string. public interface IInterfaceUriBindingContainer : IInterfaceUri, IBindingContainer Inherited Members IInterfaceUri.InterfaceUri IBindingContainer.Bindings"
  },
  "api/ZeroInstall.Model.IRecipeStep.html": {
    "href": "api/ZeroInstall.Model.IRecipeStep.html",
    "title": "Interface IRecipeStep | Zero Install .NET API",
    "summary": "Interface IRecipeStep Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A retrieval step is a part of a Recipe. public interface IRecipeStep : ICloneable<IRecipeStep> Inherited Members ICloneable<IRecipeStep>.Clone() Methods Normalize(FeedUri?) Converts legacy elements, sets default values, etc.. void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI."
  },
  "api/ZeroInstall.Model.ISummaryContainer.html": {
    "href": "api/ZeroInstall.Model.ISummaryContainer.html",
    "title": "Interface ISummaryContainer | Zero Install .NET API",
    "summary": "Interface ISummaryContainer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An object that has localizable summaries and descriptions. public interface ISummaryContainer : IDescriptionContainer Inherited Members IDescriptionContainer.Descriptions Properties Summaries Short one-line descriptions for different languages; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). [Browsable(false)] LocalizableStringCollection Summaries { get; } Property Value LocalizableStringCollection"
  },
  "api/ZeroInstall.Model.Icon.html": {
    "href": "api/ZeroInstall.Model.Icon.html",
    "title": "Class Icon | Zero Install .NET API",
    "summary": "Class Icon Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An icon representing the application. Used in the Catalog GUI as well as for desktop icons, menu entries, etc.. [Serializable] [Equatable] public class Icon : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Icon>, IEquatable<Icon> Inheritance object XmlUnknown FeedElement Icon Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Icon> IEquatable<Icon> Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields KnownMimeTypes All known MimeType values for icons. public static readonly string[] KnownMimeTypes Field Value string[] MimeTypeIcns The MimeType value for Apple icons (.icns). public const string MimeTypeIcns = \"image/x-icns\" Field Value string MimeTypeIco The MimeType value for Windows icons (.ico). public const string MimeTypeIco = \"image/vnd.microsoft.icon\" Field Value string MimeTypePng The MimeType value for PNG icons (.png(. public const string MimeTypePng = \"image/png\" Field Value string MimeTypeSvg The MimeType value for SVG icons (.svg). public const string MimeTypeSvg = \"image/svg\" Field Value string Properties Href The URL used to locate the icon. [Browsable(false)] public required Uri Href { get; set; } Property Value Uri MimeType The MIME type of the icon. This value is case-insensitive. [TypeConverter(typeof(IconMimeTypeConverter))] public string? MimeType { get; set; } Property Value string Methods Clone() Creates a deep copy of this Icon instance. public Icon Clone() Returns Icon The new copy of the Icon. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Icon?) protected bool Equals(Icon? other) Parameters other Icon Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the icon in the form \"Location (MimeType)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Icon?, Icon?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Icon? left, Icon? right) Parameters left Icon The left object right Icon The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Icon?, Icon?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Icon? left, Icon? right) Parameters left Icon The left object right Icon The right object Returns bool true if the objects are not equal; otherwise, false. See Also Icons Icons"
  },
  "api/ZeroInstall.Model.IconExtensions.html": {
    "href": "api/ZeroInstall.Model.IconExtensions.html",
    "title": "Class IconExtensions | Zero Install .NET API",
    "summary": "Class IconExtensions Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Provides extensions methods related to Icons. public static class IconExtensions Inheritance object IconExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetIcon(IEnumerable<Icon>, string) Returns an icon with a specific mime type if available. public static Icon? GetIcon(this IEnumerable<Icon> icons, string mimeType) Parameters icons IEnumerable<Icon> The list of icons to search mimeType string The MimeType to try to find. Will only return exact matches. Returns Icon The first matching icon that was found or null if no matching icon was found."
  },
  "api/ZeroInstall.Model.Implementation.html": {
    "href": "api/ZeroInstall.Model.Implementation.html",
    "title": "Class Implementation | Zero Install .NET API",
    "summary": "Class Implementation Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An implementation is a specific version of an application that can be downloaded and executed (e.g. Firefox 3.6 for Windows). [Serializable] [Equatable] public class Implementation : ImplementationBase, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IBindingContainer, IDependencyContainer, ICloneable<Element>, IEquatable<Element>, IEquatable<ImplementationBase>, IEquatable<Implementation> Inheritance object XmlUnknown FeedElement TargetBase Element ImplementationBase Implementation Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IBindingContainer IDependencyContainer ICloneable<Element> IEquatable<Element> IEquatable<ImplementationBase> IEquatable<Implementation> Derived ExternalImplementation Inherited Members ImplementationBase.ID ImplementationBase.LocalPath ImplementationBase.Version ImplementationBase.ManifestDigest ImplementationBase.CloneFromTo(ImplementationBase, ImplementationBase) ImplementationBase.ToString() ImplementationBase.Equals(ImplementationBase) Element.ReleaseDateFormat Element.VersionModifier Element.Released Element.ReleasedVerbatim Element.ReleasedString Element.Stability Element.RolloutPercentage Element.License Element.Main Element.SelfTest Element.DocDir Element.Dependencies Element.Restrictions Element.Bindings Element.Commands Element.ContainsCommand(string) Element.this[string] Element.GetCommand(string) Element.EnsureAttributes() Element.CloneFromTo(Element, Element) Element.Equals(Element) TargetBase.Languages TargetBase.Architecture TargetBase.CloneFromTo(TargetBase, TargetBase) TargetBase.Equals(TargetBase) FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Properties RetrievalMethods A list of RetrievalMethods for downloading the implementation. [Browsable(false)] [OrderedEquality] public List<RetrievalMethod> RetrievalMethods { get; } Property Value List<RetrievalMethod> Methods Clone() Creates a deep copy of this Implementation instance. public override Element Clone() Returns Element The new copy of the Implementation. CloneImplementation() Creates a deep copy of this Implementation instance. public Implementation CloneImplementation() Returns Implementation The new copy of the Implementation. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Implementation?) protected bool Equals(Implementation? other) Parameters other Implementation Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions InvalidDataException A required property is not set or invalid. Operators operator ==(Implementation?, Implementation?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Implementation? left, Implementation? right) Parameters left Implementation The left object right Implementation The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Implementation?, Implementation?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Implementation? left, Implementation? right) Parameters left Implementation The left object right Implementation The right object Returns bool true if the objects are not equal; otherwise, false. See Also Elements"
  },
  "api/ZeroInstall.Model.ImplementationBase.html": {
    "href": "api/ZeroInstall.Model.ImplementationBase.html",
    "title": "Class ImplementationBase | Zero Install .NET API",
    "summary": "Class ImplementationBase Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Information for identifying an implementation of a Feed. Common base for Implementation and ImplementationSelection. [Equatable] public abstract class ImplementationBase : Element, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IBindingContainer, IDependencyContainer, ICloneable<Element>, IEquatable<Element>, IEquatable<ImplementationBase> Inheritance object XmlUnknown FeedElement TargetBase Element ImplementationBase Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IBindingContainer IDependencyContainer ICloneable<Element> IEquatable<Element> IEquatable<ImplementationBase> Derived Implementation ImplementationSelection Inherited Members Element.ReleaseDateFormat Element.VersionModifier Element.Released Element.ReleasedVerbatim Element.ReleasedString Element.Stability Element.RolloutPercentage Element.License Element.Main Element.SelfTest Element.DocDir Element.Dependencies Element.Restrictions Element.Bindings Element.Commands Element.ContainsCommand(string) Element.this[string] Element.GetCommand(string) Element.EnsureAttributes() Element.Clone() Element.CloneFromTo(Element, Element) Element.Equals(Element) TargetBase.Languages TargetBase.Architecture TargetBase.CloneFromTo(TargetBase, TargetBase) TargetBase.Equals(TargetBase) FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Properties ID A unique identifier for this implementation. Used when storing implementation-specific user preferences. public required string ID { get; set; } Property Value string LocalPath If the feed file is a local file (the interface 'uri' starts with /) then the local-path attribute may contain the pathname of a local directory (either an absolute path or a path relative to the directory containing the feed file). public string? LocalPath { get; set; } Property Value string ManifestDigest A manifest digest is a means of uniquely identifying an Implementation and verifying its contents. public ManifestDigest ManifestDigest { get; set; } Property Value ManifestDigest Version The version number of the implementation. public override required ImplementationVersion Version { get; set; } Property Value ImplementationVersion Methods CloneFromTo(ImplementationBase, ImplementationBase) Copies all known values from one instance to another. Helper method for instance cloning. protected static void CloneFromTo(ImplementationBase from, ImplementationBase to) Parameters from ImplementationBase to ImplementationBase Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(ImplementationBase?) protected bool Equals(ImplementationBase? other) Parameters other ImplementationBase Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the implementation in the form \"Comma-separated list of set values\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ImplementationBase?, ImplementationBase?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ImplementationBase? left, ImplementationBase? right) Parameters left ImplementationBase The left object right ImplementationBase The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ImplementationBase?, ImplementationBase?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ImplementationBase? left, ImplementationBase? right) Parameters left ImplementationBase The left object right ImplementationBase The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.ImplementationVersion.html": {
    "href": "api/ZeroInstall.Model.ImplementationVersion.html",
    "title": "Class ImplementationVersion | Zero Install .NET API",
    "summary": "Class ImplementationVersion Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents a version number consisting of dot-separated decimals and optional modifier strings. [TypeConverter(typeof(StringConstructorConverter<ImplementationVersion>))] [Serializable] [Equatable] public sealed class ImplementationVersion : IComparable<ImplementationVersion>, IEquatable<ImplementationVersion> Inheritance object ImplementationVersion Implements IComparable<ImplementationVersion> IEquatable<ImplementationVersion> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This class is immutable and thread-safe. This is the syntax for valid version strings: Version := DottedList (\"-\" Modifier? DottedList?)* DottedList := (Integer (\".\" Integer)*) Modifier := \"pre\" | \"rc\" | \"post\" If the string ContainsTemplateVariables(string) the entire string is stored verbatim and not parsed. Constructors ImplementationVersion(string) Creates a new implementation version from a string. public ImplementationVersion(string value) Parameters value string The string containing the version information. Exceptions FormatException value is not a valid version string. ImplementationVersion(Version) Creates a new implementation version from a .NET Version. public ImplementationVersion(Version version) Parameters version Version The .NET Version to convert. ImplementationVersion(VersionDottedList, params VersionPart[]) Creates a new implementation version. public ImplementationVersion(VersionDottedList firstPart, params VersionPart[] additionalParts) Parameters firstPart VersionDottedList The first part of the version number. additionalParts VersionPart[] All additional parts of the version number. Properties AdditionalParts All additional parts of the version number. [OrderedEquality] public IReadOnlyList<VersionPart> AdditionalParts { get; } Property Value IReadOnlyList<VersionPart> ContainsTemplateVariables Indicates whether this version number contains a template variable (a substring enclosed in curly brackets, e.g {var}) . [Browsable(false)] [IgnoreEquality] public bool ContainsTemplateVariables { get; } Property Value bool Remarks This must be false in regular feeds; true is only valid for templates. FirstPart The first part of the version number. public VersionDottedList FirstPart { get; } Property Value VersionDottedList Methods CompareTo(ImplementationVersion?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(ImplementationVersion? other) Parameters other ImplementationVersion An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string representation of the version. Safe for parsing! public override string ToString() Returns string TryCreate(string, out ImplementationVersion?) Creates a new ImplementationVersion using the specified string representation. public static bool TryCreate(string value, out ImplementationVersion? result) Parameters value string The string to parse. result ImplementationVersion Returns the created ImplementationVersion if successfully; null otherwise. Returns bool true if the ImplementationVersion was successfully created; false otherwise. Operators operator ==(ImplementationVersion?, ImplementationVersion?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ImplementationVersion? left, ImplementationVersion? right) Parameters left ImplementationVersion The left object right ImplementationVersion The right object Returns bool true if the objects are equal; otherwise, false. operator >(ImplementationVersion?, ImplementationVersion?) public static bool operator >(ImplementationVersion? left, ImplementationVersion? right) Parameters left ImplementationVersion right ImplementationVersion Returns bool operator >=(ImplementationVersion?, ImplementationVersion?) public static bool operator >=(ImplementationVersion? left, ImplementationVersion? right) Parameters left ImplementationVersion right ImplementationVersion Returns bool operator !=(ImplementationVersion?, ImplementationVersion?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ImplementationVersion? left, ImplementationVersion? right) Parameters left ImplementationVersion The left object right ImplementationVersion The right object Returns bool true if the objects are not equal; otherwise, false. operator <(ImplementationVersion?, ImplementationVersion?) public static bool operator <(ImplementationVersion? left, ImplementationVersion? right) Parameters left ImplementationVersion right ImplementationVersion Returns bool operator <=(ImplementationVersion?, ImplementationVersion?) public static bool operator <=(ImplementationVersion? left, ImplementationVersion? right) Parameters left ImplementationVersion right ImplementationVersion Returns bool"
  },
  "api/ZeroInstall.Model.Importance.html": {
    "href": "api/ZeroInstall.Model.Importance.html",
    "title": "Enum Importance | Zero Install .NET API",
    "summary": "Enum Importance Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Describes how important a dependency is (i.e. whether ignoring it is an option). public enum Importance Fields Essential = 0 A version of the Dependency must be selected. Recommended = 1 No version of the Dependency is also an option, although selecting a version is preferable to not selecting one."
  },
  "api/ZeroInstall.Model.InterfaceReference.html": {
    "href": "api/ZeroInstall.Model.InterfaceReference.html",
    "title": "Class InterfaceReference | Zero Install .NET API",
    "summary": "Class InterfaceReference Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A reference to an interface URI, e.g. for specifying which interface this feed implements or by which interface it is replaced. [Serializable] [Equatable] public sealed class InterfaceReference : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<InterfaceReference>, IEquatable<InterfaceReference> Inheritance object XmlUnknown FeedElement InterfaceReference Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<InterfaceReference> IEquatable<InterfaceReference> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Target The URI used to locate the interface. [Browsable(false)] public required FeedUri Target { get; set; } Property Value FeedUri Methods Clone() Creates a deep copy of this InterfaceReference instance. public InterfaceReference Clone() Returns InterfaceReference The new copy of the InterfaceReference. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Converts legacy elements, sets default values, etc.. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the interface reference in the form \"Target\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(InterfaceReference?, InterfaceReference?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(InterfaceReference? left, InterfaceReference? right) Parameters left InterfaceReference The left object right InterfaceReference The right object Returns bool true if the objects are equal; otherwise, false. operator !=(InterfaceReference?, InterfaceReference?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(InterfaceReference? left, InterfaceReference? right) Parameters left InterfaceReference The left object right InterfaceReference The right object Returns bool true if the objects are not equal; otherwise, false. See Also FeedFor ReplacedBy"
  },
  "api/ZeroInstall.Model.KnownDistributions.html": {
    "href": "api/ZeroInstall.Model.KnownDistributions.html",
    "title": "Class KnownDistributions | Zero Install .NET API",
    "summary": "Class KnownDistributions Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Well-known OS distributions. public static class KnownDistributions Inheritance object KnownDistributions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields All public static readonly string[] All Field Value string[] Arch public const string Arch = \"Arch\" Field Value string Cygwin public const string Cygwin = \"Cygwin\" Field Value string Darwin public const string Darwin = \"Darwin\" Field Value string Debian public const string Debian = \"Debian\" Field Value string Gentoo public const string Gentoo = \"Gentoo\" Field Value string MacPorts public const string MacPorts = \"MacPorts\" Field Value string Ports public const string Ports = \"Ports\" Field Value string Rpm public const string Rpm = \"RPM\" Field Value string Slack public const string Slack = \"Slack\" Field Value string Windows public const string Windows = \"Windows\" Field Value string"
  },
  "api/ZeroInstall.Model.ManifestDigest.html": {
    "href": "api/ZeroInstall.Model.ManifestDigest.html",
    "title": "Struct ManifestDigest | Zero Install .NET API",
    "summary": "Struct ManifestDigest Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A manifest digest is a means of uniquely identifying an Implementation and verifying its contents. [TypeConverter(typeof(ManifestDigestConverter))] [Serializable] public record struct ManifestDigest : IEquatable<ManifestDigest> Implements IEquatable<ManifestDigest> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks Stores digests of the manifest file using various hashing algorithms. Constructors ManifestDigest(string) Creates a new manifest digest structure by parsing a string. public ManifestDigest(string value) Parameters value string One or more comma separated digest values. Exceptions NotSupportedException value contains no known digest algorithms. ManifestDigest(string?, string?, string?, string?) A manifest digest is a means of uniquely identifying an Implementation and verifying its contents. public ManifestDigest(string? Sha1 = null, string? Sha1New = null, string? Sha256 = null, string? Sha256New = null) Parameters Sha1 string A SHA-1 hash of the old manifest format. Not supported anymore! Sha1New string A SHA-1 hash of the new manifest format. Sha256 string A SHA-256 hash of the new manifest format. (most secure) Sha256New string A SHA-256 hash of the new manifest format with a base32 encoding and no equals sign in the path. Remarks Stores digests of the manifest file using various hashing algorithms. Fields Empty The manifest digest of an empty directory. public static readonly ManifestDigest Empty Field Value ManifestDigest UnknownAlgorithms Contains any unknown hash algorithms specified as pure XML attributes. [NonSerialized] public XmlAttribute[]? UnknownAlgorithms Field Value XmlAttribute[] Properties AvailableDigests Lists all contained manifest digests sorted from best (safest) to worst. [Browsable(false)] public IEnumerable<string> AvailableDigests { get; } Property Value IEnumerable<string> Best Returns the best entry of AvailableDigests; null if there are none. [Browsable(false)] public string? Best { get; } Property Value string Sha1 A SHA-1 hash of the old manifest format. Not supported anymore! public string? Sha1 { readonly get; set; } Property Value string Sha1New A SHA-1 hash of the new manifest format. public string? Sha1New { readonly get; set; } Property Value string Sha256 A SHA-256 hash of the new manifest format. (most secure) public string? Sha256 { readonly get; set; } Property Value string Sha256New A SHA-256 hash of the new manifest format with a base32 encoding and no equals sign in the path. public string? Sha256New { readonly get; set; } Property Value string Methods PartialEquals(ManifestDigest) Indicates whether this digest is at least partially equal to another one. public bool PartialEquals(ManifestDigest other) Parameters other ManifestDigest Returns bool Remarks Two digests are considered partially equal if at least one digest algorithm matches and no values are contradictory. ToString() Returns the manifest digests in the form \"sha1new=abc123,sha256new_ABC123,...\". Safe for parsing! public override string ToString() Returns string TryParse(string) Tries to parse a string containing a digest value. Does nothing if the corresponding algorithm is already set or if the string contains no known digest algorithm. public void TryParse(string digest) Parameters digest string"
  },
  "api/ZeroInstall.Model.ManifestDigestPartialEqualityComparer-1.html": {
    "href": "api/ZeroInstall.Model.ManifestDigestPartialEqualityComparer-1.html",
    "title": "Class ManifestDigestPartialEqualityComparer<T> | Zero Install .NET API",
    "summary": "Class ManifestDigestPartialEqualityComparer<T> Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Uses PartialEquals(ManifestDigest) to compare ImplementationBases. public sealed class ManifestDigestPartialEqualityComparer<T> : IEqualityComparer<T> where T : ImplementationBase Type Parameters T Inheritance object ManifestDigestPartialEqualityComparer<T> Implements IEqualityComparer<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance A singleton instance of the comparer. public static readonly ManifestDigestPartialEqualityComparer<T> Instance Field Value ManifestDigestPartialEqualityComparer<T> Methods Equals(T?, T?) Determines whether the specified objects are equal. public bool Equals(T? x, T? y) Parameters x T The first object of type T to compare. y T The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(T) Always returns 0. The concept of hashing is not applicable to partial equality. public int GetHashCode(T obj) Parameters obj T Returns int"
  },
  "api/ZeroInstall.Model.ManifestDigestPartialEqualityComparer.html": {
    "href": "api/ZeroInstall.Model.ManifestDigestPartialEqualityComparer.html",
    "title": "Class ManifestDigestPartialEqualityComparer | Zero Install .NET API",
    "summary": "Class ManifestDigestPartialEqualityComparer Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Uses PartialEquals(ManifestDigest) to compare ManifestDigests. public sealed class ManifestDigestPartialEqualityComparer : IEqualityComparer<ManifestDigest> Inheritance object ManifestDigestPartialEqualityComparer Implements IEqualityComparer<ManifestDigest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance A singleton instance of the comparer. public static readonly ManifestDigestPartialEqualityComparer Instance Field Value ManifestDigestPartialEqualityComparer Methods Equals(ManifestDigest, ManifestDigest) Determines whether the specified objects are equal. public bool Equals(ManifestDigest x, ManifestDigest y) Parameters x ManifestDigest The first object of type T to compare. y ManifestDigest The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(ManifestDigest) Always returns 0. The concept of hashing is not applicable to partial equality. public int GetHashCode(ManifestDigest obj) Parameters obj ManifestDigest Returns int"
  },
  "api/ZeroInstall.Model.ModelUtils.html": {
    "href": "api/ZeroInstall.Model.ModelUtils.html",
    "title": "Class ModelUtils | Zero Install .NET API",
    "summary": "Class ModelUtils Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Provides utility methods for interface and feed URIs. public static class ModelUtils Inheritance object ModelUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Version The version of Zero Install feed model (used for compatibility checks). public static ImplementationVersion Version { get; } Property Value ImplementationVersion Methods ContainsTemplateVariables(string) Determines whether a string contains a template variable (a substring enclosed in curly brackets, e.g {var}). public static bool ContainsTemplateVariables(string value) Parameters value string Returns bool GetAbsoluteHref(Uri, string?) Turns a relative HREF into an absolute one, using the file containing the reference as the base. public static Uri GetAbsoluteHref(Uri href, string? source) Parameters href Uri The potentially relative HREF; will remain untouched if absolute. source string The file containing the reference; can be null. Returns Uri An absolute HREF. Exceptions UriFormatException href is a relative URI and source is null. GetAbsoluteHref(Uri, FeedUri) Turns a relative HREF into an absolute one, using the file containing the reference as the base. public static Uri GetAbsoluteHref(Uri href, FeedUri source) Parameters href Uri The potentially relative HREF; will remain untouched if absolute. source FeedUri The file containing the reference; can be null. Returns Uri An absolute HREF. Exceptions UriFormatException href is a relative URI source does not point to a local file. GetAbsolutePath(string, string?) Turns a relative path into an absolute one, using the file containing the reference as the base. public static string GetAbsolutePath(string path, string? source) Parameters path string The potentially relative path; will remain untouched if absolute. source string The file containing the reference; can be null. Returns string An absolute path. Exceptions UriFormatException path is a relative URI that cannot be resolved. GetAbsolutePath(string, FeedUri?) Turns a relative path into an absolute one, using the file containing the reference as the base. public static string GetAbsolutePath(string path, FeedUri? source = null) Parameters path string The potentially relative path; will remain untouched if absolute. source FeedUri The file containing the reference; can be null. Returns string An absolute path. Exceptions UriFormatException path is a relative URI that cannot be resolved."
  },
  "api/ZeroInstall.Model.OS.html": {
    "href": "api/ZeroInstall.Model.OS.html",
    "title": "Enum OS | Zero Install .NET API",
    "summary": "Enum OS Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Describes an operating system family. [TypeConverter(typeof(EnumXmlConverter<OS>))] public enum OS Extension Methods ArchitectureExtensions.RunsOn(OS, OS) Fields All = 0 Supports all operating systems (e.g. developed with cross-platform language like Java). Cygwin = 7 A Unix-compatibility layer for Windows. Darwin = 5 MacOSX, without the proprietary bits. FreeBsd = 4 Supports only FreeBSD. Linux = 2 Supports only Linux operating systems. MacOSX = 6 Supports only MacOS X. Posix = 1 Everything except Windows. Solaris = 3 Supports only Solaris. Unknown = 100 The supported operating system has not been set yet. Windows = 8 Supports only Windows NT 5.0+ (Windows 2000, XP, 2003, Vista, 2008, 7, 2008 R2, ...)."
  },
  "api/ZeroInstall.Model.OverlayBinding.html": {
    "href": "api/ZeroInstall.Model.OverlayBinding.html",
    "title": "Class OverlayBinding | Zero Install .NET API",
    "summary": "Class OverlayBinding Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Make a chosen Implementation available by overlaying it onto another part of the file-system. [Serializable] [Equatable] public sealed class OverlayBinding : Binding, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Binding>, IEquatable<OverlayBinding> Inheritance object XmlUnknown FeedElement Binding OverlayBinding Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Binding> IEquatable<OverlayBinding> Inherited Members Binding.Normalize() FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This is to support legacy programs which use hard-coded paths. Properties MountPoint The mount point on which src is to appear in the filesystem. If missing, '/' (on POSIX) or '%systemdrive%' (on Windows) is assumed. public string? MountPoint { get; set; } Property Value string Source The relative path of the directory in the implementation to publish. The default is to publish everything. public string? Source { get; set; } Property Value string Methods Clone() Creates a deep copy of this OverlayBinding instance. public override Binding Clone() Returns Binding The new copy of the OverlayBinding. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the binding in the form \"Source => MountPoint\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(OverlayBinding?, OverlayBinding?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(OverlayBinding? left, OverlayBinding? right) Parameters left OverlayBinding The left object right OverlayBinding The right object Returns bool true if the objects are equal; otherwise, false. operator !=(OverlayBinding?, OverlayBinding?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(OverlayBinding? left, OverlayBinding? right) Parameters left OverlayBinding The left object right OverlayBinding The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.PackageImplementation.html": {
    "href": "api/ZeroInstall.Model.PackageImplementation.html",
    "title": "Class PackageImplementation | Zero Install .NET API",
    "summary": "Class PackageImplementation Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An implementation provided by a distribution-specific package manager instead of Zero Install. [Serializable] [Equatable] public sealed class PackageImplementation : Element, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IBindingContainer, IDependencyContainer, ICloneable<Element>, IEquatable<Element>, IEquatable<PackageImplementation> Inheritance object XmlUnknown FeedElement TargetBase Element PackageImplementation Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IBindingContainer IDependencyContainer ICloneable<Element> IEquatable<Element> IEquatable<PackageImplementation> Inherited Members Element.ReleaseDateFormat Element.VersionModifier Element.Released Element.ReleasedString Element.Stability Element.RolloutPercentage Element.License Element.Main Element.SelfTest Element.DocDir Element.Dependencies Element.Restrictions Element.Bindings Element.Commands Element.ContainsCommand(string) Element.this[string] Element.GetCommand(string) Element.Normalize(FeedUri) TargetBase.Languages TargetBase.Architecture FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Remarks Any Bindings inside Dependencys for the Feed will be ignored; it is assumed that the requiring component knows how to use the packaged version without further help. Fields DistributionNames Well-known values for Distributions. public static readonly string[] DistributionNames Field Value string[] Properties Distributions A list of distribution names (e.g. Debian, RPM) where Package applies. Applies everywhere if empty. [Browsable(false)] [OrderedEquality] public List<string> Distributions { get; } Property Value List<string> See Also KnownDistributions DistributionsString Used for XML serialization. [TypeConverter(typeof(DistributionNameConverter))] [IgnoreEquality] public string DistributionsString { get; set; } Property Value string See Also Distributions Package The name of the package in the distribution-specific package manager. public string? Package { get; set; } Property Value string Version The range of versions to accept for the specified Package. public VersionRange? Version { get; set; } Property Value VersionRange Methods Clone() Creates a deep copy of this PackageImplementation instance. public override Element Clone() Returns Element The new copy of the PackageImplementation. CloneImplementation() Creates a deep copy of this PackageImplementation instance. public PackageImplementation CloneImplementation() Returns PackageImplementation The new copy of the PackageImplementation. EnsureAttributes() Ensures that required values deserialized from XML attributes are set (not null). protected override void EnsureAttributes() Exceptions InvalidDataException A required property is not set or invalid. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the implementation in the form \"Package (Distributions)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(PackageImplementation?, PackageImplementation?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(PackageImplementation? left, PackageImplementation? right) Parameters left PackageImplementation The left object right PackageImplementation The right object Returns bool true if the objects are equal; otherwise, false. operator !=(PackageImplementation?, PackageImplementation?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(PackageImplementation? left, PackageImplementation? right) Parameters left PackageImplementation The left object right PackageImplementation The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Preferences.FeedPreferences.html": {
    "href": "api/ZeroInstall.Model.Preferences.FeedPreferences.html",
    "title": "Class FeedPreferences | Zero Install .NET API",
    "summary": "Class FeedPreferences Namespace ZeroInstall.Model.Preferences Assembly ZeroInstall.Model.dll Stores user-specific preferences for a Feed. [Equatable] public sealed class FeedPreferences : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<FeedPreferences>, IEquatable<FeedPreferences> Inheritance object XmlUnknown FeedPreferences Implements IEquatable<XmlUnknown> ICloneable<FeedPreferences> IEquatable<FeedPreferences> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Implementations A list of implementation-specific user-overrides. [OrderedEquality] public List<ImplementationPreferences> Implementations { get; } Property Value List<ImplementationPreferences> this[string] Retrieves an existing entry from Implementations by ID or creates a new one if no appropriate one exists. public ImplementationPreferences this[string id] { get; } Parameters id string The ID to search for. Property Value ImplementationPreferences The found or newly created ImplementationPreferences. LastChecked The point in time this feed was last checked for updates. public UnixTime LastChecked { get; set; } Property Value UnixTime Methods Clone() Creates a deep copy of this FeedPreferences instance. public FeedPreferences Clone() Returns FeedPreferences The new copy of the FeedPreferences. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. LoadFor(FeedUri) Loads FeedPreferences for a specific feed. public static FeedPreferences LoadFor(FeedUri feedUri) Parameters feedUri FeedUri The feed to load the preferences for. Returns FeedPreferences The loaded FeedPreferences. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. LoadForSafe(FeedUri) Tries to load FeedPreferences for a specific feed. Automatically falls back to defaults on errors. public static FeedPreferences LoadForSafe(FeedUri feedUri) Parameters feedUri FeedUri The feed to load the preferences for. Returns FeedPreferences The loaded FeedPreferences or default value if there was a problem. Normalize() Removes superfluous entries from Implementations. public void Normalize() SaveFor(FeedUri) Saves these FeedPreferences for a specific feed. public void SaveFor(FeedUri feedUri) Parameters feedUri FeedUri The feed to save the preferences for. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. ToString() Returns the preferences in the form \"FeedPreferences: LastChecked\". Not safe for parsing! public override string ToString() Returns string UpdateFor(FeedUri, Action<FeedPreferences>) Loads FeedPreferences for a specific feed, applies modifications to them and saves them again. public static void UpdateFor(FeedUri feedUri, Action<FeedPreferences> update) Parameters feedUri FeedUri The feed to modify the preferences for. update Action<FeedPreferences> The modifications to apply to the preferences. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. Operators operator ==(FeedPreferences?, FeedPreferences?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(FeedPreferences? left, FeedPreferences? right) Parameters left FeedPreferences The left object right FeedPreferences The right object Returns bool true if the objects are equal; otherwise, false. operator !=(FeedPreferences?, FeedPreferences?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(FeedPreferences? left, FeedPreferences? right) Parameters left FeedPreferences The left object right FeedPreferences The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Preferences.ImplementationPreferences.html": {
    "href": "api/ZeroInstall.Model.Preferences.ImplementationPreferences.html",
    "title": "Class ImplementationPreferences | Zero Install .NET API",
    "summary": "Class ImplementationPreferences Namespace ZeroInstall.Model.Preferences Assembly ZeroInstall.Model.dll Stores user-specific preferences for an Implementation. [Equatable] public sealed class ImplementationPreferences : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<ImplementationPreferences>, IEquatable<ImplementationPreferences> Inheritance object XmlUnknown ImplementationPreferences Implements IEquatable<XmlUnknown> ICloneable<ImplementationPreferences> IEquatable<ImplementationPreferences> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ID A unique identifier for the implementation. Corresponds to ID. public required string ID { get; set; } Property Value string IsSuperfluous Indicates whether this configuration object stores no information other than the ID and is thus superfluous. [Browsable(false)] [IgnoreEquality] public bool IsSuperfluous { get; } Property Value bool RolloutPercentage A random number used to compare against RolloutPercentage. [Browsable(false)] public int RolloutPercentage { get; set; } Property Value int UserStability A user-specified override for Stability specified in the feed. public Stability UserStability { get; set; } Property Value Stability Methods Clone() Creates a deep copy of this ImplementationPreferences instance. public ImplementationPreferences Clone() Returns ImplementationPreferences The new copy of the ImplementationPreferences. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the preferences in the form \"ImplementationPreferences: ID\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ImplementationPreferences?, ImplementationPreferences?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ImplementationPreferences? left, ImplementationPreferences? right) Parameters left ImplementationPreferences The left object right ImplementationPreferences The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ImplementationPreferences?, ImplementationPreferences?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ImplementationPreferences? left, ImplementationPreferences? right) Parameters left ImplementationPreferences The left object right ImplementationPreferences The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Preferences.InterfacePreferences.html": {
    "href": "api/ZeroInstall.Model.Preferences.InterfacePreferences.html",
    "title": "Class InterfacePreferences | Zero Install .NET API",
    "summary": "Class InterfacePreferences Namespace ZeroInstall.Model.Preferences Assembly ZeroInstall.Model.dll Stores user-specific preferences for an interface. [Equatable] public sealed class InterfacePreferences : XmlUnknown, IEquatable<XmlUnknown>, ICloneable<InterfacePreferences>, IEquatable<InterfacePreferences> Inheritance object XmlUnknown InterfacePreferences Implements IEquatable<XmlUnknown> ICloneable<InterfacePreferences> IEquatable<InterfacePreferences> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Feeds Zero ore more additional feeds containing implementations of this interface. [OrderedEquality] public List<FeedReference> Feeds { get; } Property Value List<FeedReference> StabilityPolicy Implementations at this stability level or higher are preferred. Lower levels are used only if there is no other choice. public Stability StabilityPolicy { get; set; } Property Value Stability Uri The URI of the interface to be configured. [Browsable(false)] public required FeedUri Uri { get; set; } Property Value FeedUri Methods Clone() Creates a deep copy of this InterfacePreferences instance. public InterfacePreferences Clone() Returns InterfacePreferences The new copy of the InterfacePreferences. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. LoadFor(FeedUri) Loads InterfacePreferences for a specific interface. public static InterfacePreferences LoadFor(FeedUri interfaceUri) Parameters interfaceUri FeedUri The interface to load the preferences for. Returns InterfacePreferences The loaded InterfacePreferences. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. LoadForSafe(FeedUri) Tries to load InterfacePreferences for a specific interface. Automatically falls back to defaults on errors. public static InterfacePreferences LoadForSafe(FeedUri interfaceUri) Parameters interfaceUri FeedUri The interface to load the preferences for. Returns InterfacePreferences The loaded InterfacePreferences or default value if there was a problem. SaveFor(FeedUri) Saves these InterfacePreferences for a specific interface. public void SaveFor(FeedUri interfaceUri) Parameters interfaceUri FeedUri The interface to save the preferences for. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. ToString() Returns the preferences in the form \"InterfacePreferences: Uri\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(InterfacePreferences?, InterfacePreferences?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(InterfacePreferences? left, InterfacePreferences? right) Parameters left InterfacePreferences The left object right InterfacePreferences The right object Returns bool true if the objects are equal; otherwise, false. operator !=(InterfacePreferences?, InterfacePreferences?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(InterfacePreferences? left, InterfacePreferences? right) Parameters left InterfacePreferences The left object right InterfacePreferences The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Preferences.html": {
    "href": "api/ZeroInstall.Model.Preferences.html",
    "title": "Namespace ZeroInstall.Model.Preferences | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Model.Preferences Structures for user-specified preferences and overrides for interfaces, feeds and implementations. Classes FeedPreferences Stores user-specific preferences for a Feed. ImplementationPreferences Stores user-specific preferences for an Implementation. InterfacePreferences Stores user-specific preferences for an interface."
  },
  "api/ZeroInstall.Model.Recipe.html": {
    "href": "api/ZeroInstall.Model.Recipe.html",
    "title": "Class Recipe | Zero Install .NET API",
    "summary": "Class Recipe Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Retrieves an implementation by applying a list of IRecipeSteps, such as downloading and combining multiple archives. [Serializable] [Equatable] public sealed class Recipe : RetrievalMethod, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<RetrievalMethod>, IEquatable<Recipe> Inheritance object XmlUnknown FeedElement RetrievalMethod Recipe Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<RetrievalMethod> IEquatable<Recipe> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ContainsUnknownSteps Indicates whether this recipe contains steps of unknown type and therefore can not be processed. [Browsable(false)] [IgnoreEquality] public bool ContainsUnknownSteps { get; } Property Value bool Steps An ordered list of IRecipeSteps to execute. [OrderedEquality] public List<IRecipeStep> Steps { get; } Property Value List<IRecipeStep> Methods Clone() Creates a deep copy of this Recipe instance. public override RetrievalMethod Clone() Returns RetrievalMethod The new copy of the Recipe. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Converts legacy elements, sets default values, etc.. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. InvalidDataException A required property is not set or invalid. ToString() Returns the recipe in the form \"Recipe (X steps)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Recipe?, Recipe?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Recipe? left, Recipe? right) Parameters left Recipe The left object right Recipe The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Recipe?, Recipe?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Recipe? left, Recipe? right) Parameters left Recipe The left object right Recipe The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.RemoveStep.html": {
    "href": "api/ZeroInstall.Model.RemoveStep.html",
    "title": "Class RemoveStep | Zero Install .NET API",
    "summary": "Class RemoveStep Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Removes or moves a file or directory. It is an error if the path is outside the implementation. [Serializable] [Equatable] public sealed class RemoveStep : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IRecipeStep, ICloneable<IRecipeStep>, IEquatable<RemoveStep> Inheritance object XmlUnknown FeedElement RemoveStep Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IRecipeStep ICloneable<IRecipeStep> IEquatable<RemoveStep> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Path The file or directory to be removed relative to the implementation root as a Unix-style path. public required string Path { get; set; } Property Value string Methods Clone() Creates a deep copy of this RemoveStep instance. public IRecipeStep Clone() Returns IRecipeStep The new copy of the RemoveStep. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Converts legacy elements, sets default values, etc.. public void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. ToString() Returns the remove step in the form \"Path\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(RemoveStep?, RemoveStep?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(RemoveStep? left, RemoveStep? right) Parameters left RemoveStep The left object right RemoveStep The right object Returns bool true if the objects are equal; otherwise, false. operator !=(RemoveStep?, RemoveStep?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(RemoveStep? left, RemoveStep? right) Parameters left RemoveStep The left object right RemoveStep The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.RenameStep.html": {
    "href": "api/ZeroInstall.Model.RenameStep.html",
    "title": "Class RenameStep | Zero Install .NET API",
    "summary": "Class RenameStep Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Renames or moves a file or directory. It is an error if the source or destination are outside the implementation. [Serializable] [Equatable] public sealed class RenameStep : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IRecipeStep, ICloneable<IRecipeStep>, IEquatable<RenameStep> Inheritance object XmlUnknown FeedElement RenameStep Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IRecipeStep ICloneable<IRecipeStep> IEquatable<RenameStep> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Destination The destination file or directory relative to the implementation root as a Unix-style path. public required string Destination { get; set; } Property Value string Source The source file or directory relative to the implementation root as a Unix-style path. public required string Source { get; set; } Property Value string Methods Clone() Creates a deep copy of this RenameStep instance. public IRecipeStep Clone() Returns IRecipeStep The new copy of the RenameStep. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Converts legacy elements, sets default values, etc.. public void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. ToString() Returns the rename step in the form \"Source => Destination\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(RenameStep?, RenameStep?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(RenameStep? left, RenameStep? right) Parameters left RenameStep The left object right RenameStep The right object Returns bool true if the objects are equal; otherwise, false. operator !=(RenameStep?, RenameStep?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(RenameStep? left, RenameStep? right) Parameters left RenameStep The left object right RenameStep The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Requirements.html": {
    "href": "api/ZeroInstall.Model.Requirements.html",
    "title": "Class Requirements | Zero Install .NET API",
    "summary": "Class Requirements Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A set of requirements/restrictions imposed by the user on the Implementation selection process. Used as input for the solver. [Serializable] [Equatable] public record Requirements : IEquatable<Requirements> Inheritance object Requirements Implements IEquatable<Requirements> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Requirements() Creates an empty requirements object. Use this to fill in values incrementally, e.g. when parsing command-line arguments. public Requirements() Requirements(FeedUri, string?, Architecture) Creates a new requirements object. public Requirements(FeedUri interfaceUri, string? command = null, Architecture architecture = default) Parameters interfaceUri FeedUri The URI or local path (must be absolute) to the interface to solve the dependencies for. command string The name of the command in the implementation to execute. Will default to NameRun or NameCompile if null. Will not try to find any command if set to Empty. architecture Architecture The architecture to find executables for. Find for the current system if left at default value. Properties Architecture The architecture to find executables for. Find for the current system if left at default value. [JsonIgnore] public Architecture Architecture { get; set; } Property Value Architecture Remarks Will default to CurrentSystem if left at default value. Will not try to find any command if set to Empty. Command The name of the command in the implementation to execute. Will default to NameRun or NameCompile if null. Will not try to find any command if set to Empty. [TypeConverter(typeof(CommandNameConverter))] [JsonProperty(\"command\")] public string? Command { get; set; } Property Value string CpuString Used for XML and JSON serialization. [Browsable(false)] [JsonProperty(\"cpu\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string CpuString { get; set; } Property Value string See Also Architecture Distributions Specifies that the selected implementations must be from one of the given distributions (e.g. Debian, RPM). The special value DistributionZeroInstall may be used to require implementations provided by Zero Install (i.e. one not provided by a PackageImplementation). [Browsable(false)] [JsonIgnore] [UnorderedEquality] public List<string> Distributions { get; } Property Value List<string> Remarks Used internally by solvers, copied from Distributions, not set directly by user, not serialized. ExtraRestrictions The ranges of versions of specific sub-implementations that can be chosen. [JsonProperty(\"extra_restrictions\")] [UnorderedEquality] public Dictionary<FeedUri, VersionRange> ExtraRestrictions { get; } Property Value Dictionary<FeedUri, VersionRange> InterfaceUri The URI or local path (must be absolute) to the interface to solve the dependencies for. [JsonProperty(\"interface\")] public required FeedUri InterfaceUri { get; set; } Property Value FeedUri Languages The preferred languages for the implementation. [JsonIgnore] [SetEquality] public LanguageSet Languages { get; } Property Value LanguageSet Message Message to display when interacting with user. [JsonProperty(\"message\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string? Message { get; set; } Property Value string OSString Used for XML and JSON serialization. [Browsable(false)] [JsonProperty(\"os\", DefaultValueHandling = DefaultValueHandling.Ignore)] public string OSString { get; set; } Property Value string See Also Architecture Source Used for XML and JSON serialization. [Browsable(false)] [JsonProperty(\"source\")] public bool Source { get; set; } Property Value bool See Also Architecture Versions The ranges of versions that can be chosen. [Browsable(false)] [JsonIgnore] public VersionRange? Versions { get; set; } Property Value VersionRange Methods AddRestriction(FeedUri, VersionRange) Adds version restriction for a specific feeds. Merges with any existing restrictions for that feed. public void AddRestriction(FeedUri feedUri, VersionRange versions) Parameters feedUri FeedUri The feed URI to apply the restriction for. versions VersionRange The version range set to restrict to. Equals(Requirements?) Indicates whether the current object is equal to another object of the same type. public virtual bool Equals(Requirements? other) Parameters other Requirements An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. ForCurrentSystem() Substitutes blank values with default values appropriate for the current system. public Requirements ForCurrentSystem() Returns Requirements GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToCommandLineArgs() Transforms the requirements into a command-line arguments. public IReadOnlyList<string> ToCommandLineArgs() Returns IReadOnlyList<string> ToString() Returns the requirements in the form \"InterfaceUri (Command)\". Not safe for parsing! public override string ToString() Returns string Operators implicit operator Requirements(FeedUri) Convenience cast for creating simple Requirements from a FeedUri. public static implicit operator Requirements(FeedUri uri) Parameters uri FeedUri Returns Requirements"
  },
  "api/ZeroInstall.Model.Restriction.html": {
    "href": "api/ZeroInstall.Model.Restriction.html",
    "title": "Class Restriction | Zero Install .NET API",
    "summary": "Class Restriction Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Restricts the versions of an Implementation that are allowed without creating a dependency on the implementation if its was not already chosen. [Serializable] [Equatable] public class Restriction : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IInterfaceUri, ICloneable<Restriction>, IEquatable<Restriction> Inheritance object XmlUnknown FeedElement Restriction Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IInterfaceUri ICloneable<Restriction> IEquatable<Restriction> Derived Dependency Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields DistributionZeroInstall Special value for Distributions that requires require an implementation provided by Zero Install (i.e. one not provided by a PackageImplementation). public const string DistributionZeroInstall = \"0install\" Field Value string Properties Constraints A list of version Constraints that must be fulfilled. [Browsable(false)] [OrderedEquality] public List<Constraint> Constraints { get; } Property Value List<Constraint> Distributions Specifies that the selected implementation must be from one of the given distributions (e.g. Debian, RPM). The special value DistributionZeroInstall may be used to require an implementation provided by Zero Install (i.e. one not provided by a PackageImplementation). [Browsable(false)] [OrderedEquality] public List<string> Distributions { get; } Property Value List<string> See Also KnownDistributions DistributionsString Used for XML serialization. [TypeConverter(typeof(DistributionNameConverter))] [IgnoreEquality] public string DistributionsString { get; set; } Property Value string See Also Distributions InterfaceUri The URI or local path used to identify the interface. public required FeedUri InterfaceUri { get; set; } Property Value FeedUri OS Determines for which operating systems this dependency is required. public OS OS { get; set; } Property Value OS Versions A more flexible alternative to Constraints. Each range is in the form \"START..!END\". The range matches versions where START <= VERSION < END. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or !VERSION to match everything except that version. public VersionRange? Versions { get; set; } Property Value VersionRange XmlTagName protected virtual string XmlTagName { get; } Property Value string Methods Clone() Creates a deep copy of this Restriction instance. public virtual Restriction Clone() Returns Restriction The new copy of the Restriction. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Restriction?) protected bool Equals(Restriction? other) Parameters other Restriction Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsApplicable(Requirements) Determines whether this reference is applicable for the given requirements. public virtual bool IsApplicable(Requirements requirements) Parameters requirements Requirements Returns bool Normalize() Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public virtual void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the dependency in the form \"Interface\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Restriction?, Restriction?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Restriction? left, Restriction? right) Parameters left Restriction The left object right Restriction The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Restriction?, Restriction?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Restriction? left, Restriction? right) Parameters left Restriction The left object right Restriction The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.RetrievalMethod.html": {
    "href": "api/ZeroInstall.Model.RetrievalMethod.html",
    "title": "Class RetrievalMethod | Zero Install .NET API",
    "summary": "Class RetrievalMethod Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A retrieval method is a way of getting a copy of an Implementation. public abstract class RetrievalMethod : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<RetrievalMethod> Inheritance object XmlUnknown FeedElement RetrievalMethod Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<RetrievalMethod> Derived DownloadRetrievalMethod Recipe ExternalRetrievalMethod Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(object) FeedElement.Equals(FeedElement) FeedElement.GetHashCode() XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clone() Creates a deep copy of this RetrievalMethod instance. public abstract RetrievalMethod Clone() Returns RetrievalMethod The new copy of the RetrievalMethod. Normalize(FeedUri?) Sets missing default values and handles legacy elements. public virtual void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. InvalidDataException A required property is not set or invalid."
  },
  "api/ZeroInstall.Model.Runner.html": {
    "href": "api/ZeroInstall.Model.Runner.html",
    "title": "Class Runner | Zero Install .NET API",
    "summary": "Class Runner Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A special kind of dependency: the program that is used to run this one. For example, a Python program might specify Python as its runner. [Serializable] [Equatable] public class Runner : Dependency, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<Restriction>, IEquatable<Restriction>, IInterfaceUriBindingContainer, IInterfaceUri, IBindingContainer, ICloneable<Dependency>, IEquatable<Dependency>, IArgBaseContainer, IEquatable<Runner> Inheritance object XmlUnknown FeedElement Restriction Dependency Runner Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<Restriction> IEquatable<Restriction> IInterfaceUriBindingContainer IInterfaceUri IBindingContainer ICloneable<Dependency> IEquatable<Dependency> IArgBaseContainer IEquatable<Runner> Inherited Members Dependency.Importance Dependency.Use Dependency.Bindings Dependency.IsApplicable(Requirements) Dependency.Equals(Dependency) Restriction.InterfaceUri Restriction.OS Restriction.Versions Restriction.Constraints Restriction.DistributionZeroInstall Restriction.Distributions Restriction.DistributionsString Restriction.Equals(Restriction) FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Arguments A list of command-line arguments to be passed to the runner before the path of the implementation. [Browsable(false)] [OrderedEquality] public List<ArgBase> Arguments { get; } Property Value List<ArgBase> Command The name of the command in the InterfaceUri to use; leave null for NameRun. [TypeConverter(typeof(CommandNameConverter))] public string? Command { get; set; } Property Value string XmlTagName protected override string XmlTagName { get; } Property Value string Methods Clone() Creates a deep copy of this Runner instance. public override Restriction Clone() Returns Restriction The new copy of the Runner. CloneRunner() Creates a deep copy of this Runner instance. public Runner CloneRunner() Returns Runner The new copy of the Runner. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Runner?) protected bool Equals(Runner? other) Parameters other Runner Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize() Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public override void Normalize() Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the runner in the form \"Interface (Command)\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(Runner?, Runner?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Runner? left, Runner? right) Parameters left Runner The left object right Runner The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Runner?, Runner?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Runner? left, Runner? right) Parameters left Runner The left object right Runner The right object Returns bool true if the objects are not equal; otherwise, false. See Also Runner"
  },
  "api/ZeroInstall.Model.Selection.ImplementationSelection.html": {
    "href": "api/ZeroInstall.Model.Selection.ImplementationSelection.html",
    "title": "Class ImplementationSelection | Zero Install .NET API",
    "summary": "Class ImplementationSelection Namespace ZeroInstall.Model.Selection Assembly ZeroInstall.Model.dll An executable implementation of a Feed as a part of a Selections. [Equatable] public sealed class ImplementationSelection : ImplementationBase, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IDependencyContainer, ICloneable<Element>, IEquatable<Element>, IEquatable<ImplementationBase>, IInterfaceUriBindingContainer, IInterfaceUri, IBindingContainer, ICloneable<ImplementationSelection>, IComparable<ImplementationSelection>, IEquatable<ImplementationSelection> Inheritance object XmlUnknown FeedElement TargetBase Element ImplementationBase ImplementationSelection Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IDependencyContainer ICloneable<Element> IEquatable<Element> IEquatable<ImplementationBase> IInterfaceUriBindingContainer IInterfaceUri IBindingContainer ICloneable<ImplementationSelection> IComparable<ImplementationSelection> IEquatable<ImplementationSelection> Inherited Members ImplementationBase.ID ImplementationBase.LocalPath ImplementationBase.Version ImplementationBase.ManifestDigest Element.ReleaseDateFormat Element.VersionModifier Element.Released Element.ReleasedString Element.Stability Element.RolloutPercentage Element.License Element.Main Element.SelfTest Element.DocDir Element.Dependencies Element.Restrictions Element.Bindings Element.Commands Element.ContainsCommand(string) Element.this[string] Element.GetCommand(string) TargetBase.Languages TargetBase.Architecture FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods DependencyContainerExtensions.GetEffectiveRestrictions(IDependencyContainer) Remarks This class does not contain information on how to download the implementation in case it is not in cache. That must be obtained from a Implementation instance. Constructors ImplementationSelection() Used for XML serialization. public ImplementationSelection() ImplementationSelection(IReadOnlyList<SelectionCandidate>) Creates a new implementation selection. public ImplementationSelection(IReadOnlyList<SelectionCandidate> candidates) Parameters candidates IReadOnlyList<SelectionCandidate> All candidates that were considered for selection (including the selected one). These are used to present the user with possible alternatives. Properties Candidates All Implementations that were considered by the solver when this one was chosen. null when selections are loaded from a file. [Browsable(false)] [IgnoreEquality] public IReadOnlyList<SelectionCandidate>? Candidates { get; } Property Value IReadOnlyList<SelectionCandidate> Distribution The name of the distribution (e.g. Debian, RPM) where this implementation comes from, if any. [Browsable(false)] [IgnoreEquality] public string? Distribution { get; } Property Value string FromFeed The URL or local path of the feed that contains this implementation. FromDistributionPrefix is prepended if data is pulled from a native package manager. If null or Empty use InterfaceUri instead. public FeedUri? FromFeed { get; set; } Property Value FeedUri InterfaceUri The URI or local path of the interface this implementation is for. public required FeedUri InterfaceUri { get; set; } Property Value FeedUri QuickTestFile A file which, if present, indicates that the selection is still valid. This is sometimes used with distribution-provided selections. If not present and the ID starts with \"package:\", you'll need to query the distribution's package manager to check that this version is still installed. public string? QuickTestFile { get; set; } Property Value string Methods Clone() Creates a deep copy of this ImplementationSelection instance. public override Element Clone() Returns Element The new copy of the ImplementationSelection. CompareTo(ImplementationSelection?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(ImplementationSelection? other) Parameters other ImplementationSelection An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Flattens inheritance structures, Converts legacy elements, sets default values, etc.. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions InvalidDataException A required property is not set or invalid. ToString() Returns the implementation in the form \"Comma-separated list of set values\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ImplementationSelection?, ImplementationSelection?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ImplementationSelection? left, ImplementationSelection? right) Parameters left ImplementationSelection The left object right ImplementationSelection The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ImplementationSelection?, ImplementationSelection?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ImplementationSelection? left, ImplementationSelection? right) Parameters left ImplementationSelection The left object right ImplementationSelection The right object Returns bool true if the objects are not equal; otherwise, false. See Also Implementations"
  },
  "api/ZeroInstall.Model.Selection.SelectionCandidate.html": {
    "href": "api/ZeroInstall.Model.Selection.SelectionCandidate.html",
    "title": "Class SelectionCandidate | Zero Install .NET API",
    "summary": "Class SelectionCandidate Namespace ZeroInstall.Model.Selection Assembly ZeroInstall.Model.dll Represents an Implementation that is available to a solver for selection. public sealed class SelectionCandidate : IEquatable<SelectionCandidate> Inheritance object SelectionCandidate Implements IEquatable<SelectionCandidate> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SelectionCandidate(FeedUri, FeedPreferences, Implementation, Requirements, bool) Creates a new selection candidate. public SelectionCandidate(FeedUri feedUri, FeedPreferences feedPreferences, Implementation implementation, Requirements requirements, bool offlineUncached = false) Parameters feedUri FeedUri The file name or URL of the feed listing the implementation. feedPreferences FeedPreferences The FeedPreferences for FeedUri. implementation Implementation The implementation this selection candidate references. requirements Requirements A set of requirements/restrictions the implementation needs to fulfill for IsSuitable to be true. offlineUncached bool Mark this candidate as unsuitable because it is uncached and the network mode is set to offline. Properties Architecture For platform-specific binaries, the platform for which an Implementation was compiled, in the form os-cpu. Either the os or cpu part may be *, which will make it available on any OS or CPU. public string Architecture { get; } Property Value string EffectiveStability The UserStability if it is set, otherwise Stability. [Browsable(false)] public Stability EffectiveStability { get; } Property Value Stability FeedPreferences The FeedPreferences for FeedUri. [Browsable(false)] public FeedPreferences FeedPreferences { get; } Property Value FeedPreferences FeedUri The file name or URL of the feed listing the implementation. public FeedUri FeedUri { get; } Property Value FeedUri Implementation The implementation this selection candidate references. [Browsable(false)] public Implementation Implementation { get; } Property Value Implementation IsSuitable Indicates whether this implementation fulfills all specified Requirements. [Browsable(false)] public bool IsSuitable { get; } Property Value bool Notes Human-readable notes about the implementation, e.g. \"not suitable for this architecture\". public string? Notes { get; } Property Value string Released The date this implementation was made available. For development versions checked out from version control this attribute should not be present. public DateTime Released { get; } Property Value DateTime Stability The feed-specified stability rating for this implementation. public Stability Stability { get; } Property Value Stability UserStability A user-specified override for the Stability specified in the feed. public Stability UserStability { get; set; } Property Value Stability Version The version number of the implementation. public ImplementationVersion Version { get; } Property Value ImplementationVersion Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(SelectionCandidate?) Indicates whether the current object is equal to another object of the same type. public bool Equals(SelectionCandidate? other) Parameters other SelectionCandidate An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the selection candidate in the form \"SelectionCandidate: Implementation\". Not safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Model.Selection.SelectionCandidateExtensions.html": {
    "href": "api/ZeroInstall.Model.Selection.SelectionCandidateExtensions.html",
    "title": "Class SelectionCandidateExtensions | Zero Install .NET API",
    "summary": "Class SelectionCandidateExtensions Namespace ZeroInstall.Model.Selection Assembly ZeroInstall.Model.dll Provides extension methods for SelectionCandidate. public static class SelectionCandidateExtensions Inheritance object SelectionCandidateExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSuitableVersions(IEnumerable<SelectionCandidate>) Returns a deduplicated list of suitable version numbers, sorted from newest to oldest. public static IEnumerable<ImplementationVersion> GetSuitableVersions(this IEnumerable<SelectionCandidate> candidates) Parameters candidates IEnumerable<SelectionCandidate> Returns IEnumerable<ImplementationVersion>"
  },
  "api/ZeroInstall.Model.Selection.Selections.html": {
    "href": "api/ZeroInstall.Model.Selection.Selections.html",
    "title": "Class Selections | Zero Install .NET API",
    "summary": "Class Selections Namespace ZeroInstall.Model.Selection Assembly ZeroInstall.Model.dll Represents a set of ImplementationBases chosen by a solver. [Serializable] [Equatable] public sealed class Selections : XmlUnknown, IEquatable<XmlUnknown>, IInterfaceUri, ICloneable<Selections>, IEquatable<Selections> Inheritance object XmlUnknown Selections Implements IEquatable<XmlUnknown> IInterfaceUri ICloneable<Selections> IEquatable<Selections> Inherited Members XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks See also: https://docs.0install.net/specifications/selections/ Properties Command The name of the Command in the interface to be started. public string? Command { get; set; } Property Value string Implementations A list of ImplementationSelections chosen in this selection. [UnorderedEquality] public List<ImplementationSelection> Implementations { get; } Property Value List<ImplementationSelection> InterfaceUri The URI or local path of the interface this selection is based on. public required FeedUri InterfaceUri { get; set; } Property Value FeedUri this[FeedUri] Returns the ImplementationSelection for a specific interface. public ImplementationSelection this[FeedUri interfaceUri] { get; } Parameters interfaceUri FeedUri The InterfaceUri to look for. Property Value ImplementationSelection The first matching implementation. Exceptions KeyNotFoundException No matching implementation was found. MainImplementation The main implementation in the selection (the actual program to launch). Identified by InterfaceUri. public ImplementationSelection MainImplementation { get; } Property Value ImplementationSelection Exceptions KeyNotFoundException No ImplementationSelection matching InterfaceUri was found in Implementations. Name The name specified by the feed at InterfaceUri. public string? Name { get; set; } Property Value string Source Indicates whether the selection was generated for Source. public bool Source { get; set; } Property Value bool Methods Clone() Creates a deep copy of this Selections instance. public Selections Clone() Returns Selections The new copy of the Selections. ContainsImplementation(FeedUri) Determines whether an ImplementationSelection for a specific interface is listed in the selection. public bool ContainsImplementation(FeedUri interfaceUri) Parameters interfaceUri FeedUri The InterfaceUri to look for. Returns bool true if an implementation was found; false otherwise. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetImplementation(FeedUri) Returns the ImplementationSelection for a specific interface. Safe for missing elements. public ImplementationSelection? GetImplementation(FeedUri interfaceUri) Parameters interfaceUri FeedUri The InterfaceUri to look for. Returns ImplementationSelection The first matching implementation; null if no matching one was found. Normalize() Calls Normalize(FeedUri?) for all Implementations. public void Normalize() Exceptions InvalidDataException A required property is not set or invalid. RestrictionsFor(FeedUri) Gets a list of all Restrictions and Dependency that point to a specific interfaceUri. public IEnumerable<Restriction> RestrictionsFor(FeedUri interfaceUri) Parameters interfaceUri FeedUri Returns IEnumerable<Restriction> ToString() Returns the selections as XML. Not safe for parsing! public override string ToString() Returns string Operators operator ==(Selections?, Selections?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Selections? left, Selections? right) Parameters left Selections The left object right Selections The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Selections?, Selections?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Selections? left, Selections? right) Parameters left Selections The left object right Selections The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Selection.TestCase.html": {
    "href": "api/ZeroInstall.Model.Selection.TestCase.html",
    "title": "Class TestCase | Zero Install .NET API",
    "summary": "Class TestCase Namespace ZeroInstall.Model.Selection Assembly ZeroInstall.Model.dll A test case describing Requirements and the Selections they are expected to lead to. Used for automated testing of Solvers. public class TestCase Inheritance object TestCase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AddDownloads public bool AddDownloads { get; set; } Property Value bool Feeds A list of input Feeds for the solver. public List<Feed> Feeds { get; } Property Value List<Feed> Name public required string Name { get; set; } Property Value string Problem A string describing the expected solver error message or null if no failure is expected. public string? Problem { get; set; } Property Value string Requirements The input requirements for the solver. public required Requirements Requirements { get; set; } Property Value Requirements Selections The expected output of the solver. public Selections? Selections { get; set; } Property Value Selections Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ZeroInstall.Model.Selection.TestCaseSet.html": {
    "href": "api/ZeroInstall.Model.Selection.TestCaseSet.html",
    "title": "Class TestCaseSet | Zero Install .NET API",
    "summary": "Class TestCaseSet Namespace ZeroInstall.Model.Selection Assembly ZeroInstall.Model.dll A set of test case describing Requirements and the Selections they are expected to lead to. Used for automated testing of Solvers. [XmlNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")] public class TestCaseSet Inheritance object TestCaseSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TestCases A list of input Feeds for the solver. public List<TestCase> TestCases { get; } Property Value List<TestCase>"
  },
  "api/ZeroInstall.Model.Selection.html": {
    "href": "api/ZeroInstall.Model.Selection.html",
    "title": "Namespace ZeroInstall.Model.Selection | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Model.Selection Structures for representing Solver results. Classes ImplementationSelection An executable implementation of a Feed as a part of a Selections. SelectionCandidate Represents an Implementation that is available to a solver for selection. SelectionCandidateExtensions Provides extension methods for SelectionCandidate. Selections Represents a set of ImplementationBases chosen by a solver. TestCase A test case describing Requirements and the Selections they are expected to lead to. Used for automated testing of Solvers. TestCaseSet A set of test case describing Requirements and the Selections they are expected to lead to. Used for automated testing of Solvers."
  },
  "api/ZeroInstall.Model.SingleFile.html": {
    "href": "api/ZeroInstall.Model.SingleFile.html",
    "title": "Class SingleFile | Zero Install .NET API",
    "summary": "Class SingleFile Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Retrieves an implementation by downloading a single file. [Serializable] [Equatable] public sealed class SingleFile : DownloadRetrievalMethod, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<RetrievalMethod>, IRecipeStep, ICloneable<IRecipeStep>, IEquatable<DownloadRetrievalMethod>, IEquatable<SingleFile> Inheritance object XmlUnknown FeedElement RetrievalMethod DownloadRetrievalMethod SingleFile Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<RetrievalMethod> IRecipeStep ICloneable<IRecipeStep> IEquatable<DownloadRetrievalMethod> IEquatable<SingleFile> Inherited Members DownloadRetrievalMethod.Href DownloadRetrievalMethod.Size DownloadRetrievalMethod.DownloadSize FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Destination The file's target path relative to the implementation root as a Unix-style path. public required string Destination { get; set; } Property Value string Executable Set this to true to mark the file as executable. public bool Executable { get; set; } Property Value bool Methods Clone() Creates a deep copy of this SingleFile instance. public override RetrievalMethod Clone() Returns RetrievalMethod The new copy of the SingleFile. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Normalize(FeedUri?) Sets missing default values and handles legacy elements. public override void Normalize(FeedUri? feedUri = null) Parameters feedUri FeedUri The feed the data was originally loaded from. Exceptions UriFormatException Href is relative and feedUri is a remote URI. InvalidDataException A required property is not set or invalid. ToString() Returns the file in the form \"Location (Size) => Destination\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(SingleFile?, SingleFile?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(SingleFile? left, SingleFile? right) Parameters left SingleFile The left object right SingleFile The right object Returns bool true if the objects are equal; otherwise, false. operator !=(SingleFile?, SingleFile?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(SingleFile? left, SingleFile? right) Parameters left SingleFile The left object right SingleFile The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Stability.html": {
    "href": "api/ZeroInstall.Model.Stability.html",
    "title": "Enum Stability | Zero Install .NET API",
    "summary": "Enum Stability Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A stability rating for an Implementation. public enum Stability Fields Buggy = 6 Known bugs, none security-related. Developer = 5 More extreme version of Testing, expected to have bugs. Insecure = 7 Known bugs, some or all security-related. Packaged = 2 Indicates that an implementation is provided as a PackageImplementation. Preferred = 1 Set by user as a personal preference overriding other stability criteria. Stable = 3 No serious problems. Testing = 4 Any new release. Unset = 0 Inherit stability from Group or default to Testing"
  },
  "api/ZeroInstall.Model.TargetBase.html": {
    "href": "api/ZeroInstall.Model.TargetBase.html",
    "title": "Class TargetBase | Zero Install .NET API",
    "summary": "Class TargetBase Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Abstract base class for Element and FeedReference. Contains language and architecture parameters. [Equatable] public abstract class TargetBase : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase> Inheritance object XmlUnknown FeedElement TargetBase Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> Derived Element FeedReference Inherited Members FeedElement.IfZeroInstallVersion FeedElement.FilterMismatch<T>(T) FeedElement.FilterMismatch(IRecipeStep) FeedElement.Equals(FeedElement) XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.EnsureAttribute(object, string) XmlUnknown.EnsureAttributeSafeID(string, string) XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Architecture For platform-specific binaries, the platform for which an Implementation was compiled. public Architecture Architecture { get; set; } Property Value Architecture Remarks The injector knows that certain platforms are backwards-compatible with others, so binaries with arch=\"Linux-i486\" will still be available on Linux-i686 machines, for example. Languages The natural language(s) which an Implementation supports. [SetEquality] public LanguageSet Languages { get; set; } Property Value LanguageSet Examples For example, the value \"en_GB fr\" would be used for a package supporting British English and French. Methods CloneFromTo(TargetBase, TargetBase) Copies all known values from one instance to another. Helper method for instance cloning. protected static void CloneFromTo(TargetBase from, TargetBase to) Parameters from TargetBase to TargetBase Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(TargetBase?) protected bool Equals(TargetBase? other) Parameters other TargetBase Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(TargetBase?, TargetBase?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(TargetBase? left, TargetBase? right) Parameters left TargetBase The left object right TargetBase The right object Returns bool true if the objects are equal; otherwise, false. operator !=(TargetBase?, TargetBase?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(TargetBase? left, TargetBase? right) Parameters left TargetBase The left object right TargetBase The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Trust.Domain.html": {
    "href": "api/ZeroInstall.Model.Trust.Domain.html",
    "title": "Struct Domain | Zero Install .NET API",
    "summary": "Struct Domain Namespace ZeroInstall.Model.Trust Assembly ZeroInstall.Model.dll A specific domain with feeds a Key is trusted to sign. public record struct Domain : IEquatable<Domain> Implements IEquatable<Domain> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Domain(string?) A specific domain with feeds a Key is trusted to sign. public Domain(string? Value = null) Parameters Value string A valid domain name (not a full Uri!). Properties Value A valid domain name (not a full Uri!). public string? Value { readonly get; set; } Property Value string Methods ToString() Returns the fully qualified type name of this instance. public override string? ToString() Returns string The fully qualified type name."
  },
  "api/ZeroInstall.Model.Trust.DomainSet.html": {
    "href": "api/ZeroInstall.Model.Trust.DomainSet.html",
    "title": "Class DomainSet | Zero Install .NET API",
    "summary": "Class DomainSet Namespace ZeroInstall.Model.Trust Assembly ZeroInstall.Model.dll A set of alphabetically sorted Domains. public class DomainSet : SortedSet<Domain>, ISet<Domain>, ICollection<Domain>, IReadOnlySet<Domain>, IReadOnlyCollection<Domain>, IEnumerable<Domain>, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object SortedSet<Domain> DomainSet Implements ISet<Domain> ICollection<Domain> IReadOnlySet<Domain> IReadOnlyCollection<Domain> IEnumerable<Domain> ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members SortedSet<Domain>.Add(Domain) SortedSet<Domain>.Clear() SortedSet<Domain>.Contains(Domain) SortedSet<Domain>.CopyTo(Domain[]) SortedSet<Domain>.CopyTo(Domain[], int) SortedSet<Domain>.CopyTo(Domain[], int, int) SortedSet<Domain>.CreateSetComparer() SortedSet<Domain>.CreateSetComparer(IEqualityComparer<Domain>) SortedSet<Domain>.ExceptWith(IEnumerable<Domain>) SortedSet<Domain>.GetEnumerator() SortedSet<Domain>.GetObjectData(SerializationInfo, StreamingContext) SortedSet<Domain>.GetViewBetween(Domain, Domain) SortedSet<Domain>.IntersectWith(IEnumerable<Domain>) SortedSet<Domain>.IsProperSubsetOf(IEnumerable<Domain>) SortedSet<Domain>.IsProperSupersetOf(IEnumerable<Domain>) SortedSet<Domain>.IsSubsetOf(IEnumerable<Domain>) SortedSet<Domain>.IsSupersetOf(IEnumerable<Domain>) SortedSet<Domain>.OnDeserialization(object) SortedSet<Domain>.Overlaps(IEnumerable<Domain>) SortedSet<Domain>.Remove(Domain) SortedSet<Domain>.RemoveWhere(Predicate<Domain>) SortedSet<Domain>.Reverse() SortedSet<Domain>.SetEquals(IEnumerable<Domain>) SortedSet<Domain>.SymmetricExceptWith(IEnumerable<Domain>) SortedSet<Domain>.TryGetValue(Domain, out Domain) SortedSet<Domain>.UnionWith(IEnumerable<Domain>) SortedSet<Domain>.Comparer SortedSet<Domain>.Count SortedSet<Domain>.Max SortedSet<Domain>.Min object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DomainSet() public DomainSet() Properties this[int] public Domain this[int index] { get; } Parameters index int Property Value Domain Methods ToString() Returns the list of domains in the form \"Domain1, Domain2, ...\". Safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Model.Trust.Key.html": {
    "href": "api/ZeroInstall.Model.Trust.Key.html",
    "title": "Class Key | Zero Install .NET API",
    "summary": "Class Key Namespace ZeroInstall.Model.Trust Assembly ZeroInstall.Model.dll A known OpenPGP key, trusted to sign feeds from a certain set of domains. [Equatable] public sealed class Key : ICloneable<Key>, IEquatable<Key> Inheritance object Key Implements ICloneable<Key> IEquatable<Key> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Domains A list of Domains this key is valid for. [SetEquality] public DomainSet Domains { get; } Property Value DomainSet Fingerprint The cryptographic fingerprint of this key. public string? Fingerprint { get; set; } Property Value string Methods Clone() Creates a deep copy of this Key instance. public Key Clone() Returns Key The new copy of the Key. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the key in the form \"Fingerprint: Domain1, Domain2, ...\". Safe for parsing! public override string ToString() Returns string Operators operator ==(Key?, Key?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Key? left, Key? right) Parameters left Key The left object right Key The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Key?, Key?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Key? left, Key? right) Parameters left Key The left object right Key The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Trust.TrustDB.html": {
    "href": "api/ZeroInstall.Model.Trust.TrustDB.html",
    "title": "Class TrustDB | Zero Install .NET API",
    "summary": "Class TrustDB Namespace ZeroInstall.Model.Trust Assembly ZeroInstall.Model.dll A database of OpenPGP signature fingerprints the users trusts to sign Feeds coming from specific domains. [XmlNamespace(\"xsi\", \"http://www.w3.org/2001/XMLSchema-instance\")] [Equatable] public sealed class TrustDB : ICloneable<TrustDB>, IEquatable<TrustDB> Inheritance object TrustDB Implements ICloneable<TrustDB> IEquatable<TrustDB> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields XmlNamespace The XML namespace used for storing trust-related data. public const string XmlNamespace = \"http://zero-install.sourceforge.net/2007/injector/trust\" Field Value string XsdLocation The URI to retrieve an XSD containing the XML Schema information for this class in serialized form. public const string XsdLocation = \"https://docs.0install.net/specifications/trust.xsd\" Field Value string XsiSchemaLocation Provides XML Editors with location hints for XSD files. public string XsiSchemaLocation Field Value string Properties Keys A list of known Keys. [UnorderedEquality] public List<Key> Keys { get; } Property Value List<Key> Methods Clone() Creates a deep copy of this TrustDB instance. public TrustDB Clone() Returns TrustDB The new copy of the TrustDB. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsTrusted(string, Domain) Checks whether a key is trusted for a specific domain. public bool IsTrusted(string fingerprint, Domain domain) Parameters fingerprint string The fingerprint of the key to check. domain Domain The domain the key should be valid for. Returns bool Load() Loads the TrustDB from the default locations, merging multiple files if found. Returns an empty TrustDB if no files were found. public static TrustDB Load() Returns TrustDB Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. Load(string) Loads the TrustDB from a file. public static TrustDB Load(string path) Parameters path string The file to load from. Returns TrustDB Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. LoadMachineWide() Loads the TrustDB from the machine-wide location. Returns an empty TrustDB if the file does not exist. public static TrustDB LoadMachineWide() Returns TrustDB Exceptions IOException A problem occurred while reading the file or creating a directory. UnauthorizedAccessException Read access to the file or creating a directory is not permitted. InvalidDataException A problem occurred while deserializing an XML file. LoadSafe() Tries to load the TrustDB from the default locations, merging multiple files if found. Returns an empty TrustDB on errors. public static TrustDB LoadSafe() Returns TrustDB Save(string?) Saves this TrustDB to a file. public void Save(string? path = null) Parameters path string The file to save to. Defaults to the location the file was loaded from or the user profile. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. TrustKey(string, Domain) Trusts feeds from a specific domain when signed with a specific key. public TrustDB TrustKey(string fingerprint, Domain domain) Parameters fingerprint string The fingerprint of the key to trust. domain Domain The domain the key should be trusted for. Returns TrustDB The same TrustDB, for fluent-style use. UntrustKey(string) Stops trusting feeds signed with a specific key. public bool UntrustKey(string fingerprint) Parameters fingerprint string The fingerprint of the key to remove. Returns bool true if the key was removed, false if the key was not found in the database. UntrustKey(string, Domain) Stops trusting feeds from a specific domain when signed with a specific key. public bool UntrustKey(string fingerprint, Domain domain) Parameters fingerprint string The fingerprint of the key to remove. domain Domain The domain the key should be removed for. Returns bool true if the key was removed, false if the key was not found in the database. Operators operator ==(TrustDB?, TrustDB?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(TrustDB? left, TrustDB? right) Parameters left TrustDB The left object right TrustDB The right object Returns bool true if the objects are equal; otherwise, false. operator !=(TrustDB?, TrustDB?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(TrustDB? left, TrustDB? right) Parameters left TrustDB The left object right TrustDB The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.Trust.html": {
    "href": "api/ZeroInstall.Model.Trust.html",
    "title": "Namespace ZeroInstall.Model.Trust | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Model.Trust Classes DomainSet A set of alphabetically sorted Domains. Key A known OpenPGP key, trusted to sign feeds from a certain set of domains. TrustDB A database of OpenPGP signature fingerprints the users trusts to sign Feeds coming from specific domains. Structs Domain A specific domain with feeds a Key is trusted to sign."
  },
  "api/ZeroInstall.Model.VersionDottedList.html": {
    "href": "api/ZeroInstall.Model.VersionDottedList.html",
    "title": "Struct VersionDottedList | Zero Install .NET API",
    "summary": "Struct VersionDottedList Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents a dotted-list part of a ImplementationVersion. [Serializable] public readonly struct VersionDottedList : IEquatable<VersionDottedList>, IComparable<VersionDottedList> Implements IEquatable<VersionDottedList> IComparable<VersionDottedList> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This is the syntax for valid dot-separated decimals: DottedList := (Integer (\".\" Integer)*) Constructors VersionDottedList(params long[]) Creates a new version dotted-list. public VersionDottedList(params long[] decimals) Parameters decimals long[] The numeric parts of the dotted-list. Properties Decimals The individual decimals. public IReadOnlyList<long>? Decimals { get; } Property Value IReadOnlyList<long> Methods CompareTo(VersionDottedList) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(VersionDottedList other) Parameters other VersionDottedList An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(VersionDottedList) Indicates whether the current object is equal to another object of the same type. public bool Equals(VersionDottedList other) Parameters other VersionDottedList An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsValid(string) Checks whether a string represents a valid dotted-list. public static bool IsValid(string value) Parameters value string Returns bool Parse(string) Parses a string into a version dotted-list. public static VersionDottedList Parse(string value) Parameters value string Returns VersionDottedList Exceptions FormatException value is not a valid version dotted-list. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(VersionDottedList, VersionDottedList) public static bool operator ==(VersionDottedList left, VersionDottedList right) Parameters left VersionDottedList right VersionDottedList Returns bool operator >(VersionDottedList, VersionDottedList) public static bool operator >(VersionDottedList left, VersionDottedList right) Parameters left VersionDottedList right VersionDottedList Returns bool operator >=(VersionDottedList, VersionDottedList) public static bool operator >=(VersionDottedList left, VersionDottedList right) Parameters left VersionDottedList right VersionDottedList Returns bool operator !=(VersionDottedList, VersionDottedList) public static bool operator !=(VersionDottedList left, VersionDottedList right) Parameters left VersionDottedList right VersionDottedList Returns bool operator <(VersionDottedList, VersionDottedList) public static bool operator <(VersionDottedList left, VersionDottedList right) Parameters left VersionDottedList right VersionDottedList Returns bool operator <=(VersionDottedList, VersionDottedList) public static bool operator <=(VersionDottedList left, VersionDottedList right) Parameters left VersionDottedList right VersionDottedList Returns bool"
  },
  "api/ZeroInstall.Model.VersionModifier.html": {
    "href": "api/ZeroInstall.Model.VersionModifier.html",
    "title": "Enum VersionModifier | Zero Install .NET API",
    "summary": "Enum VersionModifier Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll public enum VersionModifier Fields None = 0 No modifier; empty string Post = 1 Post-release Pre = -2 Pre-release RC = -1 Release candidate"
  },
  "api/ZeroInstall.Model.VersionPart.html": {
    "href": "api/ZeroInstall.Model.VersionPart.html",
    "title": "Struct VersionPart | Zero Install .NET API",
    "summary": "Struct VersionPart Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents a part of a ImplementationVersion containing nothing, a VersionModifier, a DottedList or both. [Serializable] public readonly struct VersionPart : IEquatable<VersionPart>, IComparable<VersionPart> Implements IEquatable<VersionPart> IComparable<VersionPart> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors VersionPart(VersionModifier, VersionDottedList) Creates a new version part. public VersionPart(VersionModifier modifier = VersionModifier.None, VersionDottedList dottedList = default) Parameters modifier VersionModifier The optional modifier prefix. dottedList VersionDottedList The dotted list part. Properties DottedList The dotted list part. public VersionDottedList DottedList { get; } Property Value VersionDottedList Modifier The optional modifier prefix. public VersionModifier Modifier { get; } Property Value VersionModifier Methods CompareTo(VersionPart) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(VersionPart other) Parameters other VersionPart An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(VersionPart) Indicates whether the current object is equal to another object of the same type. public bool Equals(VersionPart other) Parameters other VersionPart An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Parse(string) Parses a string into a version part. public static VersionPart Parse(string value) Parameters value string Returns VersionPart Exceptions FormatException value is not a valid version part. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(VersionPart, VersionPart) public static bool operator ==(VersionPart left, VersionPart right) Parameters left VersionPart right VersionPart Returns bool operator >(VersionPart, VersionPart) public static bool operator >(VersionPart left, VersionPart right) Parameters left VersionPart right VersionPart Returns bool operator >=(VersionPart, VersionPart) public static bool operator >=(VersionPart left, VersionPart right) Parameters left VersionPart right VersionPart Returns bool operator !=(VersionPart, VersionPart) public static bool operator !=(VersionPart left, VersionPart right) Parameters left VersionPart right VersionPart Returns bool operator <(VersionPart, VersionPart) public static bool operator <(VersionPart left, VersionPart right) Parameters left VersionPart right VersionPart Returns bool operator <=(VersionPart, VersionPart) public static bool operator <=(VersionPart left, VersionPart right) Parameters left VersionPart right VersionPart Returns bool"
  },
  "api/ZeroInstall.Model.VersionRange.html": {
    "href": "api/ZeroInstall.Model.VersionRange.html",
    "title": "Class VersionRange | Zero Install .NET API",
    "summary": "Class VersionRange Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents a (possibly disjoint) set of ranges of ImplementationVersions. [TypeConverter(typeof(StringConstructorConverter<VersionRange>))] [Serializable] [Equatable] public sealed class VersionRange : IEquatable<VersionRange> Inheritance object VersionRange Implements IEquatable<VersionRange> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks This class is immutable. Ranges are separated by pipes (|). Each range is in the form \"START..!END\". The range matches versions where START <= VERSION < END. The start or end may be omitted. A single version number may be used instead of a range to match only that version, or !VERSION to match everything except that version. Constructors VersionRange() Creates an empty version range (matches everything). public VersionRange() VersionRange(string) Creates a new version range set from a string. public VersionRange(string value) Parameters value string The string containing the version ranges. Exceptions FormatException value is not a valid version range string. VersionRange(params VersionRangePart[]) Creates a new version range set. public VersionRange(params VersionRangePart[] parts) Parameters parts VersionRangePart[] The individual ranges. Fields None An \"impossible\" range matching no versions. public static readonly VersionRange None Field Value VersionRange Properties Parts The individual ranges. [OrderedEquality] public IReadOnlyList<VersionRangePart> Parts { get; } Property Value IReadOnlyList<VersionRangePart> Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Intersect(VersionRange) Intersects another version range set with this one and returns a new set as the result. public VersionRange Intersect(VersionRange other) Parameters other VersionRange Returns VersionRange Match(ImplementationVersion) Determines whether a specific version lies within this range set. public bool Match(ImplementationVersion version) Parameters version ImplementationVersion Returns bool ToString() Returns a string representation of the version range set. Safe for parsing! public override string ToString() Returns string TryCreate(string, out VersionRange?) Creates a new VersionRange using the specified string representation. public static bool TryCreate(string value, out VersionRange? result) Parameters value string The string to parse. result VersionRange Returns the created VersionRange if successfully; null otherwise. Returns bool true if the VersionRange was successfully created; false otherwise. Operators operator ==(VersionRange?, VersionRange?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(VersionRange? left, VersionRange? right) Parameters left VersionRange The left object right VersionRange The right object Returns bool true if the objects are equal; otherwise, false. implicit operator VersionRange?(Constraint?) Convenience cast for Constraints into VersionRanges. public static implicit operator VersionRange?(Constraint? constraint) Parameters constraint Constraint Returns VersionRange implicit operator VersionRange?(ImplementationVersion?) Convenience cast for ImplementationVersions into VersionRanges that match that exact version. public static implicit operator VersionRange?(ImplementationVersion? version) Parameters version ImplementationVersion Returns VersionRange operator !=(VersionRange?, VersionRange?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(VersionRange? left, VersionRange? right) Parameters left VersionRange The left object right VersionRange The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Model.VersionRangePart.html": {
    "href": "api/ZeroInstall.Model.VersionRangePart.html",
    "title": "Class VersionRangePart | Zero Install .NET API",
    "summary": "Class VersionRangePart Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Represents an individual non-disjoint part of a VersionRange. public abstract record VersionRangePart : IEquatable<VersionRangePart> Inheritance object VersionRangePart Implements IEquatable<VersionRangePart> Derived VersionRangePartExact VersionRangePartExclude VersionRangePartRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Intersect(VersionRange) Intersects a set of version ranges with this individual range and returns the surviving parts. public abstract IEnumerable<VersionRangePart> Intersect(VersionRange versions) Parameters versions VersionRange Returns IEnumerable<VersionRangePart> Match(ImplementationVersion) Determines whether a specific version lies within this range. public abstract bool Match(ImplementationVersion version) Parameters version ImplementationVersion Returns bool Parse(string) Parses a string into a version range part. public static VersionRangePart Parse(string value) Parameters value string Returns VersionRangePart Exceptions FormatException value is not a valid version range string."
  },
  "api/ZeroInstall.Model.VersionRangePartExact.html": {
    "href": "api/ZeroInstall.Model.VersionRangePartExact.html",
    "title": "Class VersionRangePartExact | Zero Install .NET API",
    "summary": "Class VersionRangePartExact Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An exact version number like 2.0 as a part of a VersionRange. public sealed record VersionRangePartExact : VersionRangePart, IEquatable<VersionRangePart>, IEquatable<VersionRangePartExact> Inheritance object VersionRangePart VersionRangePartExact Implements IEquatable<VersionRangePart> IEquatable<VersionRangePartExact> Inherited Members VersionRangePart.Parse(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors VersionRangePartExact(ImplementationVersion) An exact version number like 2.0 as a part of a VersionRange. public VersionRangePartExact(ImplementationVersion Version) Parameters Version ImplementationVersion The exact version to match. Properties Version The exact version to match. public ImplementationVersion Version { get; init; } Property Value ImplementationVersion Methods Intersect(VersionRange) Intersects a set of version ranges with this individual range and returns the surviving parts. public override IEnumerable<VersionRangePart> Intersect(VersionRange versions) Parameters versions VersionRange Returns IEnumerable<VersionRangePart> Match(ImplementationVersion) Determines whether a specific version lies within this range. public override bool Match(ImplementationVersion version) Parameters version ImplementationVersion Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ZeroInstall.Model.VersionRangePartExclude.html": {
    "href": "api/ZeroInstall.Model.VersionRangePartExclude.html",
    "title": "Class VersionRangePartExclude | Zero Install .NET API",
    "summary": "Class VersionRangePartExclude Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll An exclusion like !2.0 as a part of a VersionRange. public sealed record VersionRangePartExclude : VersionRangePart, IEquatable<VersionRangePart>, IEquatable<VersionRangePartExclude> Inheritance object VersionRangePart VersionRangePartExclude Implements IEquatable<VersionRangePart> IEquatable<VersionRangePartExclude> Inherited Members VersionRangePart.Parse(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors VersionRangePartExclude(ImplementationVersion) An exclusion like !2.0 as a part of a VersionRange. public VersionRangePartExclude(ImplementationVersion Version) Parameters Version ImplementationVersion The version to be excluded. Properties Version The version to be excluded. public ImplementationVersion Version { get; init; } Property Value ImplementationVersion Methods Intersect(VersionRange) Intersects a set of version ranges with this individual range and returns the surviving parts. public override IEnumerable<VersionRangePart> Intersect(VersionRange versions) Parameters versions VersionRange Returns IEnumerable<VersionRangePart> Match(ImplementationVersion) Determines whether a specific version lies within this range. public override bool Match(ImplementationVersion version) Parameters version ImplementationVersion Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ZeroInstall.Model.VersionRangePartRange.html": {
    "href": "api/ZeroInstall.Model.VersionRangePartRange.html",
    "title": "Class VersionRangePartRange | Zero Install .NET API",
    "summary": "Class VersionRangePartRange Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll A version range like 1.0..!2.0 as a part of a VersionRange. public record VersionRangePartRange : VersionRangePart, IEquatable<VersionRangePart>, IEquatable<VersionRangePartRange> Inheritance object VersionRangePart VersionRangePartRange Implements IEquatable<VersionRangePart> IEquatable<VersionRangePartRange> Inherited Members VersionRangePart.Parse(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VersionRangePartRange(ImplementationVersion?, ImplementationVersion?) A version range like 1.0..!2.0 as a part of a VersionRange. public VersionRangePartRange(ImplementationVersion? LowerInclusive, ImplementationVersion? UpperExclusive) Parameters LowerInclusive ImplementationVersion The lower inclusive bound. May be null. UpperExclusive ImplementationVersion The upper exclusive bound. May be null. Properties LowerInclusive The lower inclusive bound. May be null. public ImplementationVersion? LowerInclusive { get; init; } Property Value ImplementationVersion UpperExclusive The upper exclusive bound. May be null. public ImplementationVersion? UpperExclusive { get; init; } Property Value ImplementationVersion Methods Intersect(VersionRange) Intersects a set of version ranges with this individual range and returns the surviving parts. public override IEnumerable<VersionRangePart> Intersect(VersionRange versions) Parameters versions VersionRange Returns IEnumerable<VersionRangePart> Match(ImplementationVersion) Determines whether a specific version lies within this range. public override bool Match(ImplementationVersion version) Parameters version ImplementationVersion Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ZeroInstall.Model.WorkingDir.html": {
    "href": "api/ZeroInstall.Model.WorkingDir.html",
    "title": "Class WorkingDir | Zero Install .NET API",
    "summary": "Class WorkingDir Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Switches the working directory of a process on startup to a location within an implementation. Useful for supporting legacy Windows applications which do not properly locate their installation directory. [Serializable] [Equatable] public sealed class WorkingDir : FeedElement, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<WorkingDir>, IEquatable<WorkingDir> Inheritance object XmlUnknown FeedElement WorkingDir Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<WorkingDir> IEquatable<WorkingDir> Inherited Members FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Source The relative path of the directory in the implementation to set as the working directory. Defaults to use the root of the implementation if unset. public string? Source { get; set; } Property Value string Methods Clone() Creates a deep copy of this WorkingDir instance. public WorkingDir Clone() Returns WorkingDir The new copy of the WorkingDir. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the binding in the form \"Source\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(WorkingDir?, WorkingDir?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(WorkingDir? left, WorkingDir? right) Parameters left WorkingDir The left object right WorkingDir The right object Returns bool true if the objects are equal; otherwise, false. operator !=(WorkingDir?, WorkingDir?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(WorkingDir? left, WorkingDir? right) Parameters left WorkingDir The left object right WorkingDir The right object Returns bool true if the objects are not equal; otherwise, false. See Also WorkingDir"
  },
  "api/ZeroInstall.Model.XmlUnknown.html": {
    "href": "api/ZeroInstall.Model.XmlUnknown.html",
    "title": "Class XmlUnknown | Zero Install .NET API",
    "summary": "Class XmlUnknown Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Abstract base class for XML serializable classes that are intended to retain any unknown XML elements or attributes loaded from an XML file. public abstract class XmlUnknown : IEquatable<XmlUnknown> Inheritance object XmlUnknown Implements IEquatable<XmlUnknown> Derived AccessPoint AccessPointList AppEntry AppList AutoPlayEvent BrowserExtension Capability CapabilityList FileTypeExtension KnownProtocolPrefix Verb Catalog Feed FeedElement FeedPreferences ImplementationPreferences InterfacePreferences Selections Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Inheriting from this class will prevent the UnknownElement event from being triggered. Fields UnknownAttributes Contains any unknown additional XML attributes. public XmlAttribute[]? UnknownAttributes Field Value XmlAttribute[] UnknownElements Contains any unknown additional XML elements. public XmlElement[]? UnknownElements Field Value XmlElement[] Methods EnsureAttribute(object?, string) Ensures that a value deserialized from an XML attribute is set (not null). protected void EnsureAttribute(object? value, string attributeName) Parameters value object The mapped value to check. attributeName string The name of the XML attribute. Exceptions InvalidDataException value is null. EnsureAttributeSafeID(string?, string) Ensures that a value deserialized from an XML attribute is set (not null) and only contains alphanumeric characters, spaces ( ), dots (.), underscores (_), hyphens (-) and plus signs (+). protected void EnsureAttributeSafeID(string? value, string attributeName) Parameters value string The mapped value to check. attributeName string The name of the XML attribute. Exceptions InvalidDataException value is invalid. Equals(XmlUnknown?) Indicates whether the current object is equal to another object of the same type. public bool Equals(XmlUnknown? other) Parameters other XmlUnknown An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToShortXml() Returns a shortened XML representation (with attributes but without child elements). public string ToShortXml() Returns string Remarks Intended for use in error messages. Not suitable for parsing. Use ToXmlString<T>(T, string) instead if you need a full XML representation."
  },
  "api/ZeroInstall.Model.ZeroInstallDeployment.html": {
    "href": "api/ZeroInstall.Model.ZeroInstallDeployment.html",
    "title": "Class ZeroInstallDeployment | Zero Install .NET API",
    "summary": "Class ZeroInstallDeployment Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Registers and discovers Zero Install deployments on this system. public static class ZeroInstallDeployment Inheritance object ZeroInstallDeployment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FindOther(bool) Tries to find a deployment of Zero Install that is not the currently running one. public static string? FindOther(bool needsMachineWide = false) Parameters needsMachineWide bool true if a machine-wide deployment is required; false if a user-specific deployment will also do. Returns string The directory path of an deployment of Zero Install; null if none was found. GetPath(bool) Tries to find a deployment of Zero Install. public static string? GetPath(bool machineWide) Parameters machineWide bool true to look for machine-wide deployments; false to look for user-specific deployments. Returns string The directory path of an deployment of Zero Install; null if none was found. IsLibraryMode(bool) Indicates whether a deployment of Zero Install was made in library mode. public static bool IsLibraryMode(bool machineWide) Parameters machineWide bool true to look for machine-wide deployments; false to look for user-specific deployments. Returns bool Register(string, bool, bool) Registers a Zero Install deployment in the Windows registry if possible. public static void Register(string path, bool machineWide, bool libraryMode) Parameters path string The directory path of the deployment of Zero Install. machineWide bool true if path is a machine-wide location; false if it is a user-specific location. libraryMode bool Indicates whether Zero Install was deployed as a library for use by other applications. Unregister(bool) Unregisters a Zero Install deployment from the Windows registry if possible. public static void Unregister(bool machineWide) Parameters machineWide bool true if a machine-wide registration should be removed; false if a user-specific registration should be removed."
  },
  "api/ZeroInstall.Model.ZeroInstallEnvironment.html": {
    "href": "api/ZeroInstall.Model.ZeroInstallEnvironment.html",
    "title": "Class ZeroInstallEnvironment | Zero Install .NET API",
    "summary": "Class ZeroInstallEnvironment Namespace ZeroInstall.Model Assembly ZeroInstall.Model.dll Provides access to Zero Install-related environment variables. public static class ZeroInstallEnvironment Inheritance object ZeroInstallEnvironment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CliName The name of the environment variable for Cli. public const string CliName = \"ZEROINSTALL\" Field Value string ExternalFetcherName The name of the environment variable for ExternalFetch. public const string ExternalFetcherName = \"ZEROINSTALL_EXTERNAL_FETCHER\" Field Value string FeedUriName The name of the environment variable for FeedUri. public const string FeedUriName = \"ZEROINSTALL_FEED_URI\" Field Value string GuiName The name of the environment variable for Gui. public const string GuiName = \"ZEROINSTALL_GUI\" Field Value string Properties Cli A command-line for launching the CLI version of Zero Install. public static string? Cli { get; } Property Value string ExternalFetch A command-line that downloads a set of Implementations piped in as XML via stdin. public static string? ExternalFetch { get; } Property Value string FeedUri The URI of the feed used to start this program. public static FeedUri? FeedUri { get; } Property Value FeedUri Gui A command-line for launching the graphical version of Zero Install. public static string? Gui { get; } Property Value string Methods LegacyMutexName(string?) Old name for an AppMutex to detect running instances of Zero Install. public static string LegacyMutexName(string? path = null) Parameters path string The directory where the Zero Install instance is located. Leave null for the currently running instance. Returns string Remarks Usually (but not guaranteed to be) different for multiple instances deployed in different paths. LegacyUpdateMutexName(string?) Old name for an AppMutex to block instances of Zero Install from starting during an update. public static string LegacyUpdateMutexName(string? path = null) Parameters path string The directory where the Zero Install instance is located. Leave null for the currently running instance. Returns string Remarks Usually (but not guaranteed to be) different for multiple instances deployed in different paths. MutexName(string?) Name for an AppMutex to detect running instances of Zero Install. public static string MutexName(string? path = null) Parameters path string The directory where the Zero Install instance is located. Leave null for the currently running instance. Returns string Remarks Usually (but not guaranteed to be) different for multiple instances deployed in different paths. UpdateMutexName(string?) Name for an AppMutex to block instances of Zero Install from starting during an update. public static string UpdateMutexName(string? path = null) Parameters path string The directory where the Zero Install instance is located. Leave null for the currently running instance. Returns string Remarks Usually (but not guaranteed to be) different for multiple instances deployed in different paths."
  },
  "api/ZeroInstall.Model.html": {
    "href": "api/ZeroInstall.Model.html",
    "title": "Namespace ZeroInstall.Model | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Model Data model for the Zero Install feed format. NuGet package: ZeroInstall.Model Namespaces ZeroInstall.Model.Capabilities Extends the feed format with structures for describing application capabilities. This forms the basis for desktop integration. ZeroInstall.Model.Design TypeConverters used for serialization and to provide a better runtime experience when using PropertyGrids. ZeroInstall.Model.Preferences Structures for user-specified preferences and overrides for interfaces, feeds and implementations. ZeroInstall.Model.Selection Structures for representing Solver results. ZeroInstall.Model.Trust Classes ArchitectureExtensions Contains extension methods for Architecture, OS and Cpu. Archive Retrieves an implementation by downloading and extracting an archive. Arg A single command-line arguments to be passed to an executable. ArgBase Common base class for Arg and ForEachArgs. Binding Bindings specify how the chosen implementation is made known to the running program. Catalog Contains a list of Feeds, reduced to only contain information relevant for overview lists. Category An application category (e.g. Game or Office). Used for organizing application menus. Command A command says how to run an Implementation as a program. Constraint Restricts the set of versions from which the injector may choose an Implementation. CopyFromStep Copies files or directories from another implementation specified elsewhere in the same feed. Dependency A reference to an interface that is required as dependency. DependencyContainerExtensions Provides extension methods for IDependencyContainer. DownloadRetrievalMethod Represents a retrieval method that downloads data from the net. Element Abstract base class for ImplementationBase and Group. Contains those parameters that can be transferred from a Group to an Implementation. ElementCollectionExtensions Provides extension methods for Element collections. EntryPoint Associates a Command with a user-friendly name and description. EnvironmentBinding Make a chosen Implementation available by setting environment variables. ExecutableInBinding Make a chosen Implementation available as an executable at runtime. ExecutableInPath Make a chosen Implementation available as an executable in the search PATH. ExecutableInVar Make a chosen Implementation available as an executable path in an environment variable. Feed A feed contains all the information required to download and execute an application. FeedElement Abstract base class for XML serializable classes that are part of the Zero Install feed model. FeedReference A linked feed that contains more implementations of this interface. Is treated by the solver as if it were part of the main feed. FeedUri Represents a feed or interface URI or local path. Unlike Uri this class only accepts HTTP(S) URLs and absolute local paths. ForEachArgs Expands an environment variable to multiple arguments. The variable specified in ItemFrom is split using Separator and the Arguments are added once for each item. GenericBinding Zero Install will not know how to run a program using generic bindings itself, but it will include them in any selections documents it creates, which can then be executed by your custom code. Group All attributes of a group are inherited by any child Groups and Implementations as defaults, but can be overridden there. All Dependencys and Bindings are inherited (sub-groups may add more Dependencys and Bindings to the list, but cannot remove any). Icon An icon representing the application. Used in the Catalog GUI as well as for desktop icons, menu entries, etc.. IconExtensions Provides extensions methods related to Icons. Implementation An implementation is a specific version of an application that can be downloaded and executed (e.g. Firefox 3.6 for Windows). ImplementationBase Information for identifying an implementation of a Feed. Common base for Implementation and ImplementationSelection. ImplementationVersion Represents a version number consisting of dot-separated decimals and optional modifier strings. InterfaceReference A reference to an interface URI, e.g. for specifying which interface this feed implements or by which interface it is replaced. KnownDistributions Well-known OS distributions. ManifestDigestPartialEqualityComparer Uses PartialEquals(ManifestDigest) to compare ManifestDigests. ManifestDigestPartialEqualityComparer<T> Uses PartialEquals(ManifestDigest) to compare ImplementationBases. ModelUtils Provides utility methods for interface and feed URIs. OverlayBinding Make a chosen Implementation available by overlaying it onto another part of the file-system. PackageImplementation An implementation provided by a distribution-specific package manager instead of Zero Install. Recipe Retrieves an implementation by applying a list of IRecipeSteps, such as downloading and combining multiple archives. RemoveStep Removes or moves a file or directory. It is an error if the path is outside the implementation. RenameStep Renames or moves a file or directory. It is an error if the source or destination are outside the implementation. Requirements A set of requirements/restrictions imposed by the user on the Implementation selection process. Used as input for the solver. Restriction Restricts the versions of an Implementation that are allowed without creating a dependency on the implementation if its was not already chosen. RetrievalMethod A retrieval method is a way of getting a copy of an Implementation. Runner A special kind of dependency: the program that is used to run this one. For example, a Python program might specify Python as its runner. SingleFile Retrieves an implementation by downloading a single file. TargetBase Abstract base class for Element and FeedReference. Contains language and architecture parameters. VersionRange Represents a (possibly disjoint) set of ranges of ImplementationVersions. VersionRangePart Represents an individual non-disjoint part of a VersionRange. VersionRangePartExact An exact version number like 2.0 as a part of a VersionRange. VersionRangePartExclude An exclusion like !2.0 as a part of a VersionRange. VersionRangePartRange A version range like 1.0..!2.0 as a part of a VersionRange. WorkingDir Switches the working directory of a process on startup to a location within an implementation. Useful for supporting legacy Windows applications which do not properly locate their installation directory. XmlUnknown Abstract base class for XML serializable classes that are intended to retain any unknown XML elements or attributes loaded from an XML file. ZeroInstallDeployment Registers and discovers Zero Install deployments on this system. ZeroInstallEnvironment Provides access to Zero Install-related environment variables. Structs Architecture Describes a combination of an operating system and a CPU architecture. FeedTarget Associates a FeedUri with the Feed data acquired from there. ManifestDigest A manifest digest is a means of uniquely identifying an Implementation and verifying its contents. VersionDottedList Represents a dotted-list part of a ImplementationVersion. VersionPart Represents a part of a ImplementationVersion containing nothing, a VersionModifier, a DottedList or both. Interfaces IArgBaseContainer An object that contains ArgBases. IBindingContainer An object that contains Bindings. IDependencyContainer An object that contains Dependencys and Restrictions. IDescriptionContainer An object that has localizable descriptions. IElementContainer An object that contains Groups and Implementations. Supports a composite pattern. IIconContainer An object that contains Iconss. IInterfaceUri An object that contains an interface URI. IInterfaceUriBindingContainer An object that contains an interface URI string. IRecipeStep A retrieval step is a part of a Recipe. ISummaryContainer An object that has localizable summaries and descriptions. Enums Cpu Describes a CPU architecture. EnvironmentMode Controls how Insert or Value is added to a variable. Importance Describes how important a dependency is (i.e. whether ignoring it is an option). OS Describes an operating system family. Stability A stability rating for an Implementation. VersionModifier"
  },
  "api/ZeroInstall.Publish.BuilderExtensions.html": {
    "href": "api/ZeroInstall.Publish.BuilderExtensions.html",
    "title": "Class BuilderExtensions | Zero Install .NET API",
    "summary": "Class BuilderExtensions Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll Helpers for adding RetrievalMethods to IBuilders and setting missing properties. public static class BuilderExtensions Inheritance object BuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(IBuilder, DownloadRetrievalMethod, ICommandExecutor, ITaskHandler, string?) Applies a retrieval method to the implementation. Sets missing properties in the process. public static void Add(this IBuilder builder, DownloadRetrievalMethod retrievalMethod, ICommandExecutor executor, ITaskHandler handler, string? localPath = null) Parameters builder IBuilder The builder. retrievalMethod DownloadRetrievalMethod The retrieval method. executor ICommandExecutor Used to modify properties in an undoable fashion. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. localPath string An optional local file path where the retrievalMethod has already been downloaded. Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. IOException There is a problem accessing localPath. UnauthorizedAccessException Read access to localPath is not permitted. Add(IBuilder, RetrievalMethod, ICommandExecutor, ITaskHandler) Applies a retrieval method to the implementation. Sets missing properties in the process. public static void Add(this IBuilder builder, RetrievalMethod retrievalMethod, ICommandExecutor executor, ITaskHandler handler) Parameters builder IBuilder The builder. retrievalMethod RetrievalMethod The retrieval method. executor ICommandExecutor Used to modify properties in an undoable fashion. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. CopyFrom(IBuilder, CopyFromStep, ITaskHandler) Copies files or directories from another implementation fetched by an external 0install process. public static void CopyFrom(this IBuilder builder, CopyFromStep metadata, ITaskHandler handler) Parameters builder IBuilder The builder. metadata CopyFromStep The path of the source and destination file or directory. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Publish.Capture.CaptureSession.html": {
    "href": "api/ZeroInstall.Publish.Capture.CaptureSession.html",
    "title": "Class CaptureSession | Zero Install .NET API",
    "summary": "Class CaptureSession Namespace ZeroInstall.Publish.Capture Assembly ZeroInstall.Publish.dll Manages the process of taking two Snapshots and comparing them to generate a Feed. public class CaptureSession Inheritance object CaptureSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InstallationDir The fully qualified path to the installation directory; leave null or empty for auto-detection. public string? InstallationDir { get; set; } Property Value string Methods CollectFiles(string, Uri, ITaskHandler) Creates a archive containing the InstallationDir. public void CollectFiles(string archivePath, Uri archiveUrl, ITaskHandler handler) Parameters archivePath string The path of the archive file to create. archiveUrl Uri The URL where the archive will be uploaded. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Remarks Sets RetrievalMethod and calls GenerateDigest(ITaskHandler). Exceptions InvalidOperationException Diff(ITaskHandler) was not called or MainCandidate is not set. OperationCanceledException The user canceled the task. IOException There was an error reading the installation files or writing the archive. UnauthorizedAccessException Access to the file system was not permitted. NotSupportedException The MIME type inferred from the archivePath doesn't belong to a known and supported archive type. Diff(ITaskHandler) Collects data from the locations indicated by the differences between the Start(FeedBuilder) state and the current system state. public void Diff(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions InvalidOperationException No installation directory was detected. OperationCanceledException The user canceled the task. IOException There was an error accessing the registry or file system. UnauthorizedAccessException Access to the registry or file system was not permitted. Finish() Finishes the capture process after Diff(ITaskHandler) has been called an MainCandidate has been set. public void Finish() Exceptions InvalidOperationException Diff(ITaskHandler) was not called or MainCandidate is not set. IOException There was an error accessing the registry or file system. UnauthorizedAccessException Access to the registry or file system was not permitted. Load(string, FeedBuilder) Loads a capture session from a snapshot file. public static CaptureSession Load(string path, FeedBuilder feedBuilder) Parameters path string The file to load from. feedBuilder FeedBuilder All collected data is stored into this builder. You can perform additional modifications before using Build() to get a feed. Returns CaptureSession Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing the binary data. Save(string) Saves the capture session to a snapshot file. public void Save(string path) Parameters path string The file to save in. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. Start(FeedBuilder) Captures the current system state as a snapshot of the system state before the target application was installed. public static CaptureSession Start(FeedBuilder feedBuilder) Parameters feedBuilder FeedBuilder All collected data is stored into this builder. You can perform additional modifications before using Build() to get a feed. Returns CaptureSession Exceptions IOException There was an error accessing the registry or file system. UnauthorizedAccessException Access to the registry or the file system was not permitted."
  },
  "api/ZeroInstall.Publish.Capture.CommandMapper.html": {
    "href": "api/ZeroInstall.Publish.Capture.CommandMapper.html",
    "title": "Class CommandMapper | Zero Install .NET API",
    "summary": "Class CommandMapper Namespace ZeroInstall.Publish.Capture Assembly ZeroInstall.Publish.dll Maps command-lines to the best matching Command. public class CommandMapper Inheritance object CommandMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandMapper(string, IEnumerable<Command>) Creates a new command provider. public CommandMapper(string installationDir, IEnumerable<Command> commands) Parameters installationDir string The fully qualified path to the installation directory. commands IEnumerable<Command> A list of all known-commands available within the installation directory. Properties InstallationDir The fully qualified path to the installation directory. public string InstallationDir { get; } Property Value string Methods GetCommand(string, out string?) Tries to find the best-match Command for a command-line. public Command? GetCommand(string commandLine, out string? additionalArgs) Parameters commandLine string The fully qualified command-line to try to match. additionalArgs string Any additional arguments from commandLine that are not covered by the returned Command. Returns Command The best matching Command or null if no match was found."
  },
  "api/ZeroInstall.Publish.Capture.Snapshot.html": {
    "href": "api/ZeroInstall.Publish.Capture.Snapshot.html",
    "title": "Class Snapshot | Zero Install .NET API",
    "summary": "Class Snapshot Namespace ZeroInstall.Publish.Capture Assembly ZeroInstall.Publish.dll Represents the systems state at a point in time. This is used to determine changes. [Serializable] public class Snapshot Inheritance object Snapshot Derived SnapshotDiff Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoPlayAssocsMachine A list of associations of AutoPlay events with AutoPlay handlers. public List<(string name, string handler)> AutoPlayAssocsMachine { get; } Property Value List<(string name, string client)> AutoPlayAssocsUser A list of associations of AutoPlay events with AutoPlay handlers. public List<(string name, string handler)> AutoPlayAssocsUser { get; } Property Value List<(string name, string client)> AutoPlayHandlersMachine A list of applications registered as AutoPlay handlers. public List<string> AutoPlayHandlersMachine { get; } Property Value List<string> AutoPlayHandlersUser A list of applications registered as AutoPlay handlers. public List<string> AutoPlayHandlersUser { get; } Property Value List<string> ClassIDs A list of COM class IDs. public List<string> ClassIDs { get; } Property Value List<string> ContextMenuAll A list of context menu entries for all filesystem objects (files and directories). public List<string> ContextMenuAll { get; } Property Value List<string> ContextMenuDirectories A list of context menu entries for all directories. public List<string> ContextMenuDirectories { get; } Property Value List<string> ContextMenuExecutableFiles A list of context menu entries for executable files. public List<string> ContextMenuExecutableFiles { get; } Property Value List<string> ContextMenuFiles A list of context menu entries for all files. public List<string> ContextMenuFiles { get; } Property Value List<string> FileAssocs A list of associations of file extensions with programmatic identifiers. public List<(string extension, string progID)> FileAssocs { get; } Property Value List<(string name, string client)> ProgIDs A list of programmatic identifiers. public List<string> ProgIDs { get; } Property Value List<string> ProgramsDirs A list of program installation directories. public List<string> ProgramsDirs { get; } Property Value List<string> ProtocolAssocs A list of protocol associations for well-known protocols (e.g. HTTP, FTP, ...). public List<(string protocol, string progID)> ProtocolAssocs { get; } Property Value List<(string name, string client)> RegisteredApplications A list of applications registered as candidates for default programs. public List<string> RegisteredApplications { get; } Property Value List<string> ServiceAssocs A list of associations of services with clients (e.g. web browsers, mail readers, ...). public List<(string name, string client)> ServiceAssocs { get; } Property Value List<(string name, string client)> Methods Take() Takes a snapshot of the current system state. public static Snapshot Take() Returns Snapshot The newly created snapshot. Exceptions IOException There was an error accessing the registry or file system. UnauthorizedAccessException Read access to the registry or file system was not permitted. PlatformNotSupportedException This method is called while running on a platform for which capturing is not supported."
  },
  "api/ZeroInstall.Publish.Capture.SnapshotDiff.html": {
    "href": "api/ZeroInstall.Publish.Capture.SnapshotDiff.html",
    "title": "Class SnapshotDiff | Zero Install .NET API",
    "summary": "Class SnapshotDiff Namespace ZeroInstall.Publish.Capture Assembly ZeroInstall.Publish.dll Represents the differences between two Snapshots. Extracts information about applications installed. public class SnapshotDiff : Snapshot Inheritance object Snapshot SnapshotDiff Inherited Members Snapshot.ServiceAssocs Snapshot.AutoPlayHandlersUser Snapshot.AutoPlayHandlersMachine Snapshot.AutoPlayAssocsUser Snapshot.AutoPlayAssocsMachine Snapshot.FileAssocs Snapshot.ProtocolAssocs Snapshot.ProgIDs Snapshot.ClassIDs Snapshot.RegisteredApplications Snapshot.ContextMenuFiles Snapshot.ContextMenuExecutableFiles Snapshot.ContextMenuDirectories Snapshot.ContextMenuAll Snapshot.ProgramsDirs Snapshot.Take() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SnapshotDiff(Snapshot, Snapshot) Determines which elements have been added to the system between two snapshots. public SnapshotDiff(Snapshot before, Snapshot after) Parameters before Snapshot The first snapshot taken. after Snapshot The second snapshot taken. Remarks Assumes that all internal arrays are sorted alphabetically. Methods CollectAutoPlays(CommandMapper, CapabilityList) Collects data about AutoPlay handlers. public void CollectAutoPlays(CommandMapper commandMapper, CapabilityList capabilities) Parameters commandMapper CommandMapper Provides best-match command-line to Command mapping. capabilities CapabilityList The capability list to add the collected data to. Exceptions IOException There was an error accessing the registry. UnauthorizedAccessException Read access to the registry was not permitted. CollectContextMenus(CommandMapper, CapabilityList) Collects data about context menu entries. public void CollectContextMenus(CommandMapper commandMapper, CapabilityList capabilities) Parameters commandMapper CommandMapper Provides best-match command-line to Command mapping. capabilities CapabilityList The capability list to add the collected data to. Exceptions IOException There was an error accessing the registry. UnauthorizedAccessException Read access to the registry was not permitted. CollectDefaultPrograms(CommandMapper, CapabilityList, ref string?) Collects data about default programs. public void CollectDefaultPrograms(CommandMapper commandMapper, CapabilityList capabilities, ref string? appName) Parameters commandMapper CommandMapper Provides best-match command-line to Command mapping. capabilities CapabilityList The capability list to add the collected data to. appName string Is set to the name of the application as displayed to the user; unchanged if the name was not found. Exceptions IOException There was an error accessing the registry. UnauthorizedAccessException Read access to the registry was not permitted. CollectFileTypes(CommandMapper, CapabilityList) Collects data about file types and also URL protocol handlers. public void CollectFileTypes(CommandMapper commandMapper, CapabilityList capabilities) Parameters commandMapper CommandMapper Provides best-match command-line to Command mapping. capabilities CapabilityList The capability list to add the collected data to. Exceptions IOException There was an error accessing the registry. UnauthorizedAccessException Read access to the registry was not permitted. CollectProtocolAssocs(CommandMapper, CapabilityList) Collects data about well-known URL protocol handlers. public void CollectProtocolAssocs(CommandMapper commandMapper, CapabilityList capabilities) Parameters commandMapper CommandMapper Provides best-match command-line to Command mapping. capabilities CapabilityList The capability list to add the collected data to. Exceptions IOException There was an error accessing the registry. UnauthorizedAccessException Read access to the registry was not permitted. GetAppRegistration(CommandMapper, CapabilityList, ref string?, ref string?) Retrieves data about registered applications. public AppRegistration? GetAppRegistration(CommandMapper commandMapper, CapabilityList capabilities, ref string? appName, ref string? appDescription) Parameters commandMapper CommandMapper Provides best-match command-line to Command mapping. capabilities CapabilityList The capability list to add the collected data to. appName string Is set to the name of the application as displayed to the user; unchanged if the name was not found. appDescription string Is set to a user-friendly description of the application; unchanged if the name was not found. Returns AppRegistration Exceptions IOException There was an error accessing the registry. UnauthorizedAccessException Read access to the registry was not permitted. GetInstallationDir() Locates the directory into which the new application was installed. public string GetInstallationDir() Returns string Exceptions InvalidOperationException No installation directory was detected."
  },
  "api/ZeroInstall.Publish.Capture.html": {
    "href": "api/ZeroInstall.Publish.Capture.html",
    "title": "Namespace ZeroInstall.Publish.Capture | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Publish.Capture Builds feeds by creating and comparing snapshots of the system before and after an application was installed. Classes CaptureSession Manages the process of taking two Snapshots and comparing them to generate a Feed. CommandMapper Maps command-lines to the best matching Command. Snapshot Represents the systems state at a point in time. This is used to determine changes. SnapshotDiff Represents the differences between two Snapshots. Extracts information about applications installed."
  },
  "api/ZeroInstall.Publish.EntryPoints.BashScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.BashScript.html",
    "title": "Class BashScript | Zero Install .NET API",
    "summary": "Class BashScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A script written in Perl. public sealed class BashScript : InterpretedScript, IEquatable<Candidate>, IEquatable<InterpretedScript> Inheritance object Candidate InterpretedScript BashScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> Inherited Members InterpretedScript.InterpreterVersions InterpretedScript.CreateCommand() InterpretedScript.Equals(object) InterpretedScript.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties InterpreterInterface The interface URI of the interpreter to run the script. protected override FeedUri InterpreterInterface { get; } Property Value FeedUri"
  },
  "api/ZeroInstall.Publish.EntryPoints.Candidate.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.Candidate.html",
    "title": "Class Candidate | Zero Install .NET API",
    "summary": "Class Candidate Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll Collects information about a potential candidate for an entry point. The subclass type determines the type of executable (native binary, interpreted script, etc.). [Equatable] public abstract class Candidate : IEquatable<Candidate> Inheritance object Candidate Implements IEquatable<Candidate> Derived InterpretedScript Java NativeExecutable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Architecture The application's target architecture. public Architecture Architecture { get; set; } Property Value Architecture BaseDirectory The base directory containing the entire application. [Browsable(false)] [IgnoreEquality] protected DirectoryInfo? BaseDirectory { get; } Property Value DirectoryInfo Category The main category of the application. May influence the placement in the start menu. [TypeConverter(typeof(CategoryNameConverter))] public string? Category { get; set; } Property Value string CommandName The Name used by CreateCommand(). protected string CommandName { get; } Property Value string Name The application's name. public string? Name { get; set; } Property Value string Remarks A suggestion for Name. NeedsTerminal Indicates whether the application is a command-line application (true) or a GUI application (false). public bool NeedsTerminal { get; set; } Property Value bool RelativePath The path of this entry point relative to BaseDirectory. [Browsable(false)] public string? RelativePath { get; } Property Value string Summary Short one-line description; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). public string? Summary { get; set; } Property Value string Remarks A suggestion for Summaries. Version The application's current version. public ImplementationVersion? Version { get; set; } Property Value ImplementationVersion Methods CreateCommand() Creates a Command to launch this entry point. public abstract Command CreateCommand() Returns Command Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Candidate?) protected bool Equals(Candidate? other) Parameters other Candidate Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IsExecutable(string) Determines whether a file is executable. protected bool IsExecutable(string path) Parameters path string Returns bool ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. ToVersionRange(ImplementationVersion?) protected static VersionRange? ToVersionRange(ImplementationVersion? version) Parameters version ImplementationVersion Returns VersionRange Operators operator ==(Candidate?, Candidate?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Candidate? left, Candidate? right) Parameters left Candidate The left object right Candidate The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Candidate?, Candidate?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Candidate? left, Candidate? right) Parameters left Candidate The left object right Candidate The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.DetectCandidates.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.DetectCandidates.html",
    "title": "Class DetectCandidates | Zero Install .NET API",
    "summary": "Class DetectCandidates Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll Detects entry point Candidates in a file system directory. public class DetectCandidates : ReadDirectoryBase, ITask Inheritance object MarshalByRefObject TaskBase ReadDirectoryBase DetectCandidates Implements ITask Inherited Members ReadDirectoryBase.Source ReadDirectoryBase.Execute() ReadDirectoryBase.UnitsByte ReadDirectoryBase.FollowSymlinks TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DetectCandidates(string) Detects entry point Candidates in a file system directory. public DetectCandidates(string path) Parameters path string Properties Candidates The list of detected candidates. public IReadOnlyList<Candidate> Candidates { get; } Property Value IReadOnlyList<Candidate> Name A name describing the task in human-readable form. public override string Name { get; } Property Value string Methods HandleDirectory(DirectoryInfo) Called once for every sub-directory below Source. protected override void HandleDirectory(DirectoryInfo directory) Parameters directory DirectoryInfo The directory to handle. HandleFile(FileInfo, FileInfo?) Called once for every file below Source. protected override void HandleFile(FileInfo file, FileInfo? hardlinkTarget = null) Parameters file FileInfo The file to handle. hardlinkTarget FileInfo A previously handled file that is hardlinked to file. May be null."
  },
  "api/ZeroInstall.Publish.EntryPoints.DotNetDll.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.DotNetDll.html",
    "title": "Class DotNetDll | Zero Install .NET API",
    "summary": "Class DotNetDll Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll [Equatable] public sealed class DotNetDll : DotNetExe, IEquatable<Candidate>, IIconContainer, IEquatable<DotNetExe>, IEquatable<DotNetDll> Inheritance object Candidate NativeExecutable WindowsExe DotNetExe DotNetDll Implements IEquatable<Candidate> IIconContainer IEquatable<DotNetExe> IEquatable<DotNetDll> Inherited Members DotNetExe.RuntimeVersion DotNetExe.NeedsAspNetCore DotNetExe.CreateCommand() WindowsExe.ExtractIcon() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ExecutableExtension protected override string ExecutableExtension { get; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(DotNetDll?, DotNetDll?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DotNetDll? left, DotNetDll? right) Parameters left DotNetDll The left object right DotNetDll The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DotNetDll?, DotNetDll?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DotNetDll? left, DotNetDll? right) Parameters left DotNetDll The left object right DotNetDll The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.DotNetExe.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.DotNetExe.html",
    "title": "Class DotNetExe | Zero Install .NET API",
    "summary": "Class DotNetExe Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll [Equatable] public class DotNetExe : WindowsExe, IEquatable<Candidate>, IIconContainer, IEquatable<DotNetExe> Inheritance object Candidate NativeExecutable WindowsExe DotNetExe Implements IEquatable<Candidate> IIconContainer IEquatable<DotNetExe> Derived DotNetDll Inherited Members WindowsExe.ExecutableExtension WindowsExe.GetCpu(PEMachineType) WindowsExe.ExtractIcon() Candidate.IsExecutable(string) Candidate.BaseDirectory Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToVersionRange(ImplementationVersion) Candidate.CommandName Candidate.ToString() Candidate.Equals(Candidate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties NeedsAspNetCore Indicates whether the app needs the ASP.NET Core Runtime. public bool NeedsAspNetCore { get; set; } Property Value bool RuntimeVersion The version of the .NET Runtime required by the application. [TypeConverter(typeof(StringConstructorConverter<ImplementationVersion>))] public ImplementationVersion RuntimeVersion { get; set; } Property Value ImplementationVersion Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(DotNetExe?) protected bool Equals(DotNetExe? other) Parameters other DotNetExe Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(PEHeader) protected override bool Parse(PEHeader peHeader) Parameters peHeader PEHeader Returns bool Operators operator ==(DotNetExe?, DotNetExe?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DotNetExe? left, DotNetExe? right) Parameters left DotNetExe The left object right DotNetExe The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DotNetExe?, DotNetExe?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DotNetExe? left, DotNetExe? right) Parameters left DotNetExe The left object right DotNetExe The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.DotNetFrameworkExe.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.DotNetFrameworkExe.html",
    "title": "Class DotNetFrameworkExe | Zero Install .NET API",
    "summary": "Class DotNetFrameworkExe Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A .NET/Mono executable. [Equatable] public sealed class DotNetFrameworkExe : WindowsExe, IEquatable<Candidate>, IIconContainer, IEquatable<DotNetFrameworkExe> Inheritance object Candidate NativeExecutable WindowsExe DotNetFrameworkExe Implements IEquatable<Candidate> IIconContainer IEquatable<DotNetFrameworkExe> Inherited Members WindowsExe.ExtractIcon() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ExternalDependencies Does this application have external dependencies that need to be injected by Zero Install? Only enable if you are sure! public bool ExternalDependencies { get; set; } Property Value bool MinimumRuntimeVersion The minimum version of the .NET Runtime required by the application. [TypeConverter(typeof(DotNetVersionConverter))] public ImplementationVersion? MinimumRuntimeVersion { get; set; } Property Value ImplementationVersion RuntimeType The types of .NET Runtime supported by the application. public DotNetRuntimeType RuntimeType { get; set; } Property Value DotNetRuntimeType Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(PEHeader) protected override bool Parse(PEHeader peHeader) Parameters peHeader PEHeader Returns bool Operators operator ==(DotNetFrameworkExe?, DotNetFrameworkExe?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(DotNetFrameworkExe? left, DotNetFrameworkExe? right) Parameters left DotNetFrameworkExe The left object right DotNetFrameworkExe The right object Returns bool true if the objects are equal; otherwise, false. operator !=(DotNetFrameworkExe?, DotNetFrameworkExe?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(DotNetFrameworkExe? left, DotNetFrameworkExe? right) Parameters left DotNetFrameworkExe The left object right DotNetFrameworkExe The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.DotNetRuntimeType.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.DotNetRuntimeType.html",
    "title": "Enum DotNetRuntimeType | Zero Install .NET API",
    "summary": "Enum DotNetRuntimeType Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public enum DotNetRuntimeType Fields DotNetFramework = 0 DotNetFrameworkClientProfile = 1 DotNetFrameworkOrMono = 3 Mono = 2"
  },
  "api/ZeroInstall.Publish.EntryPoints.IIconContainer.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.IIconContainer.html",
    "title": "Interface IIconContainer | Zero Install .NET API",
    "summary": "Interface IIconContainer Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll An executable with embedded icons. public interface IIconContainer Methods ExtractIcon() Extracts the primary icon of the executable. Icon ExtractIcon() Returns Icon"
  },
  "api/ZeroInstall.Publish.EntryPoints.InterpretedScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.InterpretedScript.html",
    "title": "Class InterpretedScript | Zero Install .NET API",
    "summary": "Class InterpretedScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A plain text script that is executed by a runtime interpreter. [Equatable] public abstract class InterpretedScript : Candidate, IEquatable<Candidate>, IEquatable<InterpretedScript> Inheritance object Candidate InterpretedScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> Derived BashScript PerlScript PhpScript PowerShellScript PythonScript RubyScript Inherited Members Candidate.IsExecutable(string) Candidate.BaseDirectory Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToVersionRange(ImplementationVersion) Candidate.CommandName Candidate.ToString() Candidate.Equals(Candidate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties InterpreterInterface The interface URI of the interpreter to run the script. protected abstract FeedUri InterpreterInterface { get; } Property Value FeedUri InterpreterVersions The range of versions of the script interpreter supported by the application. public VersionRange? InterpreterVersions { get; set; } Property Value VersionRange Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(InterpretedScript?) protected bool Equals(InterpretedScript? other) Parameters other InterpretedScript Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. HasShebang(FileInfo, string) Determines whether a file is executable and has a shebang line pointing to a specific interpreter. protected bool HasShebang(FileInfo file, string interpreter) Parameters file FileInfo The file to analyze. interpreter string The name of the interpreter to search for (e.g. 'python'). Returns bool Operators operator ==(InterpretedScript?, InterpretedScript?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(InterpretedScript? left, InterpretedScript? right) Parameters left InterpretedScript The left object right InterpretedScript The right object Returns bool true if the objects are equal; otherwise, false. operator !=(InterpretedScript?, InterpretedScript?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(InterpretedScript? left, InterpretedScript? right) Parameters left InterpretedScript The left object right InterpretedScript The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.Java.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.Java.html",
    "title": "Class Java | Zero Install .NET API",
    "summary": "Class Java Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A compiled Java application. [Equatable] public abstract class Java : Candidate, IEquatable<Candidate>, IEquatable<Java> Inheritance object Candidate Java Implements IEquatable<Candidate> IEquatable<Java> Derived JavaClass JavaJar Inherited Members Candidate.IsExecutable(string) Candidate.BaseDirectory Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.CreateCommand() Candidate.ToVersionRange(ImplementationVersion) Candidate.CommandName Candidate.ToString() Candidate.Equals(Candidate) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ExternalDependencies Does this application have external dependencies that need to be injected by Zero Install? Only enable if you are sure! public bool ExternalDependencies { get; set; } Property Value bool GuiOnly Does this application have a graphical interface an no terminal output? Only enable if you are sure! public bool GuiOnly { get; set; } Property Value bool MinimumRuntimeVersion The minimum version of the Java Runtime Environment required by the application. [TypeConverter(typeof(JavaVersionConverter))] public ImplementationVersion? MinimumRuntimeVersion { get; set; } Property Value ImplementationVersion Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Java?) protected bool Equals(Java? other) Parameters other Java Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Java?, Java?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(Java? left, Java? right) Parameters left Java The left object right Java The right object Returns bool true if the objects are equal; otherwise, false. operator !=(Java?, Java?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(Java? left, Java? right) Parameters left Java The left object right Java The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.JavaClass.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.JavaClass.html",
    "title": "Class JavaClass | Zero Install .NET API",
    "summary": "Class JavaClass Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A compiled Java class file. public sealed class JavaClass : Java, IEquatable<Candidate>, IEquatable<Java> Inheritance object Candidate Java JavaClass Implements IEquatable<Candidate> IEquatable<Java> Inherited Members Java.MinimumRuntimeVersion Java.ExternalDependencies Java.GuiOnly Java.Equals(object) Java.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command"
  },
  "api/ZeroInstall.Publish.EntryPoints.JavaJar.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.JavaJar.html",
    "title": "Class JavaJar | Zero Install .NET API",
    "summary": "Class JavaJar Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A Java JAR archive. public sealed class JavaJar : Java, IEquatable<Candidate>, IEquatable<Java> Inheritance object Candidate Java JavaJar Implements IEquatable<Candidate> IEquatable<Java> Inherited Members Java.MinimumRuntimeVersion Java.ExternalDependencies Java.GuiOnly Java.Equals(object) Java.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command"
  },
  "api/ZeroInstall.Publish.EntryPoints.MacOSApp.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.MacOSApp.html",
    "title": "Class MacOSApp | Zero Install .NET API",
    "summary": "Class MacOSApp Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A binary inside a MacOS X application bundle. public sealed class MacOSApp : PosixExecutable, IEquatable<Candidate> Inheritance object Candidate NativeExecutable PosixExecutable MacOSApp Implements IEquatable<Candidate> Inherited Members NativeExecutable.CreateCommand() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() Candidate.Equals(object) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ZeroInstall.Publish.EntryPoints.NativeExecutable.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.NativeExecutable.html",
    "title": "Class NativeExecutable | Zero Install .NET API",
    "summary": "Class NativeExecutable Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A file that can be executed directly by the operating system without an additional runtime environment. public abstract class NativeExecutable : Candidate, IEquatable<Candidate> Inheritance object Candidate NativeExecutable Implements IEquatable<Candidate> Derived PosixExecutable WindowsBatch WindowsExe Inherited Members Candidate.IsExecutable(string) Candidate.BaseDirectory Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToVersionRange(ImplementationVersion) Candidate.CommandName Candidate.ToString() Candidate.Equals(object) Candidate.Equals(Candidate) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageDataDirectory.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageDataDirectory.html",
    "title": "Struct PEHeader.ImageDataDirectory | Zero Install .NET API",
    "summary": "Struct PEHeader.ImageDataDirectory Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public struct PEHeader.ImageDataDirectory Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public uint Size Field Value uint VirtualAddress public uint VirtualAddress Field Value uint"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageDosHeader.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageDosHeader.html",
    "title": "Struct PEHeader.ImageDosHeader | Zero Install .NET API",
    "summary": "Struct PEHeader.ImageDosHeader Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public struct PEHeader.ImageDosHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields e_cblp public ushort e_cblp Field Value ushort e_cp public ushort e_cp Field Value ushort e_cparhdr public ushort e_cparhdr Field Value ushort e_crlc public ushort e_crlc Field Value ushort e_cs public ushort e_cs Field Value ushort e_csum public ushort e_csum Field Value ushort e_ip public ushort e_ip Field Value ushort e_lfanew public uint e_lfanew Field Value uint e_lfarlc public ushort e_lfarlc Field Value ushort e_magic public ushort e_magic Field Value ushort e_maxalloc public ushort e_maxalloc Field Value ushort e_minalloc public ushort e_minalloc Field Value ushort e_oemid public ushort e_oemid Field Value ushort e_oeminfo public ushort e_oeminfo Field Value ushort e_ovno public ushort e_ovno Field Value ushort e_res2_0 public ushort e_res2_0 Field Value ushort e_res2_1 public ushort e_res2_1 Field Value ushort e_res2_2 public ushort e_res2_2 Field Value ushort e_res2_3 public ushort e_res2_3 Field Value ushort e_res2_4 public ushort e_res2_4 Field Value ushort e_res2_5 public ushort e_res2_5 Field Value ushort e_res2_6 public ushort e_res2_6 Field Value ushort e_res2_7 public ushort e_res2_7 Field Value ushort e_res2_8 public ushort e_res2_8 Field Value ushort e_res2_9 public ushort e_res2_9 Field Value ushort e_res_0 public ushort e_res_0 Field Value ushort e_res_1 public ushort e_res_1 Field Value ushort e_res_2 public ushort e_res_2 Field Value ushort e_res_3 public ushort e_res_3 Field Value ushort e_sp public ushort e_sp Field Value ushort e_ss public ushort e_ss Field Value ushort"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageFileHeader.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageFileHeader.html",
    "title": "Struct PEHeader.ImageFileHeader | Zero Install .NET API",
    "summary": "Struct PEHeader.ImageFileHeader Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public struct PEHeader.ImageFileHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Characteristics public ushort Characteristics Field Value ushort Machine public PEMachineType Machine Field Value PEMachineType NumberOfSections public ushort NumberOfSections Field Value ushort NumberOfSymbols public uint NumberOfSymbols Field Value uint PointerToSymbolTable public uint PointerToSymbolTable Field Value uint SizeOfOptionalHeader public ushort SizeOfOptionalHeader Field Value ushort TimeDateStamp public uint TimeDateStamp Field Value uint"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageOptionalHeader32.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageOptionalHeader32.html",
    "title": "Struct PEHeader.ImageOptionalHeader32 | Zero Install .NET API",
    "summary": "Struct PEHeader.ImageOptionalHeader32 Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public struct PEHeader.ImageOptionalHeader32 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AddressOfEntryPoint public uint AddressOfEntryPoint Field Value uint Architecture public PEHeader.ImageDataDirectory Architecture Field Value PEHeader.ImageDataDirectory BaseOfCode public uint BaseOfCode Field Value uint BaseOfData public uint BaseOfData Field Value uint BaseRelocationTable public PEHeader.ImageDataDirectory BaseRelocationTable Field Value PEHeader.ImageDataDirectory BoundImport public PEHeader.ImageDataDirectory BoundImport Field Value PEHeader.ImageDataDirectory CLRRuntimeHeader public PEHeader.ImageDataDirectory CLRRuntimeHeader Field Value PEHeader.ImageDataDirectory CertificateTable public PEHeader.ImageDataDirectory CertificateTable Field Value PEHeader.ImageDataDirectory CheckSum public uint CheckSum Field Value uint Debug public PEHeader.ImageDataDirectory Debug Field Value PEHeader.ImageDataDirectory DelayImportDescriptor public PEHeader.ImageDataDirectory DelayImportDescriptor Field Value PEHeader.ImageDataDirectory DllCharacteristics public ushort DllCharacteristics Field Value ushort ExceptionTable public PEHeader.ImageDataDirectory ExceptionTable Field Value PEHeader.ImageDataDirectory ExportTable public PEHeader.ImageDataDirectory ExportTable Field Value PEHeader.ImageDataDirectory FileAlignment public uint FileAlignment Field Value uint GlobalPtr public PEHeader.ImageDataDirectory GlobalPtr Field Value PEHeader.ImageDataDirectory IAT public PEHeader.ImageDataDirectory IAT Field Value PEHeader.ImageDataDirectory ImageBase public uint ImageBase Field Value uint ImportTable public PEHeader.ImageDataDirectory ImportTable Field Value PEHeader.ImageDataDirectory LoadConfigTable public PEHeader.ImageDataDirectory LoadConfigTable Field Value PEHeader.ImageDataDirectory LoaderFlags public uint LoaderFlags Field Value uint Magic public ushort Magic Field Value ushort MajorImageVersion public ushort MajorImageVersion Field Value ushort MajorLinkerVersion public byte MajorLinkerVersion Field Value byte MajorOperatingSystemVersion public ushort MajorOperatingSystemVersion Field Value ushort MajorSubsystemVersion public ushort MajorSubsystemVersion Field Value ushort MinorImageVersion public ushort MinorImageVersion Field Value ushort MinorLinkerVersion public byte MinorLinkerVersion Field Value byte MinorOperatingSystemVersion public ushort MinorOperatingSystemVersion Field Value ushort MinorSubsystemVersion public ushort MinorSubsystemVersion Field Value ushort NumberOfRvaAndSizes public uint NumberOfRvaAndSizes Field Value uint Reserved public PEHeader.ImageDataDirectory Reserved Field Value PEHeader.ImageDataDirectory ResourceTable public PEHeader.ImageDataDirectory ResourceTable Field Value PEHeader.ImageDataDirectory SectionAlignment public uint SectionAlignment Field Value uint SizeOfCode public uint SizeOfCode Field Value uint SizeOfHeaders public uint SizeOfHeaders Field Value uint SizeOfHeapCommit public uint SizeOfHeapCommit Field Value uint SizeOfHeapReserve public uint SizeOfHeapReserve Field Value uint SizeOfImage public uint SizeOfImage Field Value uint SizeOfInitializedData public uint SizeOfInitializedData Field Value uint SizeOfStackCommit public uint SizeOfStackCommit Field Value uint SizeOfStackReserve public uint SizeOfStackReserve Field Value uint SizeOfUninitializedData public uint SizeOfUninitializedData Field Value uint Subsystem public PESubsystem Subsystem Field Value PESubsystem TLSTable public PEHeader.ImageDataDirectory TLSTable Field Value PEHeader.ImageDataDirectory Win32VersionValue public uint Win32VersionValue Field Value uint"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageOptionalHeader64.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEHeader.ImageOptionalHeader64.html",
    "title": "Struct PEHeader.ImageOptionalHeader64 | Zero Install .NET API",
    "summary": "Struct PEHeader.ImageOptionalHeader64 Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public struct PEHeader.ImageOptionalHeader64 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AddressOfEntryPoint public uint AddressOfEntryPoint Field Value uint Architecture public PEHeader.ImageDataDirectory Architecture Field Value PEHeader.ImageDataDirectory BaseOfCode public uint BaseOfCode Field Value uint BaseRelocationTable public PEHeader.ImageDataDirectory BaseRelocationTable Field Value PEHeader.ImageDataDirectory BoundImport public PEHeader.ImageDataDirectory BoundImport Field Value PEHeader.ImageDataDirectory CLRRuntimeHeader public PEHeader.ImageDataDirectory CLRRuntimeHeader Field Value PEHeader.ImageDataDirectory CertificateTable public PEHeader.ImageDataDirectory CertificateTable Field Value PEHeader.ImageDataDirectory CheckSum public uint CheckSum Field Value uint Debug public PEHeader.ImageDataDirectory Debug Field Value PEHeader.ImageDataDirectory DelayImportDescriptor public PEHeader.ImageDataDirectory DelayImportDescriptor Field Value PEHeader.ImageDataDirectory DllCharacteristics public ushort DllCharacteristics Field Value ushort ExceptionTable public PEHeader.ImageDataDirectory ExceptionTable Field Value PEHeader.ImageDataDirectory ExportTable public PEHeader.ImageDataDirectory ExportTable Field Value PEHeader.ImageDataDirectory FileAlignment public uint FileAlignment Field Value uint GlobalPtr public PEHeader.ImageDataDirectory GlobalPtr Field Value PEHeader.ImageDataDirectory IAT public PEHeader.ImageDataDirectory IAT Field Value PEHeader.ImageDataDirectory ImageBase public ulong ImageBase Field Value ulong ImportTable public PEHeader.ImageDataDirectory ImportTable Field Value PEHeader.ImageDataDirectory LoadConfigTable public PEHeader.ImageDataDirectory LoadConfigTable Field Value PEHeader.ImageDataDirectory LoaderFlags public uint LoaderFlags Field Value uint Magic public ushort Magic Field Value ushort MajorImageVersion public ushort MajorImageVersion Field Value ushort MajorLinkerVersion public byte MajorLinkerVersion Field Value byte MajorOperatingSystemVersion public ushort MajorOperatingSystemVersion Field Value ushort MajorSubsystemVersion public ushort MajorSubsystemVersion Field Value ushort MinorImageVersion public ushort MinorImageVersion Field Value ushort MinorLinkerVersion public byte MinorLinkerVersion Field Value byte MinorOperatingSystemVersion public ushort MinorOperatingSystemVersion Field Value ushort MinorSubsystemVersion public ushort MinorSubsystemVersion Field Value ushort NumberOfRvaAndSizes public uint NumberOfRvaAndSizes Field Value uint Reserved public PEHeader.ImageDataDirectory Reserved Field Value PEHeader.ImageDataDirectory ResourceTable public PEHeader.ImageDataDirectory ResourceTable Field Value PEHeader.ImageDataDirectory SectionAlignment public uint SectionAlignment Field Value uint SizeOfCode public uint SizeOfCode Field Value uint SizeOfHeaders public uint SizeOfHeaders Field Value uint SizeOfHeapCommit public ulong SizeOfHeapCommit Field Value ulong SizeOfHeapReserve public ulong SizeOfHeapReserve Field Value ulong SizeOfImage public uint SizeOfImage Field Value uint SizeOfInitializedData public uint SizeOfInitializedData Field Value uint SizeOfStackCommit public ulong SizeOfStackCommit Field Value ulong SizeOfStackReserve public ulong SizeOfStackReserve Field Value ulong SizeOfUninitializedData public uint SizeOfUninitializedData Field Value uint Subsystem public PESubsystem Subsystem Field Value PESubsystem TLSTable public PEHeader.ImageDataDirectory TLSTable Field Value PEHeader.ImageDataDirectory Win32VersionValue public uint Win32VersionValue Field Value uint"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEHeader.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEHeader.html",
    "title": "Class PEHeader | Zero Install .NET API",
    "summary": "Class PEHeader Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll Extracts meta data from PE (Portable Executable) file headers. public class PEHeader Inheritance object PEHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PEHeader(string) Reads the PE header of a file. public PEHeader(string path) Parameters path string The file to read. Properties DosHeader public PEHeader.ImageDosHeader DosHeader { get; } Property Value PEHeader.ImageDosHeader FileHeader public PEHeader.ImageFileHeader FileHeader { get; } Property Value PEHeader.ImageFileHeader Is32BitHeader public bool Is32BitHeader { get; } Property Value bool OptionalHeader32 public PEHeader.ImageOptionalHeader32 OptionalHeader32 { get; } Property Value PEHeader.ImageOptionalHeader32 OptionalHeader64 public PEHeader.ImageOptionalHeader64 OptionalHeader64 { get; } Property Value PEHeader.ImageOptionalHeader64 Subsystem public PESubsystem Subsystem { get; } Property Value PESubsystem"
  },
  "api/ZeroInstall.Publish.EntryPoints.PEMachineType.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PEMachineType.html",
    "title": "Enum PEMachineType | Zero Install .NET API",
    "summary": "Enum PEMachineType Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll The machine type specified by a PE file (i.e., the CPU architecture the binary runs on). public enum PEMachineType : ushort Fields I386 = 332 Itanium = 512 Native = 0 X64 = 34404"
  },
  "api/ZeroInstall.Publish.EntryPoints.PESubsystem.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PESubsystem.html",
    "title": "Enum PESubsystem | Zero Install .NET API",
    "summary": "Enum PESubsystem Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll The subsystem specified by a PE file (i.e., whether the binary is a console or GUI application). public enum PESubsystem : ushort Fields Native = 1 OS2Cui = 5 PosixCui = 7 WindowsCui = 3 WindowsGui = 2"
  },
  "api/ZeroInstall.Publish.EntryPoints.PerlScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PerlScript.html",
    "title": "Class PerlScript | Zero Install .NET API",
    "summary": "Class PerlScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A script written in Perl. public sealed class PerlScript : InterpretedScript, IEquatable<Candidate>, IEquatable<InterpretedScript> Inheritance object Candidate InterpretedScript PerlScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> Inherited Members InterpretedScript.InterpreterVersions InterpretedScript.CreateCommand() InterpretedScript.Equals(object) InterpretedScript.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties InterpreterInterface The interface URI of the interpreter to run the script. protected override FeedUri InterpreterInterface { get; } Property Value FeedUri"
  },
  "api/ZeroInstall.Publish.EntryPoints.PhpScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PhpScript.html",
    "title": "Class PhpScript | Zero Install .NET API",
    "summary": "Class PhpScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A script written in PHP. public sealed class PhpScript : InterpretedScript, IEquatable<Candidate>, IEquatable<InterpretedScript> Inheritance object Candidate InterpretedScript PhpScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> Inherited Members InterpretedScript.InterpreterVersions InterpretedScript.CreateCommand() InterpretedScript.Equals(object) InterpretedScript.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties InterpreterInterface The interface URI of the interpreter to run the script. protected override FeedUri InterpreterInterface { get; } Property Value FeedUri"
  },
  "api/ZeroInstall.Publish.EntryPoints.PosixBinary.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PosixBinary.html",
    "title": "Class PosixBinary | Zero Install .NET API",
    "summary": "Class PosixBinary Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll An ELF (Executable and Linkable Format) binary for a POSIX-style operation system. public sealed class PosixBinary : PosixExecutable, IEquatable<Candidate> Inheritance object Candidate NativeExecutable PosixExecutable PosixBinary Implements IEquatable<Candidate> Inherited Members NativeExecutable.CreateCommand() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() Candidate.Equals(object) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ZeroInstall.Publish.EntryPoints.PosixExecutable.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PosixExecutable.html",
    "title": "Class PosixExecutable | Zero Install .NET API",
    "summary": "Class PosixExecutable Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll Any file with the POSIX executable bit (xbit) set. public abstract class PosixExecutable : NativeExecutable, IEquatable<Candidate> Inheritance object Candidate NativeExecutable PosixExecutable Implements IEquatable<Candidate> Derived MacOSApp PosixBinary PosixScript Inherited Members NativeExecutable.CreateCommand() Candidate.IsExecutable(string) Candidate.BaseDirectory Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToVersionRange(ImplementationVersion) Candidate.CommandName Candidate.ToString() Candidate.Equals(object) Candidate.Equals(Candidate) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/ZeroInstall.Publish.EntryPoints.PosixScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PosixScript.html",
    "title": "Class PosixScript | Zero Install .NET API",
    "summary": "Class PosixScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A shebang (#!) script for execution on a POSIX-style operating system. public sealed class PosixScript : PosixExecutable, IEquatable<Candidate> Inheritance object Candidate NativeExecutable PosixExecutable PosixScript Implements IEquatable<Candidate> Inherited Members NativeExecutable.CreateCommand() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() Candidate.Equals(object) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ZeroInstall.Publish.EntryPoints.PowerShellScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PowerShellScript.html",
    "title": "Class PowerShellScript | Zero Install .NET API",
    "summary": "Class PowerShellScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A script written in PowerShell. [Equatable] public sealed class PowerShellScript : InterpretedScript, IEquatable<Candidate>, IEquatable<InterpretedScript>, IEquatable<PowerShellScript> Inheritance object Candidate InterpretedScript PowerShellScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> IEquatable<PowerShellScript> Inherited Members InterpretedScript.InterpreterVersions Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties InterpreterInterface The interface URI of the interpreter to run the script. protected override FeedUri InterpreterInterface { get; } Property Value FeedUri PowerShellType The types of PowerShell supported by the script. public PowerShellType PowerShellType { get; set; } Property Value PowerShellType Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(PowerShellScript?, PowerShellScript?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(PowerShellScript? left, PowerShellScript? right) Parameters left PowerShellScript The left object right PowerShellScript The right object Returns bool true if the objects are equal; otherwise, false. operator !=(PowerShellScript?, PowerShellScript?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(PowerShellScript? left, PowerShellScript? right) Parameters left PowerShellScript The left object right PowerShellScript The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Publish.EntryPoints.PowerShellType.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PowerShellType.html",
    "title": "Enum PowerShellType | Zero Install .NET API",
    "summary": "Enum PowerShellType Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll public enum PowerShellType Fields Any = 0 CoreOnly = 2 WindowsOnly = 1"
  },
  "api/ZeroInstall.Publish.EntryPoints.PythonScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.PythonScript.html",
    "title": "Class PythonScript | Zero Install .NET API",
    "summary": "Class PythonScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A script written in Python. public sealed class PythonScript : InterpretedScript, IEquatable<Candidate>, IEquatable<InterpretedScript> Inheritance object Candidate InterpretedScript PythonScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> Inherited Members InterpretedScript.InterpreterVersions InterpretedScript.Equals(object) InterpretedScript.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties GuiOnly Does this application have a graphical interface an no terminal output? Only enable if you are sure! public bool GuiOnly { get; set; } Property Value bool InterpreterInterface The interface URI of the interpreter to run the script. protected override FeedUri InterpreterInterface { get; } Property Value FeedUri Methods CreateCommand() Creates a Command to launch this entry point. public override Command CreateCommand() Returns Command"
  },
  "api/ZeroInstall.Publish.EntryPoints.RubyScript.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.RubyScript.html",
    "title": "Class RubyScript | Zero Install .NET API",
    "summary": "Class RubyScript Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A script written in Ruby. public sealed class RubyScript : InterpretedScript, IEquatable<Candidate>, IEquatable<InterpretedScript> Inheritance object Candidate InterpretedScript RubyScript Implements IEquatable<Candidate> IEquatable<InterpretedScript> Inherited Members InterpretedScript.InterpreterVersions InterpretedScript.CreateCommand() InterpretedScript.Equals(object) InterpretedScript.GetHashCode() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties InterpreterInterface The interface URI of the interpreter to run the script. protected override FeedUri InterpreterInterface { get; } Property Value FeedUri"
  },
  "api/ZeroInstall.Publish.EntryPoints.WindowsBatch.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.WindowsBatch.html",
    "title": "Class WindowsBatch | Zero Install .NET API",
    "summary": "Class WindowsBatch Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A Windows batch file/script. public sealed class WindowsBatch : NativeExecutable, IEquatable<Candidate> Inheritance object Candidate NativeExecutable WindowsBatch Implements IEquatable<Candidate> Inherited Members NativeExecutable.CreateCommand() Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToString() Candidate.Equals(object) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/ZeroInstall.Publish.EntryPoints.WindowsExe.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.WindowsExe.html",
    "title": "Class WindowsExe | Zero Install .NET API",
    "summary": "Class WindowsExe Namespace ZeroInstall.Publish.EntryPoints Assembly ZeroInstall.Publish.dll A native PE (Portable Executable) for Windows. public class WindowsExe : NativeExecutable, IEquatable<Candidate>, IIconContainer Inheritance object Candidate NativeExecutable WindowsExe Implements IEquatable<Candidate> IIconContainer Derived DotNetExe DotNetFrameworkExe Inherited Members NativeExecutable.CreateCommand() Candidate.IsExecutable(string) Candidate.BaseDirectory Candidate.RelativePath Candidate.Name Candidate.Summary Candidate.NeedsTerminal Candidate.Architecture Candidate.Version Candidate.Category Candidate.ToVersionRange(ImplementationVersion) Candidate.CommandName Candidate.ToString() Candidate.Equals(object) Candidate.Equals(Candidate) Candidate.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ExecutableExtension protected virtual string ExecutableExtension { get; } Property Value string Methods ExtractIcon() Extracts the primary icon of the executable. public Icon ExtractIcon() Returns Icon GetCpu(PEMachineType) protected static Cpu GetCpu(PEMachineType machine) Parameters machine PEMachineType Returns Cpu Parse(PEHeader) protected virtual bool Parse(PEHeader peHeader) Parameters peHeader PEHeader Returns bool"
  },
  "api/ZeroInstall.Publish.EntryPoints.html": {
    "href": "api/ZeroInstall.Publish.EntryPoints.html",
    "title": "Namespace ZeroInstall.Publish.EntryPoints | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Publish.EntryPoints Automatic detection of application entry points. Helps publishers set up the appropriate Commands and Runners. Classes BashScript A script written in Perl. Candidate Collects information about a potential candidate for an entry point. The subclass type determines the type of executable (native binary, interpreted script, etc.). DetectCandidates Detects entry point Candidates in a file system directory. DotNetDll DotNetExe DotNetFrameworkExe A .NET/Mono executable. InterpretedScript A plain text script that is executed by a runtime interpreter. Java A compiled Java application. JavaClass A compiled Java class file. JavaJar A Java JAR archive. MacOSApp A binary inside a MacOS X application bundle. NativeExecutable A file that can be executed directly by the operating system without an additional runtime environment. PEHeader Extracts meta data from PE (Portable Executable) file headers. PerlScript A script written in Perl. PhpScript A script written in PHP. PosixBinary An ELF (Executable and Linkable Format) binary for a POSIX-style operation system. PosixExecutable Any file with the POSIX executable bit (xbit) set. PosixScript A shebang (#!) script for execution on a POSIX-style operating system. PowerShellScript A script written in PowerShell. PythonScript A script written in Python. RubyScript A script written in Ruby. WindowsBatch A Windows batch file/script. WindowsExe A native PE (Portable Executable) for Windows. Structs PEHeader.ImageDataDirectory PEHeader.ImageDosHeader PEHeader.ImageFileHeader PEHeader.ImageOptionalHeader32 PEHeader.ImageOptionalHeader64 Interfaces IIconContainer An executable with embedded icons. Enums DotNetRuntimeType PEMachineType The machine type specified by a PE file (i.e., the CPU architecture the binary runs on). PESubsystem The subsystem specified by a PE file (i.e., whether the binary is a console or GUI application). PowerShellType"
  },
  "api/ZeroInstall.Publish.FeedBuilder.html": {
    "href": "api/ZeroInstall.Publish.FeedBuilder.html",
    "title": "Class FeedBuilder | Zero Install .NET API",
    "summary": "Class FeedBuilder Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll Builds simple Feeds containing a single Implementation. [MustDisposeResource] public class FeedBuilder : IDisposable Inheritance object FeedBuilder Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Candidates Lists auto-detected candidates for EntryPoints. public IEnumerable<Candidate> Candidates { get; } Property Value IEnumerable<Candidate> CapabilityList Set to configure CapabilityLists. public CapabilityList? CapabilityList { get; set; } Property Value CapabilityList Commands Lists the Command derived from Candidates and MainCandidate. public List<Command> Commands { get; } Property Value List<Command> EntryPoints Lists the EntryPoints accompanying Commands. public List<EntryPoint> EntryPoints { get; } Property Value List<EntryPoint> ID The value used for ID. public string? ID { get; } Property Value string Icons Set to configure Icons. public ICollection<Icon> Icons { get; } Property Value ICollection<Icon> ImplementationDirectory Set the directory to search for Candidates and to generate the ManifestDigest from. Is usually a subdirectory of or equal to TemporaryDirectory. public string? ImplementationDirectory { get; set; } Property Value string MainCandidate Set the main entry point. Provides meta-data and startup instructions for the application. Should be one of the auto-detected Candidates. public Candidate? MainCandidate { get; set; } Property Value Candidate ManifestDigest The value used for ManifestDigest. public ManifestDigest ManifestDigest { get; } Property Value ManifestDigest RetrievalMethod Set to configure RetrievalMethods. public RetrievalMethod? RetrievalMethod { get; set; } Property Value RetrievalMethod SecretKey Set to configure SecretKey. public OpenPgpSecretKey? SecretKey { get; set; } Property Value OpenPgpSecretKey TemporaryDirectory A temporary directory to prepare files for ImplementationDirectory. Not used by the FeedBuilder itself. public TemporaryDirectory? TemporaryDirectory { get; set; } Property Value TemporaryDirectory Remarks Setting a new value will automatically Dispose() the previous one. Uri Set to configure Uri. public FeedUri? Uri { get; set; } Property Value FeedUri Methods Build() Generates a feed as described by the properties. public SignedFeed Build() Returns SignedFeed Exceptions InvalidOperationException Required values have not been generated or set yet. DetectCandidates(ITaskHandler) Detects Candidates in the ImplementationDirectory. public void DetectCandidates(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions InvalidOperationException ImplementationDirectory is null or empty. OperationCanceledException The user canceled the task. IOException There was a problem generating the manifest or detecting the executables. UnauthorizedAccessException Write access to temporary files was not permitted. Dispose() Deletes the TemporaryDirectory. public void Dispose() GenerateCommands() Generates Commands and EntryPoints bases on Candidates and MainCandidate. public void GenerateCommands() Exceptions InvalidOperationException MainCandidate is null. GenerateDigest(ITaskHandler) Generates the ID and ManifestDigest. public void GenerateDigest(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions InvalidOperationException ImplementationDirectory is null or empty. OperationCanceledException The user canceled the task. IOException There was a problem generating the manifest. UnauthorizedAccessException Write access to temporary files was not permitted."
  },
  "api/ZeroInstall.Publish.FeedEditing.html": {
    "href": "api/ZeroInstall.Publish.FeedEditing.html",
    "title": "Class FeedEditing | Zero Install .NET API",
    "summary": "Class FeedEditing Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll Represents a Feed being edited using IUndoCommands. public class FeedEditing : CommandManager<Feed>, ICommandManager<Feed>, ICommandExecutor Inheritance object CommandManager<Feed> FeedEditing Implements ICommandManager<Feed> ICommandExecutor Inherited Members CommandManager<Feed>.Execute(IUndoCommand) CommandManager<Feed>.Undo() CommandManager<Feed>.Redo() CommandManager<Feed>.ClearUndo() CommandManager<Feed>.Target CommandManager<Feed>.Path CommandManager<Feed>.UndoEnabled CommandManager<Feed>.RedoEnabled CommandManager<Feed>.TargetUpdated CommandManager<Feed>.UndoEnabledChanged CommandManager<Feed>.RedoEnabledChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FeedEditing() Starts with an empty feed. public FeedEditing() FeedEditing(SignedFeed) Starts with an existing feed. public FeedEditing(SignedFeed signedFeed) Parameters signedFeed SignedFeed The feed to be edited. Properties Passphrase The passphrase to use to unlock SecretKey (if specified). public string? Passphrase { get; set; } Property Value string SignedFeed The (optionally signed) feed being edited. public SignedFeed SignedFeed { get; } Property Value SignedFeed UnsavedChanges Indicates whether there are changes to the feed that have not yet been saved to a file. public bool UnsavedChanges { get; } Property Value bool Methods IsValid(out string) Determines whether the feed is valid and ready for use by 0install. public bool IsValid(out string problem) Parameters problem string Returns human-readable description of the problem if the method result is false. Returns bool true if the feed is valid; false otherwise. Load(string) Loads a feed from an XML file (feed). public static FeedEditing Load(string path) Parameters path string The file to load from. Returns FeedEditing A FeedEditing containing the loaded feed. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. Save(string) Saves feed to an XML file, adds the default stylesheet and signs it with SecretKey (if specified). public override void Save(string path) Parameters path string The file to save to. Remarks Writing and signing the feed file are performed as an atomic operation (i.e. if signing fails an existing file remains unchanged). Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. KeyNotFoundException The specified SecretKey could not be found on the system. WrongPassphraseException Passphrase was incorrect."
  },
  "api/ZeroInstall.Publish.FeedUtils.html": {
    "href": "api/ZeroInstall.Publish.FeedUtils.html",
    "title": "Class FeedUtils | Zero Install .NET API",
    "summary": "Class FeedUtils Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll Helper methods for manipulating Feeds. public static class FeedUtils Inheritance object FeedUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeployStylesheet(string, string) Writes an XSL stylesheet with its accompanying CSS file unless there is already an XSL in place. public static void DeployStylesheet(string path, string name) Parameters path string The directory to write the stylesheet files to. name string The name of the stylesheet to deploy. Must be \"feed\" or \"catalog\". Exceptions IOException Failed to write the stylesheet files. UnauthorizedAccessException Write access to the directory is not permitted. GetKey(string, IOpenPgp) Determines the key used to sign a feed or catalog file. Only uses the first signature if more than one is present. public static OpenPgpSecretKey? GetKey(string path, IOpenPgp openPgp) Parameters path string The feed or catalog file to check for signatures. openPgp IOpenPgp The OpenPGP-compatible system used to validate the signatures. Returns OpenPgpSecretKey The key used to sign the file; null if the file was not signed. Exceptions FileNotFoundException The file file could not be found. IOException The file could not be read. UnauthorizedAccessException Read access to the file is not permitted. SignFeed(Stream, OpenPgpSecretKey, string?, IOpenPgp) Adds a Base64 signature to a feed or catalog stream. public static void SignFeed(Stream stream, OpenPgpSecretKey secretKey, string? passphrase, IOpenPgp openPgp) Parameters stream Stream The feed or catalog to sign. secretKey OpenPgpSecretKey The secret key to use for signing the file. passphrase string The passphrase to use to unlock the key. openPgp IOpenPgp The OpenPGP-compatible system used to create signatures. Remarks The file is not parsed before signing; invalid XML files are signed as well. The existing file must end with a line break. Old signatures are not removed. Exceptions IOException The file could not be read or written. UnauthorizedAccessException Read or write access to the file is not permitted. KeyNotFoundException The specified secretKey could not be found on the system. WrongPassphraseException passphrase was incorrect."
  },
  "api/ZeroInstall.Publish.ImplementationExtensions.html": {
    "href": "api/ZeroInstall.Publish.ImplementationExtensions.html",
    "title": "Class ImplementationExtensions | Zero Install .NET API",
    "summary": "Class ImplementationExtensions Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll Helpers for setting missing properties on Implementations. public static class ImplementationExtensions Inheritance object ImplementationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetMissing(Implementation, ICommandExecutor, ITaskHandler) Sets missing properties on the implementation by downloading and inferring. public static void SetMissing(this Implementation implementation, ICommandExecutor executor, ITaskHandler handler) Parameters implementation Implementation The implementation. executor ICommandExecutor Used to modify properties in an undoable fashion. handler ITaskHandler A callback object used when the user is to be informed about progress. Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. DigestMismatchException An existing digest does not match the newly calculated one."
  },
  "api/ZeroInstall.Publish.RetrievalMethodExtensions.html": {
    "href": "api/ZeroInstall.Publish.RetrievalMethodExtensions.html",
    "title": "Class RetrievalMethodExtensions | Zero Install .NET API",
    "summary": "Class RetrievalMethodExtensions Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll Helpers for setting missing properties on RetrievalMethods. public static class RetrievalMethodExtensions Inheritance object RetrievalMethodExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CalculateDigest(RetrievalMethod, ICommandExecutor, ITaskHandler, ManifestFormat?) Calculates a ManifestDigest for a retrieval method. Sets missing properties in the process. public static ManifestDigest CalculateDigest(this RetrievalMethod retrievalMethod, ICommandExecutor executor, ITaskHandler handler, ManifestFormat? format = null) Parameters retrievalMethod RetrievalMethod The retrieval method. executor ICommandExecutor Used to modify properties in an undoable fashion. handler ITaskHandler A callback object used when the user is to be informed about progress. format ManifestFormat The manifest format. Leave null for default. Returns ManifestDigest The generated digest. Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. SetMissing(DownloadRetrievalMethod, ICommandExecutor, string?) Sets missing properties on the retrieval method if they can be inferred. public static void SetMissing(this DownloadRetrievalMethod retrievalMethod, ICommandExecutor executor, string? localPath = null) Parameters retrievalMethod DownloadRetrievalMethod The retrieval method. executor ICommandExecutor Used to modify properties in an undoable fashion. localPath string An optional local file path where the retrievalMethod has already been downloaded. ToTempDir(DownloadRetrievalMethod, ITaskHandler, string?) Creates a temporary directory from a retrieval method. Sets missing properties in the process. [MustDisposeResource] public static TemporaryDirectory ToTempDir(this DownloadRetrievalMethod retrievalMethod, ITaskHandler handler, string? localPath = null) Parameters retrievalMethod DownloadRetrievalMethod The retrieval method. handler ITaskHandler A callback object used when the user is to be informed about progress. localPath string An optional local file path where the retrievalMethod has already been downloaded. Leave null to download automatically. Returns TemporaryDirectory A temporary directory built using the retrieval method. Exceptions OperationCanceledException The user canceled the task. WebException A file could not be downloaded from the internet. IOException There is a problem writing a temporary file. UnauthorizedAccessException Write access to a temporary file is not permitted."
  },
  "api/ZeroInstall.Publish.SignedCatalog.html": {
    "href": "api/ZeroInstall.Publish.SignedCatalog.html",
    "title": "Class SignedCatalog | Zero Install .NET API",
    "summary": "Class SignedCatalog Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll A wrapper around a Catalog adding and XSL stylesheet and a digital signature. [Serializable] public class SignedCatalog Inheritance object SignedCatalog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignedCatalog(Catalog, OpenPgpSecretKey?, IOpenPgp?) Creates a new signed catalog. public SignedCatalog(Catalog catalog, OpenPgpSecretKey? secretKey, IOpenPgp? openPgp = null) Parameters catalog Catalog The wrapped Catalog. secretKey OpenPgpSecretKey The secret key used to sign the Catalog; null for no signature. openPgp IOpenPgp The OpenPGP-compatible system used to create the signatures; null for default. Properties Catalog The wrapped Catalog. public Catalog Catalog { get; } Property Value Catalog SecretKey The secret key used to sign the Catalog; null for no signature. public OpenPgpSecretKey? SecretKey { get; set; } Property Value OpenPgpSecretKey Methods Load(string) Loads a Catalog from an XML file and identifies the signature (if any). public static SignedCatalog Load(string path) Parameters path string The file to load from. Returns SignedCatalog The loaded SignedCatalog. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. Save(string, string?) Saves Catalog to an XML file, adds the default stylesheet and sign it it with SecretKey (if specified). public void Save(string path, string? passphrase = null) Parameters path string The file to save in. passphrase string The passphrase to use to unlock the secret key; can be null if SecretKey is null. Remarks Writing and signing the catalog file are performed as an atomic operation (i.e. if signing fails an existing file remains unchanged). Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. KeyNotFoundException The specified SecretKey could not be found on the system. WrongPassphraseException passphrase was incorrect."
  },
  "api/ZeroInstall.Publish.SignedFeed.html": {
    "href": "api/ZeroInstall.Publish.SignedFeed.html",
    "title": "Class SignedFeed | Zero Install .NET API",
    "summary": "Class SignedFeed Namespace ZeroInstall.Publish Assembly ZeroInstall.Publish.dll A wrapper around a Feed adding and XSL stylesheet and a digital signature. [Serializable] public class SignedFeed Inheritance object SignedFeed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignedFeed(Feed, OpenPgpSecretKey?, IOpenPgp?) Creates a new signed feed. public SignedFeed(Feed feed, OpenPgpSecretKey? secretKey = null, IOpenPgp? openPgp = null) Parameters feed Feed The wrapped Feed. secretKey OpenPgpSecretKey The secret key used to sign the Feed; null for no signature. openPgp IOpenPgp The OpenPGP-compatible system used to create the signatures; null for default. Properties Feed The wrapped Feed. public Feed Feed { get; } Property Value Feed SecretKey The secret key used to sign the Feed; null for no signature. public OpenPgpSecretKey? SecretKey { get; set; } Property Value OpenPgpSecretKey Methods Load(string) Loads a Feed from an XML file and identifies the signature (if any). public static SignedFeed Load(string path) Parameters path string The file to load from. Returns SignedFeed The loaded SignedFeed. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing an XML file. Save(string, string?) Saves Feed to an XML file, adds the default stylesheet and sign it it with SecretKey (if specified). public void Save(string path, string? passphrase = null) Parameters path string The file to save in. passphrase string The passphrase to use to unlock the secret key; can be null if SecretKey is null. Remarks Writing and signing the feed file are performed as an atomic operation (i.e. if signing fails an existing file remains unchanged). Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. KeyNotFoundException The specified SecretKey could not be found on the system. WrongPassphraseException passphrase was incorrect."
  },
  "api/ZeroInstall.Publish.html": {
    "href": "api/ZeroInstall.Publish.html",
    "title": "Namespace ZeroInstall.Publish | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Publish Utilities for creating and modifying feed files. NuGet package: ZeroInstall.Publish Namespaces ZeroInstall.Publish.Capture Builds feeds by creating and comparing snapshots of the system before and after an application was installed. ZeroInstall.Publish.EntryPoints Automatic detection of application entry points. Helps publishers set up the appropriate Commands and Runners. Classes BuilderExtensions Helpers for adding RetrievalMethods to IBuilders and setting missing properties. FeedBuilder Builds simple Feeds containing a single Implementation. FeedEditing Represents a Feed being edited using IUndoCommands. FeedUtils Helper methods for manipulating Feeds. ImplementationExtensions Helpers for setting missing properties on Implementations. RetrievalMethodExtensions Helpers for setting missing properties on RetrievalMethods. SignedCatalog A wrapper around a Catalog adding and XSL stylesheet and a digital signature. SignedFeed A wrapper around a Feed adding and XSL stylesheet and a digital signature."
  },
  "api/ZeroInstall.Services.Executors.EnvironmentBuilder.html": {
    "href": "api/ZeroInstall.Services.Executors.EnvironmentBuilder.html",
    "title": "Class EnvironmentBuilder | Zero Install .NET API",
    "summary": "Class EnvironmentBuilder Namespace ZeroInstall.Services.Executors Assembly ZeroInstall.Services.dll Fluent-style builder for a process execution environment for a Selections document. public class EnvironmentBuilder : IEnvironmentBuilder Inheritance object EnvironmentBuilder Implements IEnvironmentBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnvironmentBuilder(IImplementationStore) Fluent-style builder for a process execution environment for a Selections document. public EnvironmentBuilder(IImplementationStore implementationStore) Parameters implementationStore IImplementationStore Methods AddArguments(params string[]) Appends user specified arguments to the command-line. public IEnvironmentBuilder AddArguments(params string[] arguments) Parameters arguments string[] Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. AddWrapper(string?) Instead of executing the selected program directly, pass it as an argument to this program. Useful for debuggers. May contain command-line arguments. Whitespaces must be escaped! public IEnvironmentBuilder AddWrapper(string? wrapper) Parameters wrapper string Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. Inject(Selections, string?) Sets the Selections to be injected. Must be called before any methods of the IEnvironmentBuilder interface are used. May not be called more than once. public IEnvironmentBuilder Inject(Selections selections, string? overrideMain = null) Parameters selections Selections The set of Implementations be injected into the execution environment. overrideMain string An alternative executable to run from the main Implementation instead of Main. May not contain command-line arguments! Whitespaces do not need to be escaped. Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The executor was unable to process the Selections. IOException A problem occurred while writing a file. UnauthorizedAccessException Write access to a file is not permitted. SetEnvironmentVariable(string, string?) Sets an environment variable in the execution environment. public IEnvironmentBuilder SetEnvironmentVariable(string name, string? value) Parameters name string The name of the environment variable. value string The value to set the environment variable to. Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. Start() Starts the program. public Process Start() Returns Process The newly created Process. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections or the main executable could not be launched. FileNotFoundException Failed to find the main executable. IOException Failed to start the program. UnauthorizedAccessException Write access to a file is not permitted. ToStartInfo() Builds a ProcessStartInfo for starting the program. public ProcessStartInfo ToStartInfo() Returns ProcessStartInfo The ProcessStartInfo that can be used to start the new Process. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections. IOException A problem occurred while writing a file. UnauthorizedAccessException Write access to a file is not permitted."
  },
  "api/ZeroInstall.Services.Executors.Executor.html": {
    "href": "api/ZeroInstall.Services.Executors.Executor.html",
    "title": "Class Executor | Zero Install .NET API",
    "summary": "Class Executor Namespace ZeroInstall.Services.Executors Assembly ZeroInstall.Services.dll Executes a Selections document as a program using dependency injection. public class Executor : IExecutor Inheritance object Executor Implements IExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors Executor(IImplementationStore) Executes a Selections document as a program using dependency injection. public Executor(IImplementationStore implementationStore) Parameters implementationStore IImplementationStore Remarks This class is immutable and thread-safe. Methods Inject(Selections, string?) Starts building an execution environment for a Selections document. public IEnvironmentBuilder Inject(Selections selections, string? overrideMain = null) Parameters selections Selections The set of Implementations be injected into the execution environment. overrideMain string An alternative executable to run from the main Implementation instead of Main. May not contain command-line arguments! Whitespaces do not need to be escaped. Returns IEnvironmentBuilder A fluent-style builder for a process execution environment. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections. IOException A problem occurred while writing a file. UnauthorizedAccessException Write access to a file is not permitted. Start(Selections) Starts a program as described by a Selections document. public Process? Start(Selections selections) Parameters selections Selections The set of Implementations be injected into the execution environment. Returns Process The newly created Process; null if no external process was started. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections or the main executable could not be launched. FileNotFoundException Failed to find the main executable. IOException Failed to start the program. UnauthorizedAccessException Write access to a file is not permitted."
  },
  "api/ZeroInstall.Services.Executors.ExecutorException.html": {
    "href": "api/ZeroInstall.Services.Executors.ExecutorException.html",
    "title": "Class ExecutorException | Zero Install .NET API",
    "summary": "Class ExecutorException Namespace ZeroInstall.Services.Executors Assembly ZeroInstall.Services.dll Indicates that the IExecutor was unable to launch the desired application. public sealed class ExecutorException : Exception, ISerializable Inheritance object Exception ExecutorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ExecutorException() Creates a new missing main exception. public ExecutorException() ExecutorException(string) Creates a new missing main exception. public ExecutorException(string message) Parameters message string ExecutorException(string, Exception) Creates a new missing main exception. public ExecutorException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/ZeroInstall.Services.Executors.IEnvironmentBuilder.html": {
    "href": "api/ZeroInstall.Services.Executors.IEnvironmentBuilder.html",
    "title": "Interface IEnvironmentBuilder | Zero Install .NET API",
    "summary": "Interface IEnvironmentBuilder Namespace ZeroInstall.Services.Executors Assembly ZeroInstall.Services.dll Fluent-style builder for a process execution environment. public interface IEnvironmentBuilder Methods AddArguments(params string[]) Appends user specified arguments to the command-line. IEnvironmentBuilder AddArguments(params string[] arguments) Parameters arguments string[] Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. AddWrapper(string?) Instead of executing the selected program directly, pass it as an argument to this program. Useful for debuggers. May contain command-line arguments. Whitespaces must be escaped! IEnvironmentBuilder AddWrapper(string? wrapper) Parameters wrapper string Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. SetEnvironmentVariable(string, string) Sets an environment variable in the execution environment. IEnvironmentBuilder SetEnvironmentVariable(string name, string value) Parameters name string The name of the environment variable. value string The value to set the environment variable to. Returns IEnvironmentBuilder The execution environment. Reference to self for fluent API use. Start() Starts the program. Process? Start() Returns Process The newly created Process. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections or the main executable could not be launched. FileNotFoundException Failed to find the main executable. IOException Failed to start the program. UnauthorizedAccessException Write access to a file is not permitted. ToStartInfo() Builds a ProcessStartInfo for starting the program. ProcessStartInfo ToStartInfo() Returns ProcessStartInfo The ProcessStartInfo that can be used to start the new Process. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections. IOException A problem occurred while writing a file. UnauthorizedAccessException Write access to a file is not permitted."
  },
  "api/ZeroInstall.Services.Executors.IExecutor.html": {
    "href": "api/ZeroInstall.Services.Executors.IExecutor.html",
    "title": "Interface IExecutor | Zero Install .NET API",
    "summary": "Interface IExecutor Namespace ZeroInstall.Services.Executors Assembly ZeroInstall.Services.dll Executes a Selections document as a program using dependency injection. public interface IExecutor Remarks Implementations of this interface are immutable and thread-safe. Methods Inject(Selections, string?) Starts building an execution environment for a Selections document. IEnvironmentBuilder Inject(Selections selections, string? overrideMain = null) Parameters selections Selections The set of Implementations be injected into the execution environment. overrideMain string An alternative executable to run from the main Implementation instead of Main. May not contain command-line arguments! Whitespaces do not need to be escaped. Returns IEnvironmentBuilder A fluent-style builder for a process execution environment. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections. IOException A problem occurred while writing a file. UnauthorizedAccessException Write access to a file is not permitted. Start(Selections) Starts a program as described by a Selections document. Process? Start(Selections selections) Parameters selections Selections The set of Implementations be injected into the execution environment. Returns Process The newly created Process; null if no external process was started. Exceptions ImplementationNotFoundException One of the Implementations is not cached yet. ExecutorException The IExecutor was unable to process the Selections or the main executable could not be launched. FileNotFoundException Failed to find the main executable. IOException Failed to start the program. UnauthorizedAccessException Write access to a file is not permitted."
  },
  "api/ZeroInstall.Services.Executors.html": {
    "href": "api/ZeroInstall.Services.Executors.html",
    "title": "Namespace ZeroInstall.Services.Executors | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services.Executors Launches implementations and injects the selected dependencies. Classes EnvironmentBuilder Fluent-style builder for a process execution environment for a Selections document. Executor Executes a Selections document as a program using dependency injection. ExecutorException Indicates that the IExecutor was unable to launch the desired application. Interfaces IEnvironmentBuilder Fluent-style builder for a process execution environment. IExecutor Executes a Selections document as a program using dependency injection."
  },
  "api/ZeroInstall.Services.Feeds.CatalogManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.CatalogManager.html",
    "title": "Class CatalogManager | Zero Install .NET API",
    "summary": "Class CatalogManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides access to remote and local Catalogs. Handles downloading, signature verification and caching. public class CatalogManager : ICatalogManager Inheritance object CatalogManager Implements ICatalogManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CatalogManagerExtensions.Get(ICatalogManager) CatalogManagerExtensions.TryGetOnline(ICatalogManager) Constructors CatalogManager(Config, ITrustManager, ITaskHandler) Provides access to remote and local Catalogs. Handles downloading, signature verification and caching. public CatalogManager(Config config, ITrustManager trustManager, ITaskHandler handler) Parameters config Config trustManager ITrustManager handler ITaskHandler Fields DefaultSource The default Catalog source used if no other is specified. public static readonly FeedUri DefaultSource Field Value FeedUri Methods AddSource(FeedUri) Adds a new source to download Catalog files from. public bool AddSource(FeedUri uri) Parameters uri FeedUri The URI of the source to add. Returns bool true if the source was add; false if the source was already in the list. Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. DownloadCatalog(FeedUri) Downloads and normalizes a remote catalog file. public Catalog DownloadCatalog(FeedUri source) Parameters source FeedUri The URL to download the catalog file from. Returns Catalog The parsed Catalog. Exceptions WebException A file could not be downloaded from the internet. SignatureException The signature data of a remote catalog file could not be verified. NotSupportedException The catalog requires a newer version of Zero Install. InvalidDataException A problem occurred while deserializing an XML file. GetOnline() Downloads and merges all Catalogs specified by the configuration files. public Catalog GetOnline() Returns Catalog The merged Catalogs. Exceptions IOException A problem occurred while reading a local catalog file. UnauthorizedAccessException Access to a local catalog file was not permitted. WebException A problem occurred while fetching a remote catalog file. NotSupportedException The catalog requires a newer version of Zero Install. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data of a remote catalog file could not be verified. UriFormatException An invalid catalog source is specified in the configuration file. GetSources() Returns a list of catalog sources as defined by configuration files. public IReadOnlyList<FeedUri> GetSources() Returns IReadOnlyList<FeedUri> Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. GetSources(bool) Returns a list of catalog sources as defined by configuration files. public static IReadOnlyList<FeedUri> GetSources(bool preferMachineWide) Parameters preferMachineWide bool At most one configuration file is processed. If true machine-wide config is preferred; if false per-user config is preferred. Returns IReadOnlyList<FeedUri> Remarks Only the top-most configuration file is processed. I.e., a user config overrides a system config. Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. RemoveSource(FeedUri) Removes an existing source of Catalog files. public bool RemoveSource(FeedUri uri) Parameters uri FeedUri The URI of the source to remove. Returns bool true if the source was removed; false if the source was not in the current list. Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. SetSources(IEnumerable<FeedUri>, bool) Sets the list of catalog sources in a configuration file. public static void SetSources(IEnumerable<FeedUri> uris, bool machineWide = false) Parameters uris IEnumerable<FeedUri> The list of catalog sources to use from now on. machineWide bool true to save in a machine-wide location; false to save in the user profile. Exceptions IOException There was a problem writing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. TryGetCached() Tries to return a locally cached copy of the merged Catalogs specified by the configuration files, as previously returned by GetOnline(). public Catalog? TryGetCached() Returns Catalog The merged Catalogs; null if there was a problem loading them."
  },
  "api/ZeroInstall.Services.Feeds.CatalogManagerExtensions.html": {
    "href": "api/ZeroInstall.Services.Feeds.CatalogManagerExtensions.html",
    "title": "Class CatalogManagerExtensions | Zero Install .NET API",
    "summary": "Class CatalogManagerExtensions Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides extension methods for ICatalogManager. public static class CatalogManagerExtensions Inheritance object CatalogManagerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get(ICatalogManager) Downloads and merges all Catalogs specified by the configuration files or returns a cached copy, if available. public static Catalog Get(this ICatalogManager manager) Parameters manager ICatalogManager Returns Catalog The merged Catalogs. Exceptions IOException A problem occurred while reading a local catalog file. UnauthorizedAccessException Access to a local catalog file was not permitted. WebException A problem occurred while fetching a remote catalog file. NotSupportedException The catalog requires a newer version of Zero Install. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data of a remote catalog file could not be verified. UriFormatException An invalid catalog source is specified in the configuration file. TryGetOnline(ICatalogManager) Tries to download and merge all Catalogs specified by the configuration files. public static Catalog? TryGetOnline(this ICatalogManager manager) Parameters manager ICatalogManager Returns Catalog The merged Catalogs; null if there was a problem loading them."
  },
  "api/ZeroInstall.Services.Feeds.FeedManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.FeedManager.html",
    "title": "Class FeedManager | Zero Install .NET API",
    "summary": "Class FeedManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides access to remote and local Feeds. Handles downloading and signature verification. public class FeedManager : IFeedManager Inheritance object FeedManager Implements IFeedManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FeedManagerExtensions.GetFresh(IFeedManager, FeedUri) FeedManagerExtensions.ImportFeed(IFeedManager, string) Remarks This class performs in-memory caching of Feeds and FeedPreferences. Constructors FeedManager(Config, IFeedCache, ITrustManager, ITaskHandler) Creates a new feed manager. public FeedManager(Config config, IFeedCache feedCache, ITrustManager trustManager, ITaskHandler handler) Parameters config Config User settings controlling network behaviour, solving, etc. feedCache IFeedCache The disk-based cache to store downloaded Feeds. trustManager ITrustManager Methods for verifying signatures and user trust. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Properties this[FeedUri] Returns a specific Feed. Automatically handles downloading, calling Normalize(FeedUri?) and caching. Updates the Stale indicator. public Feed this[FeedUri feedUri] { get; } Parameters feedUri FeedUri The URI of the feed. Property Value Feed The normalized Feed. Do not modify! The same instance may be returned to future callers. Remarks Feeds are always served from the IFeedCache if possible, unless Refresh is set to true. Exceptions UriFormatException Uri is missing or does not match feedUri. OperationCanceledException The user canceled the task. WebException A problem occurred while fetching the feed file. IOException A problem occurred while reading the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. InvalidDataException A required property on the feed is not set or invalid. Refresh Set to true to re-download Feeds even if they are already in the IFeedCache. public bool Refresh { get; set; } Property Value bool Remarks Setting this to true implicitly also flushes the in-memory cache. ShouldRefresh Indicates whether Stale is true and EffectiveNetworkUse is Full. public bool ShouldRefresh { get; } Property Value bool Stale Is set to true if any Feed returned by this[FeedUri] is getting stale and should be updated by setting Refresh to true. public bool Stale { get; set; } Property Value bool Remarks Freshness controls the time span after which a feed is considered stale. Methods Clear() Clears any in-memory caches. public void Clear() GetPreferences(FeedUri) Returns FeedPreferences for a specific feed. public FeedPreferences GetPreferences(FeedUri feedUri) Parameters feedUri FeedUri The URI of the feed. Returns FeedPreferences ImportFeed(Stream, OpenPgpKeyCallback?) Imports a remote Feed into the IFeedCache after verifying its signature. public void ImportFeed(Stream stream, OpenPgpKeyCallback? keyCallback = null) Parameters stream Stream The content of the feed file. keyCallback OpenPgpKeyCallback Callback for reading a specific OpenPGP public key file. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Access to the feed file or the cache is not permitted. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data of the feed file could not be handled or no signatures were trusted. IsStale(FeedUri) Determines whether there is a stale cached copy of a particular feed. public bool IsStale(FeedUri feedUri) Parameters feedUri FeedUri The URI of the feed. Returns bool true if there is a stale copy in the cache or no copy at all; false if there is a fresh copy in the cache. RateLimit(FeedUri) Ensures that operations regarding a specific feed do not happen to often in a row. public bool RateLimit(FeedUri feedUri) Parameters feedUri FeedUri The URI of the feed. Returns bool true if the operation should be skipped due to rate limiting; false if the operation may proceed."
  },
  "api/ZeroInstall.Services.Feeds.FeedManagerExtensions.html": {
    "href": "api/ZeroInstall.Services.Feeds.FeedManagerExtensions.html",
    "title": "Class FeedManagerExtensions | Zero Install .NET API",
    "summary": "Class FeedManagerExtensions Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides extension methods for IFeedManager. public static class FeedManagerExtensions Inheritance object FeedManagerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFresh(IFeedManager, FeedUri) Returns a specific Feed. Automatically updates cached feeds when indicated by ShouldRefresh. public static Feed GetFresh(this IFeedManager feedManager, FeedUri feedUri) Parameters feedManager IFeedManager The IFeedManager implementation. feedUri FeedUri The canonical ID used to identify the feed. Returns Feed The normalized Feed. Do not modify! The same instance may be returned to future callers. Remarks Feeds are always served from the IFeedCache if possible, unless Refresh is set to true. Exceptions UriFormatException Uri is missing or does not match feedUri. OperationCanceledException The user canceled the task. IOException A problem occurred while reading the feed file. WebException A problem occurred while fetching the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. InvalidDataException A required property on the feed is not set or invalid. ImportFeed(IFeedManager, string) Imports a local copy of a remote Feed into the IFeedCache after verifying its signature. public static void ImportFeed(this IFeedManager feedManager, string path) Parameters feedManager IFeedManager The IFeedManager implementation. path string The path of a local copy of the feed. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Access to the feed file or the cache is not permitted. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data of the feed file could not be handled or no signatures were trusted."
  },
  "api/ZeroInstall.Services.Feeds.ICatalogManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.ICatalogManager.html",
    "title": "Interface ICatalogManager | Zero Install .NET API",
    "summary": "Interface ICatalogManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides access to remote and local Catalogs. Handles downloading, signature verification and caching. public interface ICatalogManager Extension Methods CatalogManagerExtensions.Get(ICatalogManager) CatalogManagerExtensions.TryGetOnline(ICatalogManager) Methods AddSource(FeedUri) Adds a new source to download Catalog files from. bool AddSource(FeedUri uri) Parameters uri FeedUri The URI of the source to add. Returns bool true if the source was add; false if the source was already in the list. Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. DownloadCatalog(FeedUri) Downloads and normalizes a remote catalog file. Catalog DownloadCatalog(FeedUri source) Parameters source FeedUri The URL to download the catalog file from. Returns Catalog The parsed Catalog. Exceptions WebException A file could not be downloaded from the internet. SignatureException The signature data of a remote catalog file could not be verified. NotSupportedException The catalog requires a newer version of Zero Install. InvalidDataException A problem occurred while deserializing an XML file. GetOnline() Downloads and merges all Catalogs specified by the configuration files. Catalog GetOnline() Returns Catalog The merged Catalogs. Exceptions IOException A problem occurred while reading a local catalog file. UnauthorizedAccessException Access to a local catalog file was not permitted. WebException A problem occurred while fetching a remote catalog file. NotSupportedException The catalog requires a newer version of Zero Install. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data of a remote catalog file could not be verified. UriFormatException An invalid catalog source is specified in the configuration file. GetSources() Returns a list of catalog sources as defined by configuration files. IReadOnlyList<FeedUri> GetSources() Returns IReadOnlyList<FeedUri> Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. RemoveSource(FeedUri) Removes an existing source of Catalog files. bool RemoveSource(FeedUri uri) Parameters uri FeedUri The URI of the source to remove. Returns bool true if the source was removed; false if the source was not in the current list. Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. UriFormatException An invalid catalog source is specified in the configuration file. TryGetCached() Tries to return a locally cached copy of the merged Catalogs specified by the configuration files, as previously returned by GetOnline(). Catalog? TryGetCached() Returns Catalog The merged Catalogs; null if there was a problem loading them."
  },
  "api/ZeroInstall.Services.Feeds.IFeedManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.IFeedManager.html",
    "title": "Interface IFeedManager | Zero Install .NET API",
    "summary": "Interface IFeedManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides access to remote and local Feeds. Handles downloading and signature verification. public interface IFeedManager Extension Methods FeedManagerExtensions.GetFresh(IFeedManager, FeedUri) FeedManagerExtensions.ImportFeed(IFeedManager, string) Properties this[FeedUri] Returns a specific Feed. Automatically handles downloading, calling Normalize(FeedUri?) and caching. Updates the Stale indicator. Feed this[FeedUri feedUri] { get; } Parameters feedUri FeedUri The URI of the feed. Property Value Feed The normalized Feed. Do not modify! The same instance may be returned to future callers. Remarks Feeds are always served from the IFeedCache if possible, unless Refresh is set to true. Exceptions UriFormatException Uri is missing or does not match feedUri. OperationCanceledException The user canceled the task. WebException A problem occurred while fetching the feed file. IOException A problem occurred while reading the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. InvalidDataException A required property on the feed is not set or invalid. Refresh Set to true to re-download Feeds even if they are already in the IFeedCache. bool Refresh { get; set; } Property Value bool ShouldRefresh Indicates whether Stale is true and EffectiveNetworkUse is Full. bool ShouldRefresh { get; } Property Value bool Stale Is set to true if any Feed returned by this[FeedUri] is getting stale and should be updated by setting Refresh to true. bool Stale { get; set; } Property Value bool Remarks Freshness controls the time span after which a feed is considered stale. Methods Clear() Clears any in-memory caches. void Clear() GetPreferences(FeedUri) Returns FeedPreferences for a specific feed. FeedPreferences GetPreferences(FeedUri feedUri) Parameters feedUri FeedUri The URI of the feed. Returns FeedPreferences ImportFeed(Stream, OpenPgpKeyCallback?) Imports a remote Feed into the IFeedCache after verifying its signature. void ImportFeed(Stream stream, OpenPgpKeyCallback? keyCallback = null) Parameters stream Stream The content of the feed file. keyCallback OpenPgpKeyCallback Callback for reading a specific OpenPGP public key file. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Access to the feed file or the cache is not permitted. InvalidDataException A problem occurred while deserializing an XML file. SignatureException The signature data of the feed file could not be handled or no signatures were trusted. IsStale(FeedUri) Determines whether there is a stale cached copy of a particular feed. bool IsStale(FeedUri feedUri) Parameters feedUri FeedUri The URI of the feed. Returns bool true if there is a stale copy in the cache or no copy at all; false if there is a fresh copy in the cache. RateLimit(FeedUri) Ensures that operations regarding a specific feed do not happen to often in a row. bool RateLimit(FeedUri feedUri) Parameters feedUri FeedUri The URI of the feed. Returns bool true if the operation should be skipped due to rate limiting; false if the operation may proceed."
  },
  "api/ZeroInstall.Services.Feeds.ISelectionsManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.ISelectionsManager.html",
    "title": "Interface ISelectionsManager | Zero Install .NET API",
    "summary": "Interface ISelectionsManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides methods for filtering Selections. public interface ISelectionsManager Extension Methods SelectionsManagerExtensions.GetUncachedImplementations(ISelectionsManager, Selections) Remarks Implementations of this interface are immutable and thread-safe. Methods GetDiff(Selections, Selections) Generates a list of differences between two selections. IEnumerable<SelectionsDiffNode> GetDiff(Selections oldSelections, Selections newSelections) Parameters oldSelections Selections The old selections to base the comparison on. newSelections Selections The new selections to compare against. Returns IEnumerable<SelectionsDiffNode> GetImplementations(IEnumerable<ImplementationSelection>) Retrieves the original Implementations these selections were based on. IEnumerable<Implementation> GetImplementations(IEnumerable<ImplementationSelection> selections) Parameters selections IEnumerable<ImplementationSelection> The ImplementationSelections to map back to Implementations. Returns IEnumerable<Implementation> GetTree(Selections) Generates a tree representation of the dependencies within the selections. NamedCollection<SelectionsTreeNode> GetTree(Selections selections) Parameters selections Selections Returns NamedCollection<SelectionsTreeNode> GetUncached(IEnumerable<ImplementationSelection>) Returns a list of any downloadable ImplementationSelections that are missing from an IImplementationStore. IEnumerable<ImplementationSelection> GetUncached(IEnumerable<ImplementationSelection> selections) Parameters selections IEnumerable<ImplementationSelection> The selections to search for ImplementationSelections that are missing. Returns IEnumerable<ImplementationSelection> Remarks Feed files may be downloaded, no implementations are downloaded. Exceptions KeyNotFoundException A Feed or Implementation is missing. IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. InvalidDataException The feed file could not be parsed."
  },
  "api/ZeroInstall.Services.Feeds.ITrustManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.ITrustManager.html",
    "title": "Interface ITrustManager | Zero Install .NET API",
    "summary": "Interface ITrustManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Methods for verifying signatures and user trust. public interface ITrustManager Remarks Implementations of this interface are immutable and thread-safe. Methods CheckTrust(byte[], FeedUri, OpenPgpKeyCallback?) Checks whether a remote feed or catalog file has a valid and trusted signature. Downloads missing GPG keys for verification and interactively asks the user to approve new keys. ValidSignature CheckTrust(byte[] data, FeedUri uri, OpenPgpKeyCallback? keyCallback = null) Parameters data byte[] The data of the file. uri FeedUri The URI the data originally came from. keyCallback OpenPgpKeyCallback Callback for reading a specific OpenPGP public key file. Returns ValidSignature The first valid and trusted signature found on the feed. Exceptions UriFormatException uri is a local file. OperationCanceledException The user canceled the task. WebException A key file could not be downloaded from the internet. SignatureException No trusted signature was found. IOException A problem occurred while writing trust configuration. UnauthorizedAccessException Write access to the trust configuration is not permitted."
  },
  "api/ZeroInstall.Services.Feeds.OpenPgpKeyCallback.html": {
    "href": "api/ZeroInstall.Services.Feeds.OpenPgpKeyCallback.html",
    "title": "Delegate OpenPgpKeyCallback | Zero Install .NET API",
    "summary": "Delegate OpenPgpKeyCallback Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Callback for reading a specific OpenPGP public key file. public delegate ArraySegment<byte>? OpenPgpKeyCallback(string id) Parameters id string The key ID as a canonical string.. Returns ArraySegment<byte>? The public key in binary or ASCII Armored format."
  },
  "api/ZeroInstall.Services.Feeds.ReplayAttackException.html": {
    "href": "api/ZeroInstall.Services.Feeds.ReplayAttackException.html",
    "title": "Class ReplayAttackException | Zero Install .NET API",
    "summary": "Class ReplayAttackException Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Indicates a feed file that downloaded by the IFeedManager is older than a version already located in the IFeedCache. public sealed class ReplayAttackException : IOException, ISerializable Inheritance object Exception SystemException IOException ReplayAttackException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ReplayAttackException(Uri, DateTime, DateTime) Creates a new replay attack exception. public ReplayAttackException(Uri feedUrl, DateTime oldTime, DateTime newTime) Parameters feedUrl Uri The URL of the feed file to be added to the cache. oldTime DateTime The last changed time stamp of the existing file in the cache. newTime DateTime The last changed time stamp of the new file to be added. Properties FeedUrl The URL of the feed file to be added to the cache. public Uri FeedUrl { get; } Property Value Uri NewTime The last changed time stamp of the new file to be added. public DateTime NewTime { get; } Property Value DateTime OldTime The last changed time stamp of the existing file in the cache. public DateTime OldTime { get; } Property Value DateTime"
  },
  "api/ZeroInstall.Services.Feeds.SelectionsManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.SelectionsManager.html",
    "title": "Class SelectionsManager | Zero Install .NET API",
    "summary": "Class SelectionsManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides methods for filtering Selections. public class SelectionsManager : ISelectionsManager Inheritance object SelectionsManager Implements ISelectionsManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods SelectionsManagerExtensions.GetUncachedImplementations(ISelectionsManager, Selections) Remarks This class is immutable and thread-safe. Constructors SelectionsManager(IFeedManager, IImplementationStore, IPackageManager) Provides methods for filtering Selections. public SelectionsManager(IFeedManager feedManager, IImplementationStore implementationStore, IPackageManager packageManager) Parameters feedManager IFeedManager implementationStore IImplementationStore packageManager IPackageManager Remarks This class is immutable and thread-safe. Methods GetDiff(Selections, Selections) Generates a list of differences between two selections. public IEnumerable<SelectionsDiffNode> GetDiff(Selections oldSelections, Selections newSelections) Parameters oldSelections Selections The old selections to base the comparison on. newSelections Selections The new selections to compare against. Returns IEnumerable<SelectionsDiffNode> GetImplementations(IEnumerable<ImplementationSelection>) Retrieves the original Implementations these selections were based on. public IEnumerable<Implementation> GetImplementations(IEnumerable<ImplementationSelection> selections) Parameters selections IEnumerable<ImplementationSelection> The ImplementationSelections to map back to Implementations. Returns IEnumerable<Implementation> GetTree(Selections) Generates a tree representation of the dependencies within the selections. public NamedCollection<SelectionsTreeNode> GetTree(Selections selections) Parameters selections Selections Returns NamedCollection<SelectionsTreeNode> GetUncached(IEnumerable<ImplementationSelection>) Returns a list of any downloadable ImplementationSelections that are missing from an IImplementationStore. public IEnumerable<ImplementationSelection> GetUncached(IEnumerable<ImplementationSelection> selections) Parameters selections IEnumerable<ImplementationSelection> The selections to search for ImplementationSelections that are missing. Returns IEnumerable<ImplementationSelection> Remarks Feed files may be downloaded, no implementations are downloaded. Exceptions KeyNotFoundException A Feed or Implementation is missing. IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. InvalidDataException The feed file could not be parsed."
  },
  "api/ZeroInstall.Services.Feeds.SelectionsManagerExtensions.html": {
    "href": "api/ZeroInstall.Services.Feeds.SelectionsManagerExtensions.html",
    "title": "Class SelectionsManagerExtensions | Zero Install .NET API",
    "summary": "Class SelectionsManagerExtensions Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Provides extension methods for ISelectionsManager. public static class SelectionsManagerExtensions Inheritance object SelectionsManagerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetUncachedImplementations(ISelectionsManager, Selections) Combines GetUncached(IEnumerable<ImplementationSelection>) and GetImplementations(IEnumerable<ImplementationSelection>). public static List<Implementation> GetUncachedImplementations(this ISelectionsManager selectionsManager, Selections selections) Parameters selectionsManager ISelectionsManager The ISelectionsManager. selections Selections The selections to search for ImplementationSelections that are missing. Returns List<Implementation>"
  },
  "api/ZeroInstall.Services.Feeds.TrustManager.html": {
    "href": "api/ZeroInstall.Services.Feeds.TrustManager.html",
    "title": "Class TrustManager | Zero Install .NET API",
    "summary": "Class TrustManager Namespace ZeroInstall.Services.Feeds Assembly ZeroInstall.Services.dll Methods for verifying signatures and user trust. public class TrustManager : ITrustManager Inheritance object TrustManager Implements ITrustManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors TrustManager(TrustDB, Config, IOpenPgp, IFeedCache, ITaskHandler) Methods for verifying signatures and user trust. public TrustManager(TrustDB trustDB, Config config, IOpenPgp openPgp, IFeedCache feedCache, ITaskHandler handler) Parameters trustDB TrustDB config Config openPgp IOpenPgp feedCache IFeedCache handler ITaskHandler Remarks This class is immutable and thread-safe. Methods CheckTrust(byte[], FeedUri, OpenPgpKeyCallback?) Checks whether a remote feed or catalog file has a valid and trusted signature. Downloads missing GPG keys for verification and interactively asks the user to approve new keys. public ValidSignature CheckTrust(byte[] data, FeedUri uri, OpenPgpKeyCallback? keyCallback = null) Parameters data byte[] The data of the file. uri FeedUri The URI the data originally came from. keyCallback OpenPgpKeyCallback Callback for reading a specific OpenPGP public key file. Returns ValidSignature The first valid and trusted signature found on the feed. Exceptions UriFormatException uri is a local file. OperationCanceledException The user canceled the task. WebException A key file could not be downloaded from the internet. SignatureException No trusted signature was found. IOException A problem occurred while writing trust configuration. UnauthorizedAccessException Write access to the trust configuration is not permitted."
  },
  "api/ZeroInstall.Services.Feeds.html": {
    "href": "api/ZeroInstall.Services.Feeds.html",
    "title": "Namespace ZeroInstall.Services.Feeds | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services.Feeds Picking, downloading and verifying feeds. Classes CatalogManager Provides access to remote and local Catalogs. Handles downloading, signature verification and caching. CatalogManagerExtensions Provides extension methods for ICatalogManager. FeedManager Provides access to remote and local Feeds. Handles downloading and signature verification. FeedManagerExtensions Provides extension methods for IFeedManager. ReplayAttackException Indicates a feed file that downloaded by the IFeedManager is older than a version already located in the IFeedCache. SelectionsManager Provides methods for filtering Selections. SelectionsManagerExtensions Provides extension methods for ISelectionsManager. TrustManager Methods for verifying signatures and user trust. Interfaces ICatalogManager Provides access to remote and local Catalogs. Handles downloading, signature verification and caching. IFeedManager Provides access to remote and local Feeds. Handles downloading and signature verification. ISelectionsManager Provides methods for filtering Selections. ITrustManager Methods for verifying signatures and user trust. Delegates OpenPgpKeyCallback Callback for reading a specific OpenPGP public key file."
  },
  "api/ZeroInstall.Services.Fetchers.Fetcher.html": {
    "href": "api/ZeroInstall.Services.Fetchers.Fetcher.html",
    "title": "Class Fetcher | Zero Install .NET API",
    "summary": "Class Fetcher Namespace ZeroInstall.Services.Fetchers Assembly ZeroInstall.Services.dll Downloads Implementations, extracts them and adds them to an IImplementationStore. public class Fetcher : IFetcher Inheritance object Fetcher Implements IFetcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors Fetcher(Config, IImplementationStore, ITaskHandler) Downloads Implementations, extracts them and adds them to an IImplementationStore. public Fetcher(Config config, IImplementationStore store, ITaskHandler handler) Parameters config Config User settings controlling network behaviour, solving, etc. store IImplementationStore The location to store the downloaded and unpacked Implementations in. handler ITaskHandler A callback object used when the user needs to be informed about progress. Remarks This class is immutable and thread-safe. Properties Discovery Discovers implementations in implementation stores on other machines in the local network instead of fetching them from their original source. public IImplementationDiscovery? Discovery { get; set; } Property Value IImplementationDiscovery Methods Apply(IBuilder, IRecipeStep, string) Applies a retrieval method step. protected virtual void Apply(IBuilder builder, IRecipeStep step, string tag) Parameters builder IBuilder The builder used to build the implementation. step IRecipeStep Instructions for downloading the file. tag string A Tag used to group progress bars. CheckArchiveTypes(IEnumerable<Archive>) Infers missing MimeTypes and ensures suitable IArchiveExtractors are available. protected void CheckArchiveTypes(IEnumerable<Archive> archives) Parameters archives IEnumerable<Archive> Exceptions NotSupportedException No extractor registered for the specified or inferred MimeType. Download(IBuilder, DownloadRetrievalMethod, string) Applies a download step. protected virtual void Download(IBuilder builder, DownloadRetrievalMethod download, string tag) Parameters builder IBuilder The builder used to build the implementation. download DownloadRetrievalMethod Instructions for downloading the file. tag string A Tag used to group progress bars. Fetch(Implementation) Downloads an Implementation to the IImplementationStore. public void Fetch(Implementation implementation) Parameters implementation Implementation The implementation to download. Exceptions OperationCanceledException A download or IO task was canceled from another thread. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted. UnauthorizedAccessException Write access to IImplementationStore is not permitted. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest. Fetch(Implementation, string) Downloads an Implementation to the IImplementationStore. protected virtual void Fetch(Implementation implementation, string tag) Parameters implementation Implementation The implementation to download. tag string A Tag used to group progress bars. GetPath(ImplementationBase) Determines the local path of an implementation. protected string? GetPath(ImplementationBase implementation) Parameters implementation ImplementationBase Returns string A fully qualified path to the directory containing the implementation; null if the requested implementation could not be found in the store or is a package implementation. Retrieve(IReadOnlyCollection<IRecipeStep>, ManifestDigest, string) Executes the steps of a retrieval method to build an implementation. protected virtual void Retrieve(IReadOnlyCollection<IRecipeStep> steps, ManifestDigest manifestDigest, string tag) Parameters steps IReadOnlyCollection<IRecipeStep> The retrieval method steps. manifestDigest ManifestDigest The expected manifest digest of the implementation. tag string A Tag used to group progress bars. Retrieve(RetrievalMethod, ManifestDigest, string) Executes a retrieval method to build an implementation. protected virtual void Retrieve(RetrievalMethod retrievalMethod, ManifestDigest manifestDigest, string tag) Parameters retrievalMethod RetrievalMethod The retrieval method. manifestDigest ManifestDigest The expected manifest digest of the implementation. tag string A Tag used to group progress bars. Retrieve(ExternalRetrievalMethod) Executes an external retrieval method. protected virtual void Retrieve(ExternalRetrievalMethod retrievalMethod) Parameters retrievalMethod ExternalRetrievalMethod TryRetrieve(IEnumerable<RetrievalMethod>, ManifestDigest, string) Tries one or more RetrievalMethods until one succeeds. protected virtual void TryRetrieve(IEnumerable<RetrievalMethod> retrievalMethods, ManifestDigest manifestDigest, string tag) Parameters retrievalMethods IEnumerable<RetrievalMethod> The available retrieval method. manifestDigest ManifestDigest The expected manifest digest of the implementation. tag string A Tag used to group progress bars."
  },
  "api/ZeroInstall.Services.Fetchers.IFetcher.html": {
    "href": "api/ZeroInstall.Services.Fetchers.IFetcher.html",
    "title": "Interface IFetcher | Zero Install .NET API",
    "summary": "Interface IFetcher Namespace ZeroInstall.Services.Fetchers Assembly ZeroInstall.Services.dll Downloads Implementations, extracts them and adds them to an IImplementationStore. public interface IFetcher Remarks Implementations of this interface are immutable and thread-safe. Properties Discovery Discovers implementations in implementation stores on other machines in the local network instead of fetching them from their original source. IImplementationDiscovery? Discovery { get; set; } Property Value IImplementationDiscovery Methods Fetch(Implementation) Downloads an Implementation to the IImplementationStore. void Fetch(Implementation implementation) Parameters implementation Implementation The implementation to download. Exceptions OperationCanceledException A download or IO task was canceled from another thread. WebException A file could not be downloaded from the internet. NotSupportedException A file format, protocol, etc. is unknown or not supported. IOException A downloaded file could not be written to the disk or extracted. UnauthorizedAccessException Write access to IImplementationStore is not permitted. DigestMismatchException An Implementation's Archives don't match the associated ManifestDigest."
  },
  "api/ZeroInstall.Services.Fetchers.IImplementationDiscovery.html": {
    "href": "api/ZeroInstall.Services.Fetchers.IImplementationDiscovery.html",
    "title": "Interface IImplementationDiscovery | Zero Install .NET API",
    "summary": "Interface IImplementationDiscovery Namespace ZeroInstall.Services.Fetchers Assembly ZeroInstall.Services.dll Discovers implementations in implementation stores on other machines in the local network. public interface IImplementationDiscovery Extension Methods ImplementationDiscoveryExtensions.TryGetImplementation(IImplementationDiscovery, ManifestDigest, TimeSpan, CancellationToken) Methods GetImplementation(ManifestDigest, CancellationToken) Finds a specific implementation in an implementation store on another machine. Blocks until the implementation is found or the operation is cancelled. Uri GetImplementation(ManifestDigest manifestDigest, CancellationToken cancellationToken) Parameters manifestDigest ManifestDigest The digest the implementation to find. cancellationToken CancellationToken Used to stop looking for the implementation. Returns Uri An archive URI from which the implementation can be downloaded. Exceptions OperationCanceledException The cancellationToken was cancelled."
  },
  "api/ZeroInstall.Services.Fetchers.ImplementationDiscovery.html": {
    "href": "api/ZeroInstall.Services.Fetchers.ImplementationDiscovery.html",
    "title": "Class ImplementationDiscovery | Zero Install .NET API",
    "summary": "Class ImplementationDiscovery Namespace ZeroInstall.Services.Fetchers Assembly ZeroInstall.Services.dll Discovers implementations in implementation stores on other machines in the local network. public class ImplementationDiscovery : IImplementationDiscovery, IDisposable Inheritance object ImplementationDiscovery Implements IImplementationDiscovery IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ImplementationDiscoveryExtensions.TryGetImplementation(IImplementationDiscovery, ManifestDigest, TimeSpan, CancellationToken) Constructors ImplementationDiscovery() Starts discovering implementation stores on other machines in the local network. public ImplementationDiscovery() Methods Dispose() Stops discovering implementation stores. public void Dispose() GetImplementation(ManifestDigest, CancellationToken) Finds a specific implementation in an implementation store on another machine. Blocks until the implementation is found or the operation is cancelled. public Uri GetImplementation(ManifestDigest manifestDigest, CancellationToken cancellationToken) Parameters manifestDigest ManifestDigest The digest the implementation to find. cancellationToken CancellationToken Used to stop looking for the implementation. Returns Uri An archive URI from which the implementation can be downloaded. Exceptions OperationCanceledException The cancellationToken was cancelled."
  },
  "api/ZeroInstall.Services.Fetchers.ImplementationDiscoveryExtensions.html": {
    "href": "api/ZeroInstall.Services.Fetchers.ImplementationDiscoveryExtensions.html",
    "title": "Class ImplementationDiscoveryExtensions | Zero Install .NET API",
    "summary": "Class ImplementationDiscoveryExtensions Namespace ZeroInstall.Services.Fetchers Assembly ZeroInstall.Services.dll Provides extension methods for IImplementationDiscovery. public static class ImplementationDiscoveryExtensions Inheritance object ImplementationDiscoveryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryGetImplementation(IImplementationDiscovery, ManifestDigest, TimeSpan, CancellationToken) Tries to find a specific implementation in an implementation store on another machine within the specified timeout. public static Uri? TryGetImplementation(this IImplementationDiscovery discovery, ManifestDigest manifestDigest, TimeSpan timeout, CancellationToken cancellationToken = default) Parameters discovery IImplementationDiscovery The implementation discovery service. manifestDigest ManifestDigest The digest the implementation to find. timeout TimeSpan The amount of time to look for the implementation. cancellationToken CancellationToken Used to stop looking for the implementation. Returns Uri An archive URI from which the implementation can be downloaded; null if the implementation was not found within the specified timeout. Exceptions OperationCanceledException The cancellationToken was cancelled."
  },
  "api/ZeroInstall.Services.Fetchers.RetrievalMethodRanker.html": {
    "href": "api/ZeroInstall.Services.Fetchers.RetrievalMethodRanker.html",
    "title": "Class RetrievalMethodRanker | Zero Install .NET API",
    "summary": "Class RetrievalMethodRanker Namespace ZeroInstall.Services.Fetchers Assembly ZeroInstall.Services.dll Compares RetrievalMethods and sorts them from most to least preferred by IFetchers. public sealed class RetrievalMethodRanker : IComparer<RetrievalMethod> Inheritance object RetrievalMethodRanker Implements IComparer<RetrievalMethod> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance Singleton pattern. public static readonly RetrievalMethodRanker Instance Field Value RetrievalMethodRanker Methods Compare(RetrievalMethod?, RetrievalMethod?) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. public int Compare(RetrievalMethod? x, RetrievalMethod? y) Parameters x RetrievalMethod The first object to compare. y RetrievalMethod The second object to compare. Returns int A signed integer that indicates the relative values of x and y, as shown in the following table. Value Meaning Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y."
  },
  "api/ZeroInstall.Services.Fetchers.html": {
    "href": "api/ZeroInstall.Services.Fetchers.html",
    "title": "Namespace ZeroInstall.Services.Fetchers | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services.Fetchers Downloads and extracts implementations. Classes Fetcher Downloads Implementations, extracts them and adds them to an IImplementationStore. ImplementationDiscovery Discovers implementations in implementation stores on other machines in the local network. ImplementationDiscoveryExtensions Provides extension methods for IImplementationDiscovery. RetrievalMethodRanker Compares RetrievalMethods and sorts them from most to least preferred by IFetchers. Interfaces IFetcher Downloads Implementations, extracts them and adds them to an IImplementationStore. IImplementationDiscovery Discovers implementations in implementation stores on other machines in the local network."
  },
  "api/ZeroInstall.Services.Native.CompositePackageManager.html": {
    "href": "api/ZeroInstall.Services.Native.CompositePackageManager.html",
    "title": "Class CompositePackageManager | Zero Install .NET API",
    "summary": "Class CompositePackageManager Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll Combines multiple IPackageManagers as a composite. public class CompositePackageManager : IPackageManager Inheritance object CompositePackageManager Implements IPackageManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors CompositePackageManager(IEnumerable<IPackageManager>) Combines multiple IPackageManagers as a composite. public CompositePackageManager(IEnumerable<IPackageManager> packageManagers) Parameters packageManagers IEnumerable<IPackageManager> A priority-sorted list of IPackageManagers. Queried first-to-last. Remarks This class is immutable and thread-safe. Methods Lookup(ImplementationSelection) Looks up the specific ExternalImplementation an ImplementationSelection was based on. public ExternalImplementation? Lookup(ImplementationSelection selection) Parameters selection ImplementationSelection The implementation selection to look up. Returns ExternalImplementation The ExternalImplementation; null if selection does not refer to a package known to this package manager. Query(PackageImplementation, params string[]) Queries the package manager for all ExternalImplementations that match a specific PackageImplementation definition. public IEnumerable<ExternalImplementation> Query(PackageImplementation package, params string[] distributions) Parameters package PackageImplementation The definition of the package to look for. distributions string[] Specifies the distributions to check for matching packages. Leave empty to check in all available distributions. Returns IEnumerable<ExternalImplementation>"
  },
  "api/ZeroInstall.Services.Native.ExternalImplementation.html": {
    "href": "api/ZeroInstall.Services.Native.ExternalImplementation.html",
    "title": "Class ExternalImplementation | Zero Install .NET API",
    "summary": "Class ExternalImplementation Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll An implementation provided by an external package manager. [Equatable] public sealed class ExternalImplementation : Implementation, IEquatable<XmlUnknown>, IEquatable<FeedElement>, IEquatable<TargetBase>, IBindingContainer, IDependencyContainer, ICloneable<Element>, IEquatable<Element>, IEquatable<ImplementationBase>, IEquatable<Implementation>, IEquatable<ExternalImplementation> Inheritance object XmlUnknown FeedElement TargetBase Element ImplementationBase Implementation ExternalImplementation Implements IEquatable<XmlUnknown> IEquatable<FeedElement> IEquatable<TargetBase> IBindingContainer IDependencyContainer ICloneable<Element> IEquatable<Element> IEquatable<ImplementationBase> IEquatable<Implementation> IEquatable<ExternalImplementation> Inherited Members Implementation.RetrievalMethods Implementation.Normalize(FeedUri) Implementation.CloneImplementation() Implementation.Clone() ImplementationBase.ID ImplementationBase.LocalPath ImplementationBase.Version ImplementationBase.ManifestDigest Element.ReleaseDateFormat Element.VersionModifier Element.Released Element.ReleasedString Element.Stability Element.RolloutPercentage Element.License Element.Main Element.SelfTest Element.DocDir Element.Dependencies Element.Restrictions Element.Bindings Element.Commands Element.ContainsCommand(string) Element.this[string] Element.GetCommand(string) TargetBase.Languages TargetBase.Architecture FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods SolverUtils.AddDependencies(IDependencyContainer, Requirements, IDependencyContainer) Constructors ExternalImplementation(string, string, ImplementationVersion, Cpu) Creates a new external implementation. public ExternalImplementation(string distribution, string package, ImplementationVersion version, Cpu cpu = Cpu.All) Parameters distribution string The name of the distribution (e.g. Debian, RPM) where this implementation comes from. package string The name of the package in the distribution. version ImplementationVersion The version number of the implementation. cpu Cpu For platform-specific binaries, the CPU architecture for which the implementation was compiled. Fields PackagePrefix This is prepended to ID for all ExternalImplementation. public const string PackagePrefix = \"package:\" Field Value string Remarks Also used to mark regular Implementations that act as proxies for ExternalImplementations. Properties Distribution The name of the distribution (e.g. Debian, RPM) where this implementation comes from. public string Distribution { get; set; } Property Value string IsInstalled Indicates whether this implementation is currently installed. public bool IsInstalled { get; set; } Property Value bool Package The name of the package in the Distribution. public string Package { get; set; } Property Value string QuickTestFile A file which, if present, indicates that this implementation IsInstalled. public string? QuickTestFile { get; set; } Property Value string Remarks This makes it possible to avoid Lookup(ImplementationSelection) calls for better performance. See Also QuickTestFile Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FromID(string) Creates a new external implementation from an ID. public static ExternalImplementation FromID(string id) Parameters id string The ID to parse. Returns ExternalImplementation Exceptions FormatException id is not a standard ExternalImplementation ID. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns the implementation in the form \"Comma-separated list of set values\". Not safe for parsing! public override string ToString() Returns string Operators operator ==(ExternalImplementation?, ExternalImplementation?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ExternalImplementation? left, ExternalImplementation? right) Parameters left ExternalImplementation The left object right ExternalImplementation The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ExternalImplementation?, ExternalImplementation?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ExternalImplementation? left, ExternalImplementation? right) Parameters left ExternalImplementation The left object right ExternalImplementation The right object Returns bool true if the objects are not equal; otherwise, false. See Also IPackageManager"
  },
  "api/ZeroInstall.Services.Native.ExternalRetrievalMethod.html": {
    "href": "api/ZeroInstall.Services.Native.ExternalRetrievalMethod.html",
    "title": "Class ExternalRetrievalMethod | Zero Install .NET API",
    "summary": "Class ExternalRetrievalMethod Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll Retrieves an implementation by installing it via an external package manager rather than Zero Install itself. [Equatable] public sealed class ExternalRetrievalMethod : RetrievalMethod, IEquatable<XmlUnknown>, IEquatable<FeedElement>, ICloneable<RetrievalMethod>, IEquatable<ExternalRetrievalMethod> Inheritance object XmlUnknown FeedElement RetrievalMethod ExternalRetrievalMethod Implements IEquatable<XmlUnknown> IEquatable<FeedElement> ICloneable<RetrievalMethod> IEquatable<ExternalRetrievalMethod> Inherited Members RetrievalMethod.Normalize(FeedUri) FeedElement.IfZeroInstallVersion XmlUnknown.UnknownAttributes XmlUnknown.UnknownElements XmlUnknown.ToShortXml() XmlUnknown.Equals(XmlUnknown) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ConfirmationQuestion A question the user shall be asked for confirmation before calling Install. null if no confirmation is required. public string? ConfirmationQuestion { get; set; } Property Value string Distro The name of the distribution this package came from. public string? Distro { get; set; } Property Value string Install A function to call to install this package. public Action? Install { get; set; } Property Value Action PackageID The package name, in a form recognised by the external package manager. public string? PackageID { get; set; } Property Value string Size The download size in bytes. public long Size { get; set; } Property Value long Methods Clone() Creates a deep copy of this ExternalRetrievalMethod instance. public override RetrievalMethod Clone() Returns RetrievalMethod The new copy of the ExternalRetrievalMethod. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ExternalRetrievalMethod?, ExternalRetrievalMethod?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(ExternalRetrievalMethod? left, ExternalRetrievalMethod? right) Parameters left ExternalRetrievalMethod The left object right ExternalRetrievalMethod The right object Returns bool true if the objects are equal; otherwise, false. operator !=(ExternalRetrievalMethod?, ExternalRetrievalMethod?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(ExternalRetrievalMethod? left, ExternalRetrievalMethod? right) Parameters left ExternalRetrievalMethod The left object right ExternalRetrievalMethod The right object Returns bool true if the objects are not equal; otherwise, false. See Also IPackageManager"
  },
  "api/ZeroInstall.Services.Native.IPackageManager.html": {
    "href": "api/ZeroInstall.Services.Native.IPackageManager.html",
    "title": "Interface IPackageManager | Zero Install .NET API",
    "summary": "Interface IPackageManager Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll Handles packages provided by the operating system's native package managers rather than Zero Install itself. public interface IPackageManager Remarks Implementations of this interface are immutable and thread-safe. Methods Lookup(ImplementationSelection) Looks up the specific ExternalImplementation an ImplementationSelection was based on. ExternalImplementation? Lookup(ImplementationSelection selection) Parameters selection ImplementationSelection The implementation selection to look up. Returns ExternalImplementation The ExternalImplementation; null if selection does not refer to a package known to this package manager. Query(PackageImplementation, params string[]) Queries the package manager for all ExternalImplementations that match a specific PackageImplementation definition. IEnumerable<ExternalImplementation> Query(PackageImplementation package, params string[] distributions) Parameters package PackageImplementation The definition of the package to look for. distributions string[] Specifies the distributions to check for matching packages. Leave empty to check in all available distributions. Returns IEnumerable<ExternalImplementation> See Also PackageImplementation ExternalImplementation ExternalRetrievalMethod"
  },
  "api/ZeroInstall.Services.Native.PackageManagerBase.html": {
    "href": "api/ZeroInstall.Services.Native.PackageManagerBase.html",
    "title": "Class PackageManagerBase | Zero Install .NET API",
    "summary": "Class PackageManagerBase Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll Base class for IPackageManager implementations using template methods. public abstract class PackageManagerBase : IPackageManager Inheritance object PackageManagerBase Implements IPackageManager Derived WindowsPackageManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Properties DistributionName The name of the Distributions this package manager provides packages for. protected abstract string DistributionName { get; } Property Value string Methods GetImplementations(string) Retrieves a set of specific native implementations for a package name. protected abstract IEnumerable<ExternalImplementation> GetImplementations(string packageName) Parameters packageName string The name of the package to look for. Returns IEnumerable<ExternalImplementation> Lookup(ImplementationSelection) Looks up the specific ExternalImplementation an ImplementationSelection was based on. public ExternalImplementation? Lookup(ImplementationSelection selection) Parameters selection ImplementationSelection The implementation selection to look up. Returns ExternalImplementation The ExternalImplementation; null if selection does not refer to a package known to this package manager. Query(PackageImplementation, params string[]) Queries the package manager for all ExternalImplementations that match a specific PackageImplementation definition. public IEnumerable<ExternalImplementation> Query(PackageImplementation package, params string[] distributions) Parameters package PackageImplementation The definition of the package to look for. distributions string[] Specifies the distributions to check for matching packages. Leave empty to check in all available distributions. Returns IEnumerable<ExternalImplementation>"
  },
  "api/ZeroInstall.Services.Native.PackageManagers.html": {
    "href": "api/ZeroInstall.Services.Native.PackageManagers.html",
    "title": "Class PackageManagers | Zero Install .NET API",
    "summary": "Class PackageManagers Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll Provides IPackageManager instances. public static class PackageManagers Inheritance object PackageManagers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Default() Creates the default IPackageManager for the current platform. public static IPackageManager Default() Returns IPackageManager"
  },
  "api/ZeroInstall.Services.Native.WindowsPackageManager.html": {
    "href": "api/ZeroInstall.Services.Native.WindowsPackageManager.html",
    "title": "Class WindowsPackageManager | Zero Install .NET API",
    "summary": "Class WindowsPackageManager Namespace ZeroInstall.Services.Native Assembly ZeroInstall.Services.dll Detects common Windows software packages (such as Java and .NET) that are installed natively. public class WindowsPackageManager : PackageManagerBase, IPackageManager Inheritance object PackageManagerBase WindowsPackageManager Implements IPackageManager Inherited Members PackageManagerBase.Query(PackageImplementation, params string[]) PackageManagerBase.Lookup(ImplementationSelection) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors WindowsPackageManager() public WindowsPackageManager() Properties DistributionName The name of the Distributions this package manager provides packages for. protected override string DistributionName { get; } Property Value string Methods GetImplementations(string) Retrieves a set of specific native implementations for a package name. protected override IEnumerable<ExternalImplementation> GetImplementations(string packageName) Parameters packageName string The name of the package to look for. Returns IEnumerable<ExternalImplementation>"
  },
  "api/ZeroInstall.Services.Native.html": {
    "href": "api/ZeroInstall.Services.Native.html",
    "title": "Namespace ZeroInstall.Services.Native | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services.Native Operating system specific services such as native package managers. Classes CompositePackageManager Combines multiple IPackageManagers as a composite. ExternalImplementation An implementation provided by an external package manager. ExternalRetrievalMethod Retrieves an implementation by installing it via an external package manager rather than Zero Install itself. PackageManagerBase Base class for IPackageManager implementations using template methods. PackageManagers Provides IPackageManager instances. WindowsPackageManager Detects common Windows software packages (such as Java and .NET) that are installed natively. Interfaces IPackageManager Handles packages provided by the operating system's native package managers rather than Zero Install itself."
  },
  "api/ZeroInstall.Services.Server.ImplementationServer.html": {
    "href": "api/ZeroInstall.Services.Server.ImplementationServer.html",
    "title": "Class ImplementationServer | Zero Install .NET API",
    "summary": "Class ImplementationServer Namespace ZeroInstall.Services.Server Assembly ZeroInstall.Services.dll Simple HTTP web server that serves implementations as on-demand generated archives. public sealed class ImplementationServer : HttpServer, IDisposable Inheritance object HttpServer ImplementationServer Implements IDisposable Inherited Members HttpServer.Port object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ImplementationServer(IImplementationStore, ushort, bool) Starts serving implementations as archives via HTTP. public ImplementationServer(IImplementationStore implementationStore, ushort port = 0, bool localOnly = false) Parameters implementationStore IImplementationStore The implementation store to serve implementations from. port ushort The TCP port to listen on; 0 to automatically pick free port. localOnly bool true to only respond to requests from the local machine instead of the network. Useful for unit tests. Exceptions WebException Unable to serve on the specified port. NotAdminException Needs admin rights to serve HTTP requests. Fields DnsServiceName DNS name for discovering Zero Install implementation stores. public const string DnsServiceName = \"_0install-store._tcp\" Field Value string Methods Dispose() Stops serving implementations. public override void Dispose() HandleRequest(HttpListenerContext) Handles a single HTTP request. protected override void HandleRequest(HttpListenerContext context) Parameters context HttpListenerContext"
  },
  "api/ZeroInstall.Services.Server.html": {
    "href": "api/ZeroInstall.Services.Server.html",
    "title": "Namespace ZeroInstall.Services.Server | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services.Server Provides resources to other Zero Install instances via the network. Classes ImplementationServer Simple HTTP web server that serves implementations as on-demand generated archives."
  },
  "api/ZeroInstall.Services.ServiceCollectionExtensions.html": {
    "href": "api/ZeroInstall.Services.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Zero Install .NET API",
    "summary": "Class ServiceCollectionExtensions Namespace ZeroInstall.Services Assembly ZeroInstall.Services.dll Provides extension methods for IServiceCollection. public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddZeroInstall(IServiceCollection, IConfiguration?) Registers a set of scoped services for using Zero Install functionality. Automatically uses ILogger<TCategoryName> and ICredentialProvider if registered in services. public static IServiceCollection AddZeroInstall(this IServiceCollection services, IConfiguration? configuration = null) Parameters services IServiceCollection The service collection to add the services to. configuration IConfiguration An optional configuration source for building Config instead of the default config files. Returns IServiceCollection See Also ConfigureCredentials(IServiceCollection, IConfiguration) AddZeroInstall<TTaskHandler>(IServiceCollection, IConfiguration?) Registers a set of scoped services for using Zero Install functionality. public static IServiceCollection AddZeroInstall<TTaskHandler>(this IServiceCollection services, IConfiguration? configuration = null) where TTaskHandler : class, ITaskHandler Parameters services IServiceCollection The service collection to add the services to. configuration IConfiguration An optional configuration source for building Config instead of the default config files. Returns IServiceCollection Type Parameters TTaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks."
  },
  "api/ZeroInstall.Services.ServiceProvider.html": {
    "href": "api/ZeroInstall.Services.ServiceProvider.html",
    "title": "Class ServiceProvider | Zero Install .NET API",
    "summary": "Class ServiceProvider Namespace ZeroInstall.Services Assembly ZeroInstall.Services.dll Instantiates requested services transparently on first use. Handles dependency injection internally. Use exactly one instance of the service provider per user request to ensure consistent state during execution. public class ServiceProvider Inheritance object ServiceProvider Derived ScopedOperation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is thread-safe. Constructors ServiceProvider(ITaskHandler) Creates a new service provider. public ServiceProvider(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. Exceptions IOException There was a problem accessing a configuration file or one of the implementation stores. UnauthorizedAccessException Access to a configuration file or one of the implementation stores was not permitted. Properties CatalogManager Provides access to remote and local Catalogs. Handles downloading, signature verification and caching. public virtual ICatalogManager CatalogManager { get; } Property Value ICatalogManager Config User settings controlling network behaviour, solving, etc. public virtual Config Config { get; } Property Value Config Executor Executes a Selections document as a program using dependency injection. public virtual IExecutor Executor { get; } Property Value IExecutor FeedCache Provides access to a cache of Feeds that were downloaded via HTTP(S). public virtual IFeedCache FeedCache { get; } Property Value IFeedCache FeedManager Allows configuration of the source used to request Feeds. public virtual IFeedManager FeedManager { get; } Property Value IFeedManager Fetcher Used to download missing Implementations. public virtual IFetcher Fetcher { get; } Property Value IFetcher Handler A callback object used when the user needs to be asked questions or informed about download and IO tasks. public ITaskHandler Handler { get; } Property Value ITaskHandler ImplementationStore Describes an object that allows the storage and retrieval of Implementation directories. public IImplementationStore ImplementationStore { get; set; } Property Value IImplementationStore OpenPgp Provides access to an encryption/signature system compatible with the OpenPGP standard. public virtual IOpenPgp OpenPgp { get; set; } Property Value IOpenPgp PackageManager An external package manager that can install PackageImplementations. public virtual IPackageManager PackageManager { get; } Property Value IPackageManager SelectionCandidateProvider Generates SelectionCandidates for the Solver to choose among. public virtual ISelectionCandidateProvider SelectionCandidateProvider { get; } Property Value ISelectionCandidateProvider SelectionsManager Provides methods for filtering Selections. public virtual ISelectionsManager SelectionsManager { get; } Property Value ISelectionsManager Solver Chooses a set of Implementations to satisfy the requirements of a program and its user. public virtual ISolver Solver { get; } Property Value ISolver TrustManager Methods for verifying signatures and user trust. public virtual ITrustManager TrustManager { get; } Property Value ITrustManager Methods TrySolveOffline(Requirements) Tries to provide Selections that satisfy a set of Requirements without downloading any files. public Selections? TrySolveOffline(Requirements requirements) Parameters requirements Requirements The requirements to satisfy. Returns Selections The selected ImplementationSelections or null if no solution was found. Exceptions OperationCanceledException The user canceled the task. ArgumentException requirements is incomplete."
  },
  "api/ZeroInstall.Services.Solvers.BacktrackingSolver.html": {
    "href": "api/ZeroInstall.Services.Solvers.BacktrackingSolver.html",
    "title": "Class BacktrackingSolver | Zero Install .NET API",
    "summary": "Class BacktrackingSolver Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Uses limited backtracking to solve Requirements. Does not find all possible solutions! public class BacktrackingSolver : ISolver Inheritance object BacktrackingSolver Implements ISolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods SolverExtensions.TrySolve(ISolver, Requirements) Remarks This class is immutable and thread-safe. Constructors BacktrackingSolver(ISelectionCandidateProvider) Uses limited backtracking to solve Requirements. Does not find all possible solutions! public BacktrackingSolver(ISelectionCandidateProvider candidateProvider) Parameters candidateProvider ISelectionCandidateProvider Remarks This class is immutable and thread-safe. Methods Solve(Requirements) Provides Selections that satisfy a set of Requirements. public Selections Solve(Requirements requirements) Parameters requirements Requirements The requirements to satisfy. Returns Selections The selected ImplementationSelections. Remarks Feed files may be downloaded, signature validation is performed, implementations are not downloaded. Exceptions OperationCanceledException The user canceled the task. ArgumentException requirements is incomplete. IOException A problem occurred while reading the feed file. WebException A problem occurred while fetching the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. SolverException The solver was unable to provide Selections that fulfill the requirements."
  },
  "api/ZeroInstall.Services.Solvers.ExternalSolver.html": {
    "href": "api/ZeroInstall.Services.Solvers.ExternalSolver.html",
    "title": "Class ExternalSolver | Zero Install .NET API",
    "summary": "Class ExternalSolver Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Uses an external process to solve Requirements. The executable for external process is itself provided by another ISolver. public class ExternalSolver : ISolver Inheritance object ExternalSolver Implements ISolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods SolverExtensions.TrySolve(ISolver, Requirements) Remarks This class is immutable and thread-safe. Constructors ExternalSolver(ISolver, ISelectionsManager, IFetcher, IExecutor, IFeedManager, ITaskHandler, Requirements) Uses an external process to solve Requirements. The executable for external process is itself provided by another ISolver. public ExternalSolver(ISolver backingSolver, ISelectionsManager selectionsManager, IFetcher fetcher, IExecutor executor, IFeedManager feedManager, ITaskHandler handler, Requirements solverRequirements) Parameters backingSolver ISolver selectionsManager ISelectionsManager fetcher IFetcher executor IExecutor feedManager IFeedManager handler ITaskHandler solverRequirements Requirements Remarks This class is immutable and thread-safe. Methods Solve(Requirements) Provides Selections that satisfy a set of Requirements. public Selections Solve(Requirements requirements) Parameters requirements Requirements The requirements to satisfy. Returns Selections The selected ImplementationSelections. Remarks Feed files may be downloaded, signature validation is performed, implementations are not downloaded. Exceptions OperationCanceledException The user canceled the task. ArgumentException requirements is incomplete. IOException A problem occurred while reading the feed file. WebException A problem occurred while fetching the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. SolverException The solver was unable to provide Selections that fulfill the requirements."
  },
  "api/ZeroInstall.Services.Solvers.FallbackSolver.html": {
    "href": "api/ZeroInstall.Services.Solvers.FallbackSolver.html",
    "title": "Class FallbackSolver | Zero Install .NET API",
    "summary": "Class FallbackSolver Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Wraps two solvers always passing requests to the primary one initially and falling back to secondary one should the primary one fail. public sealed class FallbackSolver : ISolver Inheritance object FallbackSolver Implements ISolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods SolverExtensions.TrySolve(ISolver, Requirements) Remarks This class is immutable and thread-safe. Constructors FallbackSolver(ISolver, ISolver) Wraps two solvers always passing requests to the primary one initially and falling back to secondary one should the primary one fail. public FallbackSolver(ISolver primarySolver, ISolver secondarySolver) Parameters primarySolver ISolver The solver to run initially. secondarySolver ISolver he solver to fall back to should primarySolver fail. Remarks This class is immutable and thread-safe. Methods Solve(Requirements) Provides Selections that satisfy a set of Requirements. public Selections Solve(Requirements requirements) Parameters requirements Requirements The requirements to satisfy. Returns Selections The selected ImplementationSelections. Remarks Feed files may be downloaded, signature validation is performed, implementations are not downloaded. Exceptions OperationCanceledException The user canceled the task. ArgumentException requirements is incomplete. IOException A problem occurred while reading the feed file. WebException A problem occurred while fetching the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. SolverException The solver was unable to provide Selections that fulfill the requirements."
  },
  "api/ZeroInstall.Services.Solvers.ISelectionCandidateProvider.html": {
    "href": "api/ZeroInstall.Services.Solvers.ISelectionCandidateProvider.html",
    "title": "Interface ISelectionCandidateProvider | Zero Install .NET API",
    "summary": "Interface ISelectionCandidateProvider Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Generates SelectionCandidates for ISolvers to choose among. public interface ISelectionCandidateProvider Remarks Implementations of this interface may perform in-memory caching and are thread-safe. Properties FailedFeeds A list of feeds that could not be downloaded along with the exceptions describing the problems. IReadOnlyDictionary<FeedUri, Exception> FailedFeeds { get; } Property Value IReadOnlyDictionary<FeedUri, Exception> Methods Clear() Clears any in-memory caches. void Clear() GetSortedCandidates(Requirements) Gets all SelectionCandidates for a specific set of Requirements sorted from best to worst. IReadOnlyList<SelectionCandidate> GetSortedCandidates(Requirements requirements) Parameters requirements Requirements Returns IReadOnlyList<SelectionCandidate> LookupOriginalImplementation(ImplementationSelection) Retrieves the original Implementation an ImplementationSelection was based ofF. Implementation LookupOriginalImplementation(ImplementationSelection implementationSelection) Parameters implementationSelection ImplementationSelection Returns Implementation Exceptions KeyNotFoundException The implementationSelection was not provided by GetSortedCandidates(Requirements)."
  },
  "api/ZeroInstall.Services.Solvers.ISolver.html": {
    "href": "api/ZeroInstall.Services.Solvers.ISolver.html",
    "title": "Interface ISolver | Zero Install .NET API",
    "summary": "Interface ISolver Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Chooses a set of Implementations to satisfy the requirements of a program and its user. public interface ISolver Extension Methods SolverExtensions.TrySolve(ISolver, Requirements) Remarks Implementations of this interface are immutable and thread-safe. Methods Solve(Requirements) Provides Selections that satisfy a set of Requirements. Selections Solve(Requirements requirements) Parameters requirements Requirements The requirements to satisfy. Returns Selections The selected ImplementationSelections. Remarks Feed files may be downloaded, signature validation is performed, implementations are not downloaded. Exceptions OperationCanceledException The user canceled the task. ArgumentException requirements is incomplete. IOException A problem occurred while reading the feed file. WebException A problem occurred while fetching the feed file. UnauthorizedAccessException Access to the cache is not permitted. SignatureException The signature data of a remote feed file could not be verified. SolverException The solver was unable to provide Selections that fulfill the requirements."
  },
  "api/ZeroInstall.Services.Solvers.SelectionCandidateComparer.html": {
    "href": "api/ZeroInstall.Services.Solvers.SelectionCandidateComparer.html",
    "title": "Class SelectionCandidateComparer | Zero Install .NET API",
    "summary": "Class SelectionCandidateComparer Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Ranks SelectionCandidates. public sealed class SelectionCandidateComparer : IComparer<SelectionCandidate> Inheritance object SelectionCandidateComparer Implements IComparer<SelectionCandidate> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SelectionCandidateComparer(Stability, NetworkLevel, LanguageSet, Predicate<Implementation>) Ranks SelectionCandidates. public SelectionCandidateComparer(Stability stabilityPolicy, NetworkLevel networkUse, LanguageSet languages, Predicate<Implementation> isCached) Parameters stabilityPolicy Stability Implementations at this stability level or higher are preferred. Lower levels are used only if there is no other choice. networkUse NetworkLevel Controls how liberally network access is attempted. languages LanguageSet The preferred languages for the implementation. isCached Predicate<Implementation> sed to determine which implementations are already cached in the IImplementationStore. Methods Compare(SelectionCandidate?, SelectionCandidate?) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. public int Compare(SelectionCandidate? x, SelectionCandidate? y) Parameters x SelectionCandidate The first object to compare. y SelectionCandidate The second object to compare. Returns int A signed integer that indicates the relative values of x and y, as shown in the following table. Value Meaning Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y."
  },
  "api/ZeroInstall.Services.Solvers.SelectionCandidateProvider.html": {
    "href": "api/ZeroInstall.Services.Solvers.SelectionCandidateProvider.html",
    "title": "Class SelectionCandidateProvider | Zero Install .NET API",
    "summary": "Class SelectionCandidateProvider Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Generates SelectionCandidates for ISolvers to choose among. public class SelectionCandidateProvider : ISelectionCandidateProvider Inheritance object SelectionCandidateProvider Implements ISelectionCandidateProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class performs in-memory caching of InterfacePreferencess and implementations and is thread-safe. Constructors SelectionCandidateProvider(Config, IFeedManager, IImplementationStore, IPackageManager) Creates a new SelectionCandidate provider. public SelectionCandidateProvider(Config config, IFeedManager feedManager, IImplementationStore implementationStore, IPackageManager packageManager) Parameters config Config User settings controlling network behaviour, solving, etc. feedManager IFeedManager Provides access to remote and local Feeds. Handles downloading, signature verification and caching. implementationStore IImplementationStore Used to check which Implementations are already cached. packageManager IPackageManager An external package manager that can install PackageImplementations. Properties FailedFeeds A list of feeds that could not be downloaded along with the exceptions describing the problems. public IReadOnlyDictionary<FeedUri, Exception> FailedFeeds { get; } Property Value IReadOnlyDictionary<FeedUri, Exception> Methods Clear() Clears any in-memory caches. public void Clear() GetSortedCandidates(Requirements) Gets all SelectionCandidates for a specific set of Requirements sorted from best to worst. public IReadOnlyList<SelectionCandidate> GetSortedCandidates(Requirements requirements) Parameters requirements Requirements Returns IReadOnlyList<SelectionCandidate> LookupOriginalImplementation(ImplementationSelection) Retrieves the original Implementation an ImplementationSelection was based ofF. public Implementation LookupOriginalImplementation(ImplementationSelection implementationSelection) Parameters implementationSelection ImplementationSelection Returns Implementation Exceptions KeyNotFoundException The implementationSelection was not provided by GetSortedCandidates(Requirements)."
  },
  "api/ZeroInstall.Services.Solvers.SolverDemand.html": {
    "href": "api/ZeroInstall.Services.Solvers.SolverDemand.html",
    "title": "Class SolverDemand | Zero Install .NET API",
    "summary": "Class SolverDemand Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll A demand used by ISolvers internally. Wrapper for Requirements that holds SelectionCandidates. public sealed record SolverDemand : IEquatable<SolverDemand> Inheritance object SolverDemand Implements IEquatable<SolverDemand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SolverDemand(Requirements, ISelectionCandidateProvider, Importance) A demand used by ISolvers internally. Wrapper for Requirements that holds SelectionCandidates. public SolverDemand(Requirements Requirements, ISelectionCandidateProvider CandidateProvider, Importance Importance = Importance.Essential) Parameters Requirements Requirements The requirements. CandidateProvider ISelectionCandidateProvider Generates SelectionCandidates for the Requirements. Importance Importance Describes how important the demand is (i.e. whether ignoring it is an option). Properties CandidateProvider Generates SelectionCandidates for the Requirements. public ISelectionCandidateProvider CandidateProvider { get; init; } Property Value ISelectionCandidateProvider Candidates All candidates for the Requirements, including those that are not suitable. public IReadOnlyList<SelectionCandidate> Candidates { get; } Property Value IReadOnlyList<SelectionCandidate> Importance Describes how important the demand is (i.e. whether ignoring it is an option). public Importance Importance { get; init; } Property Value Importance Requirements The requirements. public Requirements Requirements { get; init; } Property Value Requirements Methods CandidatesCompatibleWith(Selections) Gets all SelectionCandidates that are compatible with the specified selections. public IEnumerable<SelectionCandidate> CandidatesCompatibleWith(Selections selections) Parameters selections Selections Returns IEnumerable<SelectionCandidate>"
  },
  "api/ZeroInstall.Services.Solvers.SolverException.html": {
    "href": "api/ZeroInstall.Services.Solvers.SolverException.html",
    "title": "Class SolverException | Zero Install .NET API",
    "summary": "Class SolverException Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Indicates the ISolver was unable to provide Selections that fulfill the Requirements. public sealed class SolverException : Exception, ISerializable Inheritance object Exception SolverException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors SolverException() Indicates that the ISolver encountered an unknown problem. public SolverException() SolverException(string) Indicates that the ISolver encountered a specific problem. public SolverException(string message) Parameters message string SolverException(string, Exception) Indicates that there was a problem parsing the ISolver's output. public SolverException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/ZeroInstall.Services.Solvers.SolverExtensions.html": {
    "href": "api/ZeroInstall.Services.Solvers.SolverExtensions.html",
    "title": "Class SolverExtensions | Zero Install .NET API",
    "summary": "Class SolverExtensions Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Provides extension methods for ISolver. public static class SolverExtensions Inheritance object SolverExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TrySolve(ISolver, Requirements) Provides Selections that satisfy a set of Requirements. Catches most exceptions and Logs them. public static Selections? TrySolve(this ISolver solver, Requirements requirements) Parameters solver ISolver The ISolver implementation. requirements Requirements A set of requirements/restrictions imposed by the user on the implementation selection process. Returns Selections The ImplementationSelections chosen for the feed; null if there was a problem. Remarks Feed files may be downloaded, signature validation is performed, implementations are not downloaded. Exceptions OperationCanceledException The user canceled the task. ArgumentException requirements is incomplete."
  },
  "api/ZeroInstall.Services.Solvers.SolverRunBase.html": {
    "href": "api/ZeroInstall.Services.Solvers.SolverRunBase.html",
    "title": "Class SolverRunBase | Zero Install .NET API",
    "summary": "Class SolverRunBase Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Common base class for representing a single run of a solver. public abstract class SolverRunBase Inheritance object SolverRunBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This is intended to be used by private classes within ISolver implementations to hold state during a run of Solve(Requirements). Constructors SolverRunBase(Requirements, ISelectionCandidateProvider) Common base class for representing a single run of a solver. protected SolverRunBase(Requirements requirements, ISelectionCandidateProvider candidateProvider) Parameters requirements Requirements The requirements to satisfy. candidateProvider ISelectionCandidateProvider Generates SelectionCandidates for the solver to choose from. Remarks This is intended to be used by private classes within ISolver implementations to hold state during a run of Solve(Requirements). Fields CandidateProvider Generates SelectionCandidates for the solver to choose from. protected readonly ISelectionCandidateProvider CandidateProvider Field Value ISelectionCandidateProvider Selections Used to iteratively construct the selections to be returned. protected Selections Selections Field Value Selections Methods DemandsFor(Command, FeedUri) Generates SolverDemands for the dependencies specified by a Command. protected IEnumerable<SolverDemand> DemandsFor(Command command, FeedUri interfaceUri) Parameters command Command The command to scan for dependencies. interfaceUri FeedUri The interface URI of the feed providing the command. Returns IEnumerable<SolverDemand> DemandsFor(ImplementationSelection, Requirements) Generates SolverDemands for the dependencies specified by an ImplementationSelection. protected IEnumerable<SolverDemand> DemandsFor(ImplementationSelection selection, Requirements requirements) Parameters selection ImplementationSelection The selection to scan for dependencies. requirements Requirements Requirements to inherit into the demands. Returns IEnumerable<SolverDemand> Solve() Provides Selections that satisfy the specified Requirements. public Selections Solve() Returns Selections The selected ImplementationSelections. Exceptions SolverException The solver was unable to provide Selections that fulfill the Requirements. TryFulfill(SolverDemand) Tries to fulfill the specified solver demand. Adds the result to Selections if successful. protected abstract bool TryFulfill(SolverDemand demand) Parameters demand SolverDemand The demand to fulfill. Returns bool true if the demand could be met, false if not."
  },
  "api/ZeroInstall.Services.Solvers.SolverUtils.html": {
    "href": "api/ZeroInstall.Services.Solvers.SolverUtils.html",
    "title": "Class SolverUtils | Zero Install .NET API",
    "summary": "Class SolverUtils Namespace ZeroInstall.Services.Solvers Assembly ZeroInstall.Services.dll Helper functions for ISolver implementations. public static class SolverUtils Inheritance object SolverUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCommand(ImplementationSelection, Requirements, Implementation) Adds a Command specified in an Implementation to a ImplementationSelection. public static Command? AddCommand(this ImplementationSelection selection, Requirements requirements, Implementation from) Parameters selection ImplementationSelection The ImplementationSelection to add the Command to. requirements Requirements The requirements specifying which Command to extract. from Implementation The Implementation to get the Command from. Returns Command The Command that was added to selection; null if none. AddDependencies(IDependencyContainer, Requirements, IDependencyContainer) Transfers Dependencys from one IDependencyContainer to another. public static void AddDependencies(this IDependencyContainer target, Requirements requirements, IDependencyContainer from) Parameters target IDependencyContainer The IDependencyContainer to add the Dependencys to. requirements Requirements The requirements which restrict which Dependencys are applicable. from IDependencyContainer The IDependencyContainer to get the Dependencys to. AddRestriction(Requirements, Restriction) Adds the version restriction from source to the requirements. public static void AddRestriction(this Requirements requirements, Restriction source) Parameters requirements Requirements source Restriction AddRestrictions(Requirements, Requirements) Adds the version restrictions from source to the requirements. public static void AddRestrictions(this Requirements requirements, Requirements source) Parameters requirements Requirements source Requirements BucketizeImportance(IEnumerable<SolverDemand>) Separates solver demands into buckets by importance. public static (List<SolverDemand> essential, List<SolverDemand> recommended) BucketizeImportance(this IEnumerable<SolverDemand> demands) Parameters demands IEnumerable<SolverDemand> Returns (List<SolverDemand> essential, List<SolverDemand> recommended) PurgeRestrictions(Selections) Removes all Restrictions from Selections. public static void PurgeRestrictions(this Selections selections) Parameters selections Selections ToSelection(SelectionCandidate, Requirements, IReadOnlyList<SelectionCandidate>) Turns a SelectionCandidate into a ImplementationSelection. public static ImplementationSelection ToSelection(this SelectionCandidate candidate, Requirements requirements, IReadOnlyList<SelectionCandidate> allCandidates) Parameters candidate SelectionCandidate The selection candidate. requirements Requirements The requirements the candidate was chosen for. allCandidates IReadOnlyList<SelectionCandidate> All candidates that were considered for selection (including candidate). These are used to present the user with possible alternatives. Returns ImplementationSelection ToSelections(IEnumerable<SelectionCandidate>, SolverDemand) Turns SelectionCandidates into ImplementationSelections. [LinqTunnel] public static IEnumerable<ImplementationSelection> ToSelections(this IEnumerable<SelectionCandidate> candidates, SolverDemand demand) Parameters candidates IEnumerable<SelectionCandidate> The selection candidates. demand SolverDemand The solver demand the candidates were chosen for. Returns IEnumerable<ImplementationSelection>"
  },
  "api/ZeroInstall.Services.Solvers.html": {
    "href": "api/ZeroInstall.Services.Solvers.html",
    "title": "Namespace ZeroInstall.Services.Solvers | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services.Solvers Solves requirements by selecting a specific combination of implementations from feeds. Classes BacktrackingSolver Uses limited backtracking to solve Requirements. Does not find all possible solutions! ExternalSolver Uses an external process to solve Requirements. The executable for external process is itself provided by another ISolver. FallbackSolver Wraps two solvers always passing requests to the primary one initially and falling back to secondary one should the primary one fail. SelectionCandidateComparer Ranks SelectionCandidates. SelectionCandidateProvider Generates SelectionCandidates for ISolvers to choose among. SolverDemand A demand used by ISolvers internally. Wrapper for Requirements that holds SelectionCandidates. SolverException Indicates the ISolver was unable to provide Selections that fulfill the Requirements. SolverExtensions Provides extension methods for ISolver. SolverRunBase Common base class for representing a single run of a solver. SolverUtils Helper functions for ISolver implementations. Interfaces ISelectionCandidateProvider Generates SelectionCandidates for ISolvers to choose among. ISolver Chooses a set of Implementations to satisfy the requirements of a program and its user."
  },
  "api/ZeroInstall.Services.WebExceptionExtensions.html": {
    "href": "api/ZeroInstall.Services.WebExceptionExtensions.html",
    "title": "Class WebExceptionExtensions | Zero Install .NET API",
    "summary": "Class WebExceptionExtensions Namespace ZeroInstall.Services Assembly ZeroInstall.Services.dll Provides extension methods for WebExceptions. public static class WebExceptionExtensions Inheritance object WebExceptionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ShouldTryMirror(WebException, Uri) Determines a download from a specific uri that failed with an exception is should be retried using a mirror location. public static bool ShouldTryMirror(this WebException exception, Uri uri) Parameters exception WebException uri Uri Returns bool"
  },
  "api/ZeroInstall.Services.html": {
    "href": "api/ZeroInstall.Services.html",
    "title": "Namespace ZeroInstall.Services | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Services Services for solving dependencies, downloading implementations, executing apps, etc.. NuGet package: ZeroInstall.Services Namespaces ZeroInstall.Services.Executors Launches implementations and injects the selected dependencies. ZeroInstall.Services.Feeds Picking, downloading and verifying feeds. ZeroInstall.Services.Fetchers Downloads and extracts implementations. ZeroInstall.Services.Native Operating system specific services such as native package managers. ZeroInstall.Services.Server Provides resources to other Zero Install instances via the network. ZeroInstall.Services.Solvers Solves requirements by selecting a specific combination of implementations from feeds. Classes ServiceCollectionExtensions Provides extension methods for IServiceCollection. ServiceProvider Instantiates requested services transparently on first use. Handles dependency injection internally. Use exactly one instance of the service provider per user request to ensure consistent state during execution. WebExceptionExtensions Provides extension methods for WebExceptions."
  },
  "api/ZeroInstall.Store.Configuration.Config.html": {
    "href": "api/ZeroInstall.Store.Configuration.Config.html",
    "title": "Class Config | Zero Install .NET API",
    "summary": "Class Config Namespace ZeroInstall.Store.Configuration Assembly ZeroInstall.Store.dll User settings controlling network behaviour, solving, etc.. [Serializable] public sealed class Config : IEnumerable<KeyValuePair<string, string>>, IEnumerable, ICloneable<Config>, IEquatable<Config> Inheritance object Config Implements IEnumerable<KeyValuePair<string, string>> IEnumerable ICloneable<Config> IEquatable<Config> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Config() Creates a new configuration with default values set. public Config() Fields DefaultExternalSolverUri The default value for ExternalSolverUri. public const string DefaultExternalSolverUri = \"https://apps.0install.net/0install/0install-ocaml.xml\" Field Value string DefaultFeedMirror The default value for FeedMirror. public const string DefaultFeedMirror = \"https://roscidus.com/0mirror\" Field Value string DefaultKeyInfoServer The default value for KeyInfoServer. public const string DefaultKeyInfoServer = \"https://keylookup.0install.net/\" Field Value string DefaultMaxParallelDownloads The default value for MaxParallelDownloads. public const int DefaultMaxParallelDownloads = 4 Field Value int DefaultSelfUpdateUri The default value for SelfUpdateUri. public const string DefaultSelfUpdateUri = \"https://apps.0install.net/0install/0install-dotnet.xml\" Field Value string DefaultSyncServer The default value for SyncServer. public const string DefaultSyncServer = \"https://0install.de/sync/\" Field Value string Properties AutoApproveKeys Automatically approve keys known by the KeyInfoServer and seen the first time a feed is fetched. public bool AutoApproveKeys { get; set; } Property Value bool EffectiveNetworkUse Same as NetworkUse, except when there the internet connection is metered (capped at Minimal) or unavailable (capped at Offline). [Browsable(false)] public NetworkLevel EffectiveNetworkUse { get; } Property Value NetworkLevel ExternalSolverUri The feed URI used to get the external solver. Set to empty to deactivate use of external solver. public FeedUri? ExternalSolverUri { get; set; } Property Value FeedUri FeedMirror The mirror server used to provide feeds when the original server is unavailable. Set to empty to deactivate use of feed mirror. public FeedUri? FeedMirror { get; set; } Property Value FeedUri Freshness The maximum age a cached Feed may have until it is considered stale (needs to be updated). public TimeSpan Freshness { get; set; } Property Value TimeSpan HelpWithTesting Always prefer the newest versions, even if they have not been marked as Stable yet. public bool HelpWithTesting { get; set; } Property Value bool InitialTab The initial tab to show in GUI representations. [Browsable(false)] public ConfigTab InitialTab { get; set; } Property Value ConfigTab IsSyncConfigured Indicates whether the sync-related configuration is complete. [Browsable(false)] public bool IsSyncConfigured { get; } Property Value bool KeyInfoServer The key information server used to get information about who signed a feed. Set to empty to deactivate use of key information server. public FeedUri? KeyInfoServer { get; set; } Property Value FeedUri KioskMode Restrict usage to feeds specified in the catalog. public bool KioskMode { get; set; } Property Value bool MaxParallelDownloads Maximum number of Implementations to download in parallel. [Range(1, 128)] public int MaxParallelDownloads { get; set; } Property Value int NetworkUse Controls how liberally network access is attempted. public NetworkLevel NetworkUse { get; set; } Property Value NetworkLevel SelfUpdateUri The feed URI used to search for updates for Zero Install itself. Set to empty to deactivate self-update. public FeedUri? SelfUpdateUri { get; set; } Property Value FeedUri SyncCryptoKey The local key used to encrypt data before sending it to the SyncServer. public string SyncCryptoKey { get; set; } Property Value string SyncServer The sync server used to synchronize your app list between multiple computers. public FeedUri? SyncServer { get; set; } Property Value FeedUri See Also SyncServerUsername SyncServerPassword SyncServerCredentials The credentials specified in SyncServerUsername and SyncServerPassword. [Browsable(false)] public NetworkCredential? SyncServerCredentials { get; } Property Value NetworkCredential SyncServerKerberos Always prefer the newest versions, even if they have not been marked as Stable yet. public bool SyncServerKerberos { get; set; } Property Value bool SyncServerPassword The password to authenticate with against the SyncServer. public string SyncServerPassword { get; set; } Property Value string See Also SyncServer SyncServerUsername SyncServerUsername The username to authenticate with against the SyncServer. public string SyncServerUsername { get; set; } Property Value string See Also SyncServer SyncServerPassword Methods Clone() Creates a deep copy of this Config instance. public Config Clone() Returns Config Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Config?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Config? other) Parameters other Config An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, string>> An enumerator that can be used to iterate through the collection. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetOption(string) Retrieves the string representation of an option identified by a key. public string GetOption(string key) Parameters key string The key of the option to retrieve. Returns string The string representation of the option. Exceptions KeyNotFoundException key is invalid. IsOptionLocked(string) Determines whether an option is locked by a group policy (in the Windows registry). public static bool IsOptionLocked(string key) Parameters key string The key of the option to check. Returns bool Load() Aggregates options from all applicable config files and registry locations. public static Config Load() Returns Config Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException A problem occurred while deserializing the config data. LoadSafe() Tries to aggregates options from all applicable config files and registry locations. Automatically falls back to default values on errors. public static Config LoadSafe() Returns Config The loaded Config or default Config if there was a problem. ReadFrom(IniData, string) Reads options from a config file stream and merges them into the config instance. public void ReadFrom(IniData iniData, string path = \"embedded\") Parameters iniData IniData The parsed file. path string The path of the file iniData was read from. Used for logging. Exceptions InvalidDataException The file contains invalid config values. ReadFromFile(string) Reads options from a config file and merges them into the config instance. public void ReadFromFile(string path) Parameters path string The path of the file to read. Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException The file contains invalid config values. ReadFromFiles() Reads options from config files in default locations and merges them into the config instance. public void ReadFromFiles() Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException The file contains invalid config values. ReadFromFilesMachineWideOnly() Reads options from config files in machine-wide locations. public void ReadFromFilesMachineWideOnly() Exceptions IOException A problem occurred while reading the file. UnauthorizedAccessException Read access to the file is not permitted. InvalidDataException The file contains invalid config values. ReadFromGroupPolicy() Reads options from group policies (in the Windows registry) and merges them into the config instance. public void ReadFromGroupPolicy() Exceptions UnauthorizedAccessException Read access to the registry key is not permitted. InvalidDataException The registry key contains invalid config values. ResetOption(string) Resets an option identified by a key to its default value. public void ResetOption(string key) Parameters key string The key of the option to reset. Exceptions KeyNotFoundException key is invalid. Save(bool) Saves the options to a config file in a default location. public void Save(bool machineWide = false) Parameters machineWide bool true to save in a machine-wide location; false to save in the user profile. Remarks This method performs an atomic write operation when possible. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. Save(string) Saves the options to a config file. public void Save(string path) Parameters path string Remarks This method performs an atomic write operation when possible. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. SetOption(string, string) Sets an option identified by a key. public void SetOption(string key, string value) Parameters key string The key of the option to set. value string A string representation of the option. Exceptions KeyNotFoundException key is invalid. FormatException value is invalid. UnauthorizedAccessException This option is controlled by a group policy and can therefore not be modified. ToIniData() Converts the options into an in-memory representation of an INI file. public IniData ToIniData() Returns IniData"
  },
  "api/ZeroInstall.Store.Configuration.ConfigTab.html": {
    "href": "api/ZeroInstall.Store.Configuration.ConfigTab.html",
    "title": "Enum ConfigTab | Zero Install .NET API",
    "summary": "Enum ConfigTab Namespace ZeroInstall.Store.Configuration Assembly ZeroInstall.Store.dll Available tabs in a Config GUI. public enum ConfigTab Fields Advanced = 7 Catalog = 3 Default = 0 Language = 6 Storage = 2 Sync = 5 Trust = 4 Updates = 1"
  },
  "api/ZeroInstall.Store.Configuration.NetworkLevel.html": {
    "href": "api/ZeroInstall.Store.Configuration.NetworkLevel.html",
    "title": "Enum NetworkLevel | Zero Install .NET API",
    "summary": "Enum NetworkLevel Namespace ZeroInstall.Store.Configuration Assembly ZeroInstall.Store.dll Controls how liberally network access is attempted. public enum NetworkLevel Fields Full = 2 Always use network to get the newest available versions. Minimal = 1 Only access network when there are no safe implementations available. Offline = 0 Do not access network at all."
  },
  "api/ZeroInstall.Store.Configuration.html": {
    "href": "api/ZeroInstall.Store.Configuration.html",
    "title": "Namespace ZeroInstall.Store.Configuration | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Configuration User settings controlling network behaviour, solving, etc.. Classes Config User settings controlling network behaviour, solving, etc.. Enums ConfigTab Available tabs in a Config GUI. NetworkLevel Controls how liberally network access is attempted."
  },
  "api/ZeroInstall.Store.Deployment.ClearDirectory.html": {
    "href": "api/ZeroInstall.Store.Deployment.ClearDirectory.html",
    "title": "Class ClearDirectory | Zero Install .NET API",
    "summary": "Class ClearDirectory Namespace ZeroInstall.Store.Deployment Assembly ZeroInstall.Store.dll Deletes files listed in a Manifest file from a directory. [MustDisposeResource] public class ClearDirectory : DirectoryOperation, IDisposable Inheritance object StagedOperation DirectoryOperation ClearDirectory Implements IDisposable Inherited Members DirectoryOperation.Path DirectoryOperation.Manifest DirectoryOperation.Handler DirectoryOperation.Randomize(string) DirectoryOperation.NoRestart DirectoryOperation.UnlockFiles(IEnumerable<string>) DirectoryOperation.Dispose() StagedOperation.Stage() StagedOperation.Commit() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ClearDirectory(string, Manifest, ITaskHandler) Deletes files listed in a Manifest file from a directory. public ClearDirectory(string path, Manifest manifest, ITaskHandler handler) Parameters path string The path of the directory to clear. manifest Manifest The contents of a Manifest file describing the directory. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about IO tasks. Methods OnCommit() Template method to commit the changes made by OnStage(). protected override void OnCommit() OnRollback() Template method to revert any changes made by OnStage(). protected override void OnRollback() OnStage() Template method to stage changes. protected override void OnStage()"
  },
  "api/ZeroInstall.Store.Deployment.DeployDirectory.html": {
    "href": "api/ZeroInstall.Store.Deployment.DeployDirectory.html",
    "title": "Class DeployDirectory | Zero Install .NET API",
    "summary": "Class DeployDirectory Namespace ZeroInstall.Store.Deployment Assembly ZeroInstall.Store.dll Deploys/copies files listed in a Manifest file to another directory. [MustDisposeResource] public class DeployDirectory : DirectoryOperation, IDisposable Inheritance object StagedOperation DirectoryOperation DeployDirectory Implements IDisposable Inherited Members DirectoryOperation.Path DirectoryOperation.Manifest DirectoryOperation.Handler DirectoryOperation.Randomize(string) DirectoryOperation.NoRestart DirectoryOperation.UnlockFiles(IEnumerable<string>) DirectoryOperation.Dispose() StagedOperation.Stage() StagedOperation.Commit() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeployDirectory(string, Manifest, string, ITaskHandler) Deploys/copies files listed in a Manifest file to another directory. public DeployDirectory(string sourcePath, Manifest sourceManifest, string destinationPath, ITaskHandler handler) Parameters sourcePath string The path of the source directory to copy from. sourceManifest Manifest The contents of a Manifest file describing the source directory. destinationPath string The path of the destination directory to copy to. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about IO tasks. Properties DestinationPath The path of the destination directory. May already exist. public string DestinationPath { get; } Property Value string Methods OnCommit() Template method to commit the changes made by OnStage(). protected override void OnCommit() OnRollback() Template method to revert any changes made by OnStage(). protected override void OnRollback() OnStage() Template method to stage changes. protected override void OnStage()"
  },
  "api/ZeroInstall.Store.Deployment.DirectoryOperation.html": {
    "href": "api/ZeroInstall.Store.Deployment.DirectoryOperation.html",
    "title": "Class DirectoryOperation | Zero Install .NET API",
    "summary": "Class DirectoryOperation Namespace ZeroInstall.Store.Deployment Assembly ZeroInstall.Store.dll Common base class for deployment operations that operate on directories with Manifests. [MustDisposeResource] public abstract class DirectoryOperation : StagedOperation, IDisposable Inheritance object StagedOperation DirectoryOperation Implements IDisposable Derived ClearDirectory DeployDirectory Inherited Members StagedOperation.Stage() StagedOperation.OnStage() StagedOperation.Commit() StagedOperation.OnCommit() StagedOperation.OnRollback() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DirectoryOperation(string, Manifest, ITaskHandler) Common base class for deployment operations that operate on directories with Manifests. protected DirectoryOperation(string path, Manifest manifest, ITaskHandler handler) Parameters path string The path of the directory to operate on. manifest Manifest The contents of a <see cref=\"Manifests.Manifest\"/> file describing the directory. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about IO tasks. Fields Handler A callback object used when the user needs to be asked questions or informed about IO tasks. protected readonly ITaskHandler Handler Field Value ITaskHandler Manifest The contents of a Manifest file describing the directory. protected readonly Manifest Manifest Field Value Manifest Path The path of the directory to operate on. protected readonly string Path Field Value string Properties NoRestart Indicates that applications shut down by the WindowsRestartManager shall not be restarted on Dispose(). public bool NoRestart { get; set; } Property Value bool Methods Dispose() Performs a rollback of all changes made by Stage() if Commit() has not been called and completed yet. public override void Dispose() Randomize(string) Appends a random string to a file path. protected static string Randomize(string path) Parameters path string Returns string UnlockFiles(IEnumerable<string>) Uses WindowsRestartManager to close any applications that have open references to the specified files if possible and removes read-only attributes. protected void UnlockFiles(IEnumerable<string> files) Parameters files IEnumerable<string> Remarks Closed applications will be restarted by Dispose()."
  },
  "api/ZeroInstall.Store.Deployment.html": {
    "href": "api/ZeroInstall.Store.Deployment.html",
    "title": "Namespace ZeroInstall.Store.Deployment | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Deployment Deploying implementations to locations outside an implementation cache; mainly used to deploy Zero Install itself. Classes ClearDirectory Deletes files listed in a Manifest file from a directory. DeployDirectory Deploys/copies files listed in a Manifest file to another directory. DirectoryOperation Common base class for deployment operations that operate on directories with Manifests."
  },
  "api/ZeroInstall.Store.Feeds.FeedCache.html": {
    "href": "api/ZeroInstall.Store.Feeds.FeedCache.html",
    "title": "Class FeedCache | Zero Install .NET API",
    "summary": "Class FeedCache Namespace ZeroInstall.Store.Feeds Assembly ZeroInstall.Store.dll A disk-based cache of Feeds that were downloaded via HTTP(S). Once a feed has been added to this cache it is considered trusted (signatures are not checked again). public sealed class FeedCache : IFeedCache Inheritance object FeedCache Implements IFeedCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This class is immutable and thread-safe. Constructors FeedCache(string, IOpenPgp) A disk-based cache of Feeds that were downloaded via HTTP(S). Once a feed has been added to this cache it is considered trusted (signatures are not checked again). public FeedCache(string path, IOpenPgp openPgp) Parameters path string A fully qualified directory path. openPgp IOpenPgp Provides access to an encryption/signature system compatible with the OpenPGP standard. Remarks This class is immutable and thread-safe. Properties Path The path to the underlying directory in the file system. public string Path { get; } Property Value string Methods Add(FeedUri, byte[]) Adds a new Feed to the cache. Only do this after the feed source has been verified and trusted and replay attacks filtered! public void Add(FeedUri feedUri, byte[] data) Parameters feedUri FeedUri The canonical ID used to identify the feed. Must not be a local path. data byte[] The content of the feed file as a byte array. Exceptions IOException A problem occurred while writing the feed file. UnauthorizedAccessException Write access to the cache is not permitted. InvalidDataException The feed file could not be parsed. InvalidOperationException feedUri is a local path. Contains(FeedUri) Determines whether this cache contains a local copy of a Feed identified by a specific URL. public bool Contains(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns bool true if the specified feed is available in this cache; false if the specified feed is not available in this cache. GetFeed(FeedUri) Tries to get a specific Feed from this cache. public Feed? GetFeed(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns Feed The un-normalized Feed; null if the feed was not found in the cache or could not be parsed. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. GetPath(FeedUri) Tries to get the file path of the on-disk representation of a specific Feed. public string? GetPath(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns string The fully qualified path to the feed file; null if the feed was not found in the cache. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. GetSignatures(FeedUri) Determines which signatures a Feed from this cache is signed with. public IEnumerable<OpenPgpSignature> GetSignatures(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns IEnumerable<OpenPgpSignature> A list of signatures found, both valid and invalid. Returns an empty list if the feed was not found in the cache. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. SignatureException A signature block was found but it could not be parsed. ListAll() Returns a list of all Feeds stored in this cache. public IEnumerable<FeedUri> ListAll() Returns IEnumerable<FeedUri> A list of feed URIs (e.g. \"http://somedomain.net/interface.xml\"). Usually these can also be considered interface URIs. Exceptions IOException A problem occurred while reading from the cache. UnauthorizedAccessException Read access to the cache is not permitted. Remove(FeedUri) Removes a specific Feed from this cache. No exception is thrown if the specified Feed is not in the cache. public void Remove(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Exceptions IOException The feed could not be deleted. UnauthorizedAccessException Write access to the cache is not permitted."
  },
  "api/ZeroInstall.Store.Feeds.FeedCaches.html": {
    "href": "api/ZeroInstall.Store.Feeds.FeedCaches.html",
    "title": "Class FeedCaches | Zero Install .NET API",
    "summary": "Class FeedCaches Namespace ZeroInstall.Store.Feeds Assembly ZeroInstall.Store.dll Provides IFeedCache instances. public static class FeedCaches Inheritance object FeedCaches Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultPath The default feed cache location in the user profile. public static string DefaultPath { get; } Property Value string Methods Default(IOpenPgp) Creates an IFeedCache instance that uses the default cache location in the user profile. public static IFeedCache Default(IOpenPgp openPgp) Parameters openPgp IOpenPgp Provides access to an encryption/signature system compatible with the OpenPGP standard. Returns IFeedCache"
  },
  "api/ZeroInstall.Store.Feeds.FeedUtils.html": {
    "href": "api/ZeroInstall.Store.Feeds.FeedUtils.html",
    "title": "Class FeedUtils | Zero Install .NET API",
    "summary": "Class FeedUtils Namespace ZeroInstall.Store.Feeds Assembly ZeroInstall.Store.dll Provides utility methods for managing Feeds. public static class FeedUtils Inheritance object FeedUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SignatureBlockEnd The string signifying the end of a signature block. public const string SignatureBlockEnd = \"\\n-->\\n\" Field Value string SignatureBlockStart The string signifying the start of a signature block. public const string SignatureBlockStart = \"<!-- Base64 Signature\\n\" Field Value string Methods GetSignatures(IOpenPgp, byte[]) Determines which signatures a feed is signed with. public static IEnumerable<OpenPgpSignature> GetSignatures(IOpenPgp openPgp, byte[] feedData) Parameters openPgp IOpenPgp The OpenPGP-compatible system used to validate the signatures. feedData byte[] The feed data containing an embedded signature. Returns IEnumerable<OpenPgpSignature> A list of signatures found, both valid and invalid. Empty list if no signature block is found. Exceptions SignatureException A signature block was found but it could not be parsed."
  },
  "api/ZeroInstall.Store.Feeds.IFeedCache.html": {
    "href": "api/ZeroInstall.Store.Feeds.IFeedCache.html",
    "title": "Interface IFeedCache | Zero Install .NET API",
    "summary": "Interface IFeedCache Namespace ZeroInstall.Store.Feeds Assembly ZeroInstall.Store.dll A disk-based cache of Feeds that were downloaded via HTTP(S). Once a feed has been added to this cache it is considered trusted (signatures are not checked again). public interface IFeedCache Remarks Implementations of this interface are immutable and thread-safe. Properties Path The path to the underlying directory in the file system. string Path { get; } Property Value string Methods Add(FeedUri, byte[]) Adds a new Feed to the cache. Only do this after the feed source has been verified and trusted and replay attacks filtered! void Add(FeedUri feedUri, byte[] data) Parameters feedUri FeedUri The canonical ID used to identify the feed. Must not be a local path. data byte[] The content of the feed file as a byte array. Exceptions IOException A problem occurred while writing the feed file. UnauthorizedAccessException Write access to the cache is not permitted. InvalidDataException The feed file could not be parsed. InvalidOperationException feedUri is a local path. Contains(FeedUri) Determines whether this cache contains a local copy of a Feed identified by a specific URL. bool Contains(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns bool true if the specified feed is available in this cache; false if the specified feed is not available in this cache. GetFeed(FeedUri) Tries to get a specific Feed from this cache. Feed? GetFeed(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns Feed The un-normalized Feed; null if the feed was not found in the cache or could not be parsed. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. GetPath(FeedUri) Tries to get the file path of the on-disk representation of a specific Feed. string? GetPath(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns string The fully qualified path to the feed file; null if the feed was not found in the cache. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. GetSignatures(FeedUri) Determines which signatures a Feed from this cache is signed with. IEnumerable<OpenPgpSignature> GetSignatures(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Returns IEnumerable<OpenPgpSignature> A list of signatures found, both valid and invalid. Returns an empty list if the feed was not found in the cache. Exceptions IOException A problem occurred while reading the feed file. UnauthorizedAccessException Read access to the cache is not permitted. SignatureException A signature block was found but it could not be parsed. ListAll() Returns a list of all Feeds stored in this cache. IEnumerable<FeedUri> ListAll() Returns IEnumerable<FeedUri> A list of feed URIs (e.g. \"http://somedomain.net/interface.xml\"). Usually these can also be considered interface URIs. Exceptions IOException A problem occurred while reading from the cache. UnauthorizedAccessException Read access to the cache is not permitted. Remove(FeedUri) Removes a specific Feed from this cache. No exception is thrown if the specified Feed is not in the cache. void Remove(FeedUri feedUri) Parameters feedUri FeedUri The canonical ID used to identify the feed. Exceptions IOException The feed could not be deleted. UnauthorizedAccessException Write access to the cache is not permitted."
  },
  "api/ZeroInstall.Store.Feeds.SearchResult.html": {
    "href": "api/ZeroInstall.Store.Feeds.SearchResult.html",
    "title": "Class SearchResult | Zero Install .NET API",
    "summary": "Class SearchResult Namespace ZeroInstall.Store.Feeds Assembly ZeroInstall.Store.dll A single result of a feed search. [Serializable] [Equatable] public class SearchResult : IEquatable<SearchResult> Inheritance object SearchResult Implements IEquatable<SearchResult> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Categories A list of well-known categories the applications fits into. [Browsable(false)] public List<Category> Categories { get; } Property Value List<Category> CategoriesString Used for DataGrid rendering. [IgnoreEquality] public string CategoriesString { get; } Property Value string See Also Categories Name A short name to identify the interface (e.g. \"Foo\"). public required string Name { get; set; } Property Value string Score A value between 0 and 100 indicating how good this result matches the query. public int Score { get; set; } Property Value int Summary Short one-line description for different languages; the first word should not be upper-case unless it is a proper noun (e.g. \"cures all ills\"). public string? Summary { get; set; } Property Value string Uri The URI of the feed. public required FeedUri Uri { get; set; } Property Value FeedUri Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(SearchResult?) protected bool Equals(SearchResult? other) Parameters other SearchResult Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToPseudoFeed() Generates a pseudo-Feed using the information from this result. public Feed ToPseudoFeed() Returns Feed A pseudo-Feed; not a complete feed that can be used to launch an implementation. ToString() Creates string representation suitable for console output. public override string ToString() Returns string Operators operator ==(SearchResult?, SearchResult?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(SearchResult? left, SearchResult? right) Parameters left SearchResult The left object right SearchResult The right object Returns bool true if the objects are equal; otherwise, false. operator !=(SearchResult?, SearchResult?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(SearchResult? left, SearchResult? right) Parameters left SearchResult The left object right SearchResult The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Store.Feeds.SearchResults.html": {
    "href": "api/ZeroInstall.Store.Feeds.SearchResults.html",
    "title": "Class SearchResults | Zero Install .NET API",
    "summary": "Class SearchResults Namespace ZeroInstall.Store.Feeds Assembly ZeroInstall.Store.dll Holds results of a feed search query. [Serializable] public class SearchResults Inheritance object SearchResults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Results A list of results matching the specified keywords. public List<SearchResult> Results { get; } Property Value List<SearchResult> Methods Query(Config, string?) Performs a feed search query using the FeedMirror. public static List<SearchResult> Query(Config config, string? keywords) Parameters config Config The current configuration determining which mirror server to query. keywords string The keywords to search for. Returns List<SearchResult> Exceptions WebException Failed to get query result. InvalidDataException Failed to parse query result."
  },
  "api/ZeroInstall.Store.Feeds.html": {
    "href": "api/ZeroInstall.Store.Feeds.html",
    "title": "Namespace ZeroInstall.Store.Feeds | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Feeds Caches for feeds. Classes FeedCache A disk-based cache of Feeds that were downloaded via HTTP(S). Once a feed has been added to this cache it is considered trusted (signatures are not checked again). FeedCaches Provides IFeedCache instances. FeedUtils Provides utility methods for managing Feeds. SearchResult A single result of a feed search. SearchResults Holds results of a feed search query. Interfaces IFeedCache A disk-based cache of Feeds that were downloaded via HTTP(S). Once a feed has been added to this cache it is considered trusted (signatures are not checked again)."
  },
  "api/ZeroInstall.Store.FileSystem.BuilderExtensions.html": {
    "href": "api/ZeroInstall.Store.FileSystem.BuilderExtensions.html",
    "title": "Class BuilderExtensions | Zero Install .NET API",
    "summary": "Class BuilderExtensions Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Helpers for adding RetrievalMethods to IBuilders. public static class BuilderExtensions Inheritance object BuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddFile(IBuilder, SingleFile, Stream) Adds a file to the implementation. public static void AddFile(this IBuilder builder, SingleFile metadata, Stream stream) Parameters builder IBuilder The builder. metadata SingleFile The metadata of the file. stream Stream The contents of the file. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. BuildDirectory(IBuilder, string?) Adds a subdirectory to the implementation and returns a wrapped IBuilder to elements inside this subdirectory. public static IBuilder BuildDirectory(this IBuilder builder, string? path) Parameters builder IBuilder The builder. path string The path of the directory to create relative to the implementation root. Returns IBuilder An IBuilder wrapped around builder that prepends path to paths. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. CopyFrom(IBuilder, CopyFromStep, string, ITaskHandler) Copies files or directories from another implementation. public static void CopyFrom(this IBuilder builder, CopyFromStep metadata, string path, ITaskHandler handler) Parameters builder IBuilder The builder. metadata CopyFromStep The path of the source and destination file or directory. path string The path of the implementation referenced by metadata. handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Remove(IBuilder, RemoveStep) Removes a file or directory from the implementation. public static void Remove(this IBuilder builder, RemoveStep metadata) Parameters builder IBuilder The builder. metadata RemoveStep The path of the file or directory. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Rename(IBuilder, RenameStep) Renames a file or directory in the implementation. public static void Rename(this IBuilder builder, RenameStep metadata) Parameters builder IBuilder The builder. metadata RenameStep The path of the source and destination file or directory. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Store.FileSystem.DirectoryBuilder.html": {
    "href": "api/ZeroInstall.Store.FileSystem.DirectoryBuilder.html",
    "title": "Class DirectoryBuilder | Zero Install .NET API",
    "summary": "Class DirectoryBuilder Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Builds a file system directory on-disk. public class DirectoryBuilder : MarshalNoTimeout, IBuilder, IForwardOnlyBuilder Inheritance object MarshalByRefObject MarshalNoTimeout DirectoryBuilder Implements IBuilder IForwardOnlyBuilder Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, Stream, ITaskHandler, object?) BuilderExtensions.AddArchive(IBuilder, Archive, Stream, ITaskHandler, object?) BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, ICommandExecutor, ITaskHandler, string?) BuilderExtensions.Add(IBuilder, RetrievalMethod, ICommandExecutor, ITaskHandler) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, ITaskHandler) BuilderExtensions.AddFile(IBuilder, SingleFile, Stream) BuilderExtensions.BuildDirectory(IBuilder, string?) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, string, ITaskHandler) BuilderExtensions.Remove(IBuilder, RemoveStep) BuilderExtensions.Rename(IBuilder, RenameStep) Constructors DirectoryBuilder(string, IBuilder?) Builds a file system directory on-disk. public DirectoryBuilder(string path, IBuilder? innerBuilder = null) Parameters path string The path to the directory to build the implementation in. innerBuilder IBuilder An additional IBuilder to pass all calls on to as well. Usually ManifestBuilder. Properties AllowedHardlinkRoot A directory all hardlink targets must be a child of. Defaults to Path. public string AllowedHardlinkRoot { get; init; } Property Value string Path The path to the directory to build the implementation in. public string Path { get; } Property Value string Methods AddDirectory(string) Adds a subdirectory to the implementation. public void AddDirectory(string path) Parameters path string The path of the directory to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddFile(string, Stream, UnixTime, bool) Adds a file to the implementation. public void AddFile(string path, Stream stream, UnixTime modifiedTime, bool executable = false) Parameters path string The path of the file to create relative to the implementation root. stream Stream The contents of the file. modifiedTime UnixTime The last write time to set for the file. executable bool true if the file's executable bit is to be set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddHardlink(string, string, bool) Adds a hardlink to the implementation. public void AddHardlink(string path, string target, bool executable = false) Parameters path string The path of the hardlink to create relative to the implementation root. target string The path of the existing file the hardlink shall be based on relative to the implementation root. Must point executable bool true if the executable bit of the hardlink is set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. NotSupportedException The currently platform or builder does not support hardlinks. Use AddFile(string, Stream, UnixTime, bool) instead. AddSymlink(string, string) Adds a symbolic link to the implementation. public void AddSymlink(string path, string target) Parameters path string The path of the symlink to create relative to the implementation root. target string The target the symbolic link shall point to relative to path. May use non-native path separators. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. MarkAsExecutable(string) Marks a previously added file as executable. public void MarkAsExecutable(string path) Parameters path string The path of the file to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Remove(string) Removes a file or directory from the implementation. public void Remove(string path) Parameters path string The path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Rename(string, string) Renames a file or directory in the implementation. public void Rename(string path, string target) Parameters path string The original path of the file or directory relative to the implementation root. target string The new path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. TurnIntoSymlink(string) Turns a previously added file into a symlink. public void TurnIntoSymlink(string path) Parameters path string The path of the symlink to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Store.FileSystem.IBuilder.html": {
    "href": "api/ZeroInstall.Store.FileSystem.IBuilder.html",
    "title": "Interface IBuilder | Zero Install .NET API",
    "summary": "Interface IBuilder Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Builds a file system directory. public interface IBuilder : IForwardOnlyBuilder Inherited Members IForwardOnlyBuilder.AddDirectory(string) IForwardOnlyBuilder.AddFile(string, Stream, UnixTime, bool) IForwardOnlyBuilder.AddSymlink(string, string) IForwardOnlyBuilder.AddHardlink(string, string, bool) Extension Methods BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, Stream, ITaskHandler, object?) BuilderExtensions.AddArchive(IBuilder, Archive, Stream, ITaskHandler, object?) BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, ICommandExecutor, ITaskHandler, string?) BuilderExtensions.Add(IBuilder, RetrievalMethod, ICommandExecutor, ITaskHandler) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, ITaskHandler) BuilderExtensions.AddFile(IBuilder, SingleFile, Stream) BuilderExtensions.BuildDirectory(IBuilder, string?) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, string, ITaskHandler) BuilderExtensions.Remove(IBuilder, RemoveStep) BuilderExtensions.Rename(IBuilder, RenameStep) Methods MarkAsExecutable(string) Marks a previously added file as executable. void MarkAsExecutable(string path) Parameters path string The path of the file to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Remove(string) Removes a file or directory from the implementation. void Remove(string path) Parameters path string The path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Rename(string, string) Renames a file or directory in the implementation. void Rename(string path, string target) Parameters path string The original path of the file or directory relative to the implementation root. target string The new path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. TurnIntoSymlink(string) Turns a previously added file into a symlink. void TurnIntoSymlink(string path) Parameters path string The path of the symlink to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Store.FileSystem.IForwardOnlyBuilder.html": {
    "href": "api/ZeroInstall.Store.FileSystem.IForwardOnlyBuilder.html",
    "title": "Interface IForwardOnlyBuilder | Zero Install .NET API",
    "summary": "Interface IForwardOnlyBuilder Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Builds a file system directory without changing or removing elements that have already been added. public interface IForwardOnlyBuilder Methods AddDirectory(string) Adds a subdirectory to the implementation. void AddDirectory(string path) Parameters path string The path of the directory to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddFile(string, Stream, UnixTime, bool) Adds a file to the implementation. void AddFile(string path, Stream stream, UnixTime modifiedTime, bool executable = false) Parameters path string The path of the file to create relative to the implementation root. stream Stream The contents of the file. modifiedTime UnixTime The last write time to set for the file. executable bool true if the file's executable bit is to be set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddHardlink(string, string, bool) Adds a hardlink to the implementation. void AddHardlink(string path, string target, bool executable = false) Parameters path string The path of the hardlink to create relative to the implementation root. target string The path of the existing file the hardlink shall be based on relative to the implementation root. Must point executable bool true if the executable bit of the hardlink is set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. NotSupportedException The currently platform or builder does not support hardlinks. Use AddFile(string, Stream, UnixTime, bool) instead. AddSymlink(string, string) Adds a symbolic link to the implementation. void AddSymlink(string path, string target) Parameters path string The path of the symlink to create relative to the implementation root. target string The target the symbolic link shall point to relative to path. May use non-native path separators. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Store.FileSystem.ImplFileUtils.html": {
    "href": "api/ZeroInstall.Store.FileSystem.ImplFileUtils.html",
    "title": "Class ImplFileUtils | Zero Install .NET API",
    "summary": "Class ImplFileUtils Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Provides filesystem helper methods for working with implementation directories. public static class ImplFileUtils Inheritance object ImplFileUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSymlink(string, string) Creates a new symbolic link to a file or directory. public static void CreateSymlink(string sourcePath, string targetPath) Parameters sourcePath string The path of the link to create. targetPath string The path of the existing file or directory to point to (relative to sourcePath). IsExecutable(string, ManifestElement?) Checks whether a file is marked as Unix-executable. public static bool IsExecutable(string path, ManifestElement? manifestElement = null) Parameters path string The path of the file to check. manifestElement ManifestElement The file's equivalent manifest entry, if available. Returns bool true if path points to an executable; false otherwise. IsSymlink(string, out string?, ManifestElement?) Checks whether a file is a symbolic link. public static bool IsSymlink(string path, out string? target, ManifestElement? manifestElement = null) Parameters path string The path of the file to check. target string Returns the target the symbolic link points to if it exists. manifestElement ManifestElement The file's equivalent manifest entry, if available. Returns bool true if manifestElement points to a symbolic link; false otherwise. SetExecutable(string) Marks a file as Unix-executable. public static void SetExecutable(string fullPath) Parameters fullPath string The absolute path of the file."
  },
  "api/ZeroInstall.Store.FileSystem.PrefixBuilder.html": {
    "href": "api/ZeroInstall.Store.FileSystem.PrefixBuilder.html",
    "title": "Class PrefixBuilder | Zero Install .NET API",
    "summary": "Class PrefixBuilder Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Wraps an IBuilder and prepends a directory prefix to paths. public class PrefixBuilder : MarshalNoTimeout, IBuilder, IForwardOnlyBuilder Inheritance object MarshalByRefObject MarshalNoTimeout PrefixBuilder Implements IBuilder IForwardOnlyBuilder Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, Stream, ITaskHandler, object?) BuilderExtensions.AddArchive(IBuilder, Archive, Stream, ITaskHandler, object?) BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, ICommandExecutor, ITaskHandler, string?) BuilderExtensions.Add(IBuilder, RetrievalMethod, ICommandExecutor, ITaskHandler) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, ITaskHandler) BuilderExtensions.AddFile(IBuilder, SingleFile, Stream) BuilderExtensions.BuildDirectory(IBuilder, string?) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, string, ITaskHandler) BuilderExtensions.Remove(IBuilder, RemoveStep) BuilderExtensions.Rename(IBuilder, RenameStep) Constructors PrefixBuilder(IBuilder, string) Wraps an IBuilder and prepends a directory prefix to paths. public PrefixBuilder(IBuilder underlyingBuilder, string prefix) Parameters underlyingBuilder IBuilder The underlying IBuilder to wrap. prefix string The directory prefix to prepend to paths. Methods AddDirectory(string) Adds a subdirectory to the implementation. public void AddDirectory(string path) Parameters path string The path of the directory to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddFile(string, Stream, UnixTime, bool) Adds a file to the implementation. public void AddFile(string path, Stream stream, UnixTime modifiedTime, bool executable = false) Parameters path string The path of the file to create relative to the implementation root. stream Stream The contents of the file. modifiedTime UnixTime The last write time to set for the file. executable bool true if the file's executable bit is to be set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddHardlink(string, string, bool) Adds a hardlink to the implementation. public void AddHardlink(string path, string target, bool executable = false) Parameters path string The path of the hardlink to create relative to the implementation root. target string The path of the existing file the hardlink shall be based on relative to the implementation root. Must point executable bool true if the executable bit of the hardlink is set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. NotSupportedException The currently platform or builder does not support hardlinks. Use AddFile(string, Stream, UnixTime, bool) instead. AddSymlink(string, string) Adds a symbolic link to the implementation. public void AddSymlink(string path, string target) Parameters path string The path of the symlink to create relative to the implementation root. target string The target the symbolic link shall point to relative to path. May use non-native path separators. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. MarkAsExecutable(string) Marks a previously added file as executable. public void MarkAsExecutable(string path) Parameters path string The path of the file to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Remove(string) Removes a file or directory from the implementation. public void Remove(string path) Parameters path string The path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Rename(string, string) Renames a file or directory in the implementation. public void Rename(string path, string target) Parameters path string The original path of the file or directory relative to the implementation root. target string The new path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. TurnIntoSymlink(string) Turns a previously added file into a symlink. public void TurnIntoSymlink(string path) Parameters path string The path of the symlink to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Store.FileSystem.ReadDirectory.html": {
    "href": "api/ZeroInstall.Store.FileSystem.ReadDirectory.html",
    "title": "Class ReadDirectory | Zero Install .NET API",
    "summary": "Class ReadDirectory Namespace ZeroInstall.Store.FileSystem Assembly ZeroInstall.Store.dll Reads the content of a directory to an IBuilder. public class ReadDirectory : ReadDirectoryBase, ITask Inheritance object MarshalByRefObject TaskBase ReadDirectoryBase ReadDirectory Implements ITask Inherited Members ReadDirectoryBase.Source ReadDirectoryBase.Execute() ReadDirectoryBase.UnitsByte ReadDirectoryBase.FollowSymlinks TaskBase.CancellationToken TaskBase.CredentialProvider TaskBase.Run(CancellationToken, ICredentialProvider, IProgress<TaskSnapshot>) TaskBase.Tag TaskBase.CanCancel TaskBase.PreventIdle TaskBase.State TaskBase.UnitsProcessed TaskBase.UnitsTotal MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadDirectory(string, IForwardOnlyBuilder, string?) Creates a new directory read task. public ReadDirectory(string path, IForwardOnlyBuilder builder, string? name = null) Parameters path string The path of the directory to read. builder IForwardOnlyBuilder The builder to read to. name string A name describing the task in human-readable form. Properties Name A name describing the task in human-readable form. public override string Name { get; } Property Value string Methods HandleDirectory(DirectoryInfo) Called once for every sub-directory below Source. protected override void HandleDirectory(DirectoryInfo entry) Parameters entry DirectoryInfo HandleFile(FileInfo, FileInfo?) Called once for every file below Source. protected override void HandleFile(FileInfo file, FileInfo? hardlinkTarget = null) Parameters file FileInfo The file to handle. hardlinkTarget FileInfo A previously handled file that is hardlinked to file. May be null."
  },
  "api/ZeroInstall.Store.FileSystem.html": {
    "href": "api/ZeroInstall.Store.FileSystem.html",
    "title": "Namespace ZeroInstall.Store.FileSystem | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.FileSystem Interfaces and methods for building and reading File system structures. Classes BuilderExtensions Helpers for adding RetrievalMethods to IBuilders. DirectoryBuilder Builds a file system directory on-disk. ImplFileUtils Provides filesystem helper methods for working with implementation directories. PrefixBuilder Wraps an IBuilder and prepends a directory prefix to paths. ReadDirectory Reads the content of a directory to an IBuilder. Interfaces IBuilder Builds a file system directory. IForwardOnlyBuilder Builds a file system directory without changing or removing elements that have already been added."
  },
  "api/ZeroInstall.Store.Icons.IIconStore.html": {
    "href": "api/ZeroInstall.Store.Icons.IIconStore.html",
    "title": "Interface IIconStore | Zero Install .NET API",
    "summary": "Interface IIconStore Namespace ZeroInstall.Store.Icons Assembly ZeroInstall.Store.dll Stores icon files downloaded from the web as local files. public interface IIconStore Extension Methods IconStoreExtensions.TryGetCached(IIconStore, Icon) Remarks Implementations of this interface are immutable and thread-safe. Methods Get(Icon, out bool) Gets an icon from the cache or downloads it if not yet cached. string Get(Icon icon, out bool shouldRefresh) Parameters icon Icon The icon to get. shouldRefresh bool Indicates whether the returned file is outdated and EffectiveNetworkUse is Full. Returns string The file path of the icon in the cache. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while adding the icon to the cache. UnauthorizedAccessException Read or write access to the cache is not permitted. WebException A problem occurred while downloading the icon. InvalidDataException The icon does not have a valid format. GetFresh(Icon) Gets an icon from the cache or downloads it if not yet cached or outdated. string GetFresh(Icon icon) Parameters icon Icon The icon to get. Returns string The file path of the icon in the cache. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while adding the icon to the cache. UnauthorizedAccessException Read or write access to the cache is not permitted. WebException A problem occurred while downloading the icon. InvalidDataException The icon does not have a valid format. Import(Icon, Stream) Imports an icon into the cache void Import(Icon icon, Stream stream) Parameters icon Icon Metadata about the icon. stream Stream The contents of the icon file. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while adding the icon to the cache. UnauthorizedAccessException Read or write access to the cache is not permitted. InvalidDataException The icon does not have a valid format. TryGetCached(Icon, out bool) Tries to get an icon that is already cached. string? TryGetCached(Icon icon, out bool shouldRefresh) Parameters icon Icon The icon to get. shouldRefresh bool Indicates whether the returned file is outdated and EffectiveNetworkUse is Full. Returns string The file path of the icon in the cache; null if the icon is not cached yet."
  },
  "api/ZeroInstall.Store.Icons.IconStore.html": {
    "href": "api/ZeroInstall.Store.Icons.IconStore.html",
    "title": "Class IconStore | Zero Install .NET API",
    "summary": "Class IconStore Namespace ZeroInstall.Store.Icons Assembly ZeroInstall.Store.dll Stores icon files downloaded from the web as local files. public sealed class IconStore : IIconStore Inheritance object IconStore Implements IIconStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods IconStoreExtensions.TryGetCached(IIconStore, Icon) Remarks This class is immutable and thread-safe. Constructors IconStore(string, Config, ITaskHandler) Stores icon files downloaded from the web as local files. public IconStore(string path, Config config, ITaskHandler handler) Parameters path string config Config handler ITaskHandler Remarks This class is immutable and thread-safe. Methods Get(Icon, out bool) Gets an icon from the cache or downloads it if not yet cached. public string Get(Icon icon, out bool shouldRefresh) Parameters icon Icon The icon to get. shouldRefresh bool Indicates whether the returned file is outdated and EffectiveNetworkUse is Full. Returns string The file path of the icon in the cache. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while adding the icon to the cache. UnauthorizedAccessException Read or write access to the cache is not permitted. WebException A problem occurred while downloading the icon. InvalidDataException The icon does not have a valid format. GetFileName(Icon) Gets a file name suitable for storing an Icon on the disk. public static string GetFileName(Icon icon) Parameters icon Icon Returns string GetFresh(Icon) Gets an icon from the cache or downloads it if not yet cached or outdated. public string GetFresh(Icon icon) Parameters icon Icon The icon to get. Returns string The file path of the icon in the cache. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while adding the icon to the cache. UnauthorizedAccessException Read or write access to the cache is not permitted. WebException A problem occurred while downloading the icon. InvalidDataException The icon does not have a valid format. Import(Icon, Stream) Imports an icon into the cache public void Import(Icon icon, Stream stream) Parameters icon Icon Metadata about the icon. stream Stream The contents of the icon file. Exceptions OperationCanceledException The user canceled the task. IOException A problem occurred while adding the icon to the cache. UnauthorizedAccessException Read or write access to the cache is not permitted. InvalidDataException The icon does not have a valid format. TryGetCached(Icon, out bool) Tries to get an icon that is already cached. public string? TryGetCached(Icon icon, out bool shouldRefresh) Parameters icon Icon The icon to get. shouldRefresh bool Indicates whether the returned file is outdated and EffectiveNetworkUse is Full. Returns string The file path of the icon in the cache; null if the icon is not cached yet."
  },
  "api/ZeroInstall.Store.Icons.IconStoreExtensions.html": {
    "href": "api/ZeroInstall.Store.Icons.IconStoreExtensions.html",
    "title": "Class IconStoreExtensions | Zero Install .NET API",
    "summary": "Class IconStoreExtensions Namespace ZeroInstall.Store.Icons Assembly ZeroInstall.Store.dll Provides extension methods for IIconStore. public static class IconStoreExtensions Inheritance object IconStoreExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryGetCached(IIconStore, Icon) Tries to get an icon that is already cached. public static string? TryGetCached(this IIconStore iconStore, Icon icon) Parameters iconStore IIconStore The icon store. icon Icon The icon to get. Returns string The file path of the icon in the cache; null if the icon is not cached yet."
  },
  "api/ZeroInstall.Store.Icons.html": {
    "href": "api/ZeroInstall.Store.Icons.html",
    "title": "Namespace ZeroInstall.Store.Icons | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Icons Stores icon files downloaded from the web as local files. Classes IconStore Stores icon files downloaded from the web as local files. IconStoreExtensions Provides extension methods for IIconStore. Interfaces IIconStore Stores icon files downloaded from the web as local files."
  },
  "api/ZeroInstall.Store.Implementations.CompositeImplementationSink.html": {
    "href": "api/ZeroInstall.Store.Implementations.CompositeImplementationSink.html",
    "title": "Class CompositeImplementationSink | Zero Install .NET API",
    "summary": "Class CompositeImplementationSink Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Combines multiple IImplementationSinks as a composite. public class CompositeImplementationSink : MarshalNoTimeout, IImplementationSink Inheritance object MarshalByRefObject MarshalNoTimeout CompositeImplementationSink Implements IImplementationSink Derived CompositeImplementationStore Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks When adding new Implementations the last child IImplementationSink that doesn't throw an UnauthorizedAccessException is used. Constructors CompositeImplementationSink(IReadOnlyList<IImplementationSink>) Combines multiple IImplementationSinks as a composite. public CompositeImplementationSink(IReadOnlyList<IImplementationSink> sinks) Parameters sinks IReadOnlyList<IImplementationSink> A priority-sorted list of IImplementationSinks. Queried last-to-first for adding new Implementation. Remarks When adding new Implementations the last child IImplementationSink that doesn't throw an UnauthorizedAccessException is used. Methods Add(ManifestDigest, Action<IBuilder>) Adds a new implementation. public void Add(ManifestDigest manifestDigest, Action<IBuilder> build) Parameters manifestDigest ManifestDigest The digest the implementation is supposed to match. build Action<IBuilder> Callback for building the implementation. Exceptions OperationCanceledException The user canceled the task. ImplementationAlreadyInStoreException There is already an implementation with the specified manifestDigest in the store. UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. DigestMismatchException The implementation's content doesn't match the manifestDigest. Contains(ManifestDigest) Determines whether the sink/store contains an implementation identified by a specific ManifestDigest. public bool Contains(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to check for. Returns bool true if the specified implementation is available in the store; false if the specified implementation is not available in the store or if read access to the store is not permitted. Remarks If read access to the store is not permitted, no exception is thrown."
  },
  "api/ZeroInstall.Store.Implementations.CompositeImplementationStore.html": {
    "href": "api/ZeroInstall.Store.Implementations.CompositeImplementationStore.html",
    "title": "Class CompositeImplementationStore | Zero Install .NET API",
    "summary": "Class CompositeImplementationStore Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Combines multiple IImplementationStores as a composite. public class CompositeImplementationStore : CompositeImplementationSink, IImplementationStore, IImplementationSink Inheritance object MarshalByRefObject MarshalNoTimeout CompositeImplementationSink CompositeImplementationStore Implements IImplementationStore IImplementationSink Inherited Members CompositeImplementationSink.Contains(ManifestDigest) CompositeImplementationSink.Add(ManifestDigest, Action<IBuilder>) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ImplementationStoreUtils.Audit(IImplementationStore, ITaskHandler) ImplementationStoreUtils.GetPath(IImplementationStore, ImplementationBase) ImplementationStoreUtils.NeedsAdminToRemove(IImplementationStore) Remarks When adding new Implementations the last child IImplementationStore that doesn't throw an UnauthorizedAccessException is used. When when retrieving existing Implementations the first child IImplementationStore that returns true for Contains(ManifestDigest) is used. Constructors CompositeImplementationStore(IReadOnlyList<IImplementationStore>) Creates a new composite implementation store with a set of IImplementationStores. public CompositeImplementationStore(IReadOnlyList<IImplementationStore> stores) Parameters stores IReadOnlyList<IImplementationStore> A priority-sorted list of IImplementationStores. Queried last-to-first for adding new Implementations, first-to-last otherwise. Properties Kind Indicates what kind of access to this store is possible. public ImplementationStoreKind Kind { get; } Property Value ImplementationStoreKind Path The path to the underlying directory in the file system. public string Path { get; } Property Value string Stores The IImplementationStores this store is internally composed of. public IReadOnlyList<IImplementationStore> Stores { get; } Property Value IReadOnlyList<IImplementationStore> Methods GetPath(ManifestDigest) Determines the local path of an implementation with a given ManifestDigest. public string? GetPath(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest the implementation to look for. Returns string A fully qualified path to the directory containing the implementation; null if the requested implementation could not be found in the store. Exceptions IOException The implementation directory is missing content and could not be deleted. UnauthorizedAccessException The implementation directory is missing content and write access to the store is not permitted. ListAll() Returns a list of all implementations currently in the store. public IEnumerable<ManifestDigest> ListAll() Returns IEnumerable<ManifestDigest> A list of implementations formatted as \"algorithm=digest\" (e.g. \"sha256=123abc\"). Exceptions IOException A problem occurred while reading from the store. UnauthorizedAccessException Read access to the store is not permitted. ListTemp() Returns a list of temporary directories currently in the store. public IEnumerable<string> ListTemp() Returns IEnumerable<string> A list of fully qualified paths. Exceptions IOException A problem occurred while reading from the store. UnauthorizedAccessException Read access to the store is not permitted. Optimise() Reads in all the manifest files in the store and looks for duplicates (files with the same permissions, modification time and digest). When it finds a pair, it deletes one and replaces it with a hard-link to the other. public long Optimise() Returns long The number of bytes saved by deduplication. Remarks If the store does not support optimising this method call may be silently ignored. Exceptions OperationCanceledException The user canceled the task. IOException Two files could not be hard-linked together. UnauthorizedAccessException Write access to the store is not permitted. DigestMismatchException A damaged implementation is encountered while optimizing. Purge() Removes all implementations and temporary directories from a store. public void Purge() Exceptions OperationCanceledException The user canceled the task. IOException An implementation could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. Remove(ManifestDigest) Removes a specific implementation from the store. public bool Remove(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to be removed. Returns bool true if the implementation was successfully removed; false if it could not be removed, e.g., because it does not exist or is locked. Exceptions OperationCanceledException The user canceled the task. NotAdminException Needs admin rights to delete from this store. RemoveTemp(string) Removes a specific temporary directory from the store. public bool RemoveTemp(string path) Parameters path string The fully qualified path of the directory. Returns bool true if the directory was successfully removed; false if it could not be removed, e.g. because it does not exist inside the store. Exceptions OperationCanceledException The user canceled the task. IOException The directory could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. ToString() Creates string representation suitable for console output. public override string ToString() Returns string Verify(ManifestDigest) Checks whether an implementation in the store still matches the expected digest. Asks the user whether to delete the implementation if it does not match. public void Verify(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to be verified. Exceptions OperationCanceledException The user canceled the task. NotSupportedException manifestDigest does not list any supported digests. IOException The implementation's directory could not be processed. UnauthorizedAccessException Read access to the implementation's directory is not permitted. ImplementationNotFoundException No implementation matching manifestDigest could be found in the store."
  },
  "api/ZeroInstall.Store.Implementations.DigestMismatchException.html": {
    "href": "api/ZeroInstall.Store.Implementations.DigestMismatchException.html",
    "title": "Class DigestMismatchException | Zero Install .NET API",
    "summary": "Class DigestMismatchException Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Indicates that the ManifestDigest of an implementation does not match the expected value. public sealed class DigestMismatchException : Exception, ISerializable Inheritance object Exception DigestMismatchException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors DigestMismatchException() Initializes a new instance of the Exception class. public DigestMismatchException() DigestMismatchException(string) Initializes a new instance of the Exception class with a specified error message. public DigestMismatchException(string message) Parameters message string The message that describes the error. DigestMismatchException(string, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. public DigestMismatchException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. DigestMismatchException(string?, string?, Manifest?, Manifest?) Creates a new digest mismatch exception. public DigestMismatchException(string? expectedDigest = null, string? actualDigest = null, Manifest? expectedManifest = null, Manifest? actualManifest = null) Parameters expectedDigest string The digest value the Implementation was supposed to have. actualDigest string The digest value that was actually calculated. expectedManifest Manifest The Manifest from which expectedDigest was derived. actualManifest Manifest The Manifest that actualDigest was derived from. Properties ActualDigest The hash value that was actually calculated. public string? ActualDigest { get; } Property Value string ActualManifest The Manifest that resulted in the ActualDigest. public Manifest? ActualManifest { get; } Property Value Manifest ExpectedDigest The hash value the Implementation was supposed to have. public string? ExpectedDigest { get; } Property Value string ExpectedManifest The Manifest that resulted in the ExpectedDigest. public Manifest? ExpectedManifest { get; } Property Value Manifest LongMessage A longer version of Message that contains more details. Suitable for verbose output. public string LongMessage { get; } Property Value string"
  },
  "api/ZeroInstall.Store.Implementations.IImplementationSink.html": {
    "href": "api/ZeroInstall.Store.Implementations.IImplementationSink.html",
    "title": "Interface IImplementationSink | Zero Install .NET API",
    "summary": "Interface IImplementationSink Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Accepts implementations and stores them. public interface IImplementationSink Methods Add(ManifestDigest, Action<IBuilder>) Adds a new implementation. void Add(ManifestDigest manifestDigest, Action<IBuilder> build) Parameters manifestDigest ManifestDigest The digest the implementation is supposed to match. build Action<IBuilder> Callback for building the implementation. Exceptions OperationCanceledException The user canceled the task. ImplementationAlreadyInStoreException There is already an implementation with the specified manifestDigest in the store. UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. DigestMismatchException The implementation's content doesn't match the manifestDigest. Contains(ManifestDigest) Determines whether the sink/store contains an implementation identified by a specific ManifestDigest. bool Contains(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to check for. Returns bool true if the specified implementation is available in the store; false if the specified implementation is not available in the store or if read access to the store is not permitted. Remarks If read access to the store is not permitted, no exception is thrown."
  },
  "api/ZeroInstall.Store.Implementations.IImplementationStore.html": {
    "href": "api/ZeroInstall.Store.Implementations.IImplementationStore.html",
    "title": "Interface IImplementationStore | Zero Install .NET API",
    "summary": "Interface IImplementationStore Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Manages a directory that stores implementations. Also known as an implementation cache. public interface IImplementationStore : IImplementationSink Inherited Members IImplementationSink.Contains(ManifestDigest) IImplementationSink.Add(ManifestDigest, Action<IBuilder>) Extension Methods ImplementationStoreUtils.Audit(IImplementationStore, ITaskHandler) ImplementationStoreUtils.GetPath(IImplementationStore, ImplementationBase) ImplementationStoreUtils.NeedsAdminToRemove(IImplementationStore) Properties Kind Indicates what kind of access to this store is possible. ImplementationStoreKind Kind { get; } Property Value ImplementationStoreKind Path The path to the underlying directory in the file system. string? Path { get; } Property Value string Methods GetPath(ManifestDigest) Determines the local path of an implementation with a given ManifestDigest. string? GetPath(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest the implementation to look for. Returns string A fully qualified path to the directory containing the implementation; null if the requested implementation could not be found in the store. Exceptions IOException The implementation directory is missing content and could not be deleted. UnauthorizedAccessException The implementation directory is missing content and write access to the store is not permitted. ListAll() Returns a list of all implementations currently in the store. IEnumerable<ManifestDigest> ListAll() Returns IEnumerable<ManifestDigest> A list of implementations formatted as \"algorithm=digest\" (e.g. \"sha256=123abc\"). Exceptions IOException A problem occurred while reading from the store. UnauthorizedAccessException Read access to the store is not permitted. ListTemp() Returns a list of temporary directories currently in the store. IEnumerable<string> ListTemp() Returns IEnumerable<string> A list of fully qualified paths. Exceptions IOException A problem occurred while reading from the store. UnauthorizedAccessException Read access to the store is not permitted. Optimise() Reads in all the manifest files in the store and looks for duplicates (files with the same permissions, modification time and digest). When it finds a pair, it deletes one and replaces it with a hard-link to the other. long Optimise() Returns long The number of bytes saved by deduplication. Remarks If the store does not support optimising this method call may be silently ignored. Exceptions OperationCanceledException The user canceled the task. IOException Two files could not be hard-linked together. UnauthorizedAccessException Write access to the store is not permitted. DigestMismatchException A damaged implementation is encountered while optimizing. Purge() Removes all implementations and temporary directories from a store. void Purge() Exceptions OperationCanceledException The user canceled the task. IOException An implementation could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. Remove(ManifestDigest) Removes a specific implementation from the store. bool Remove(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to be removed. Returns bool true if the implementation was successfully removed; false if it could not be removed, e.g., because it does not exist or is locked. Exceptions OperationCanceledException The user canceled the task. NotAdminException Needs admin rights to delete from this store. RemoveTemp(string) Removes a specific temporary directory from the store. bool RemoveTemp(string path) Parameters path string The fully qualified path of the directory. Returns bool true if the directory was successfully removed; false if it could not be removed, e.g. because it does not exist inside the store. Exceptions OperationCanceledException The user canceled the task. IOException The directory could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. Verify(ManifestDigest) Checks whether an implementation in the store still matches the expected digest. Asks the user whether to delete the implementation if it does not match. void Verify(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to be verified. Exceptions OperationCanceledException The user canceled the task. NotSupportedException manifestDigest does not list any supported digests. IOException The implementation's directory could not be processed. UnauthorizedAccessException Read access to the implementation's directory is not permitted. ImplementationNotFoundException No implementation matching manifestDigest could be found in the store."
  },
  "api/ZeroInstall.Store.Implementations.ImplementationAlreadyInStoreException.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationAlreadyInStoreException.html",
    "title": "Class ImplementationAlreadyInStoreException | Zero Install .NET API",
    "summary": "Class ImplementationAlreadyInStoreException Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Indicates an Implementation being added to an IImplementationStore is already in the store. public sealed class ImplementationAlreadyInStoreException : Exception, ISerializable Inheritance object Exception ImplementationAlreadyInStoreException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ImplementationAlreadyInStoreException() Initializes a new instance of the Exception class. public ImplementationAlreadyInStoreException() ImplementationAlreadyInStoreException(string) Initializes a new instance of the Exception class with a specified error message. public ImplementationAlreadyInStoreException(string message) Parameters message string The message that describes the error. ImplementationAlreadyInStoreException(string, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. public ImplementationAlreadyInStoreException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. ImplementationAlreadyInStoreException(ManifestDigest) Creates a new implementation already in store exception. public ImplementationAlreadyInStoreException(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the Implementation that was supposed to be added. Properties ManifestDigest The hash value the Implementation was supposed to have. public ManifestDigest ManifestDigest { get; } Property Value ManifestDigest"
  },
  "api/ZeroInstall.Store.Implementations.ImplementationNotFoundException.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationNotFoundException.html",
    "title": "Class ImplementationNotFoundException | Zero Install .NET API",
    "summary": "Class ImplementationNotFoundException Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Indicates an Implementation could not be found in a IImplementationStore. public sealed class ImplementationNotFoundException : IOException, ISerializable Inheritance object Exception SystemException IOException ImplementationNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors ImplementationNotFoundException() Creates a new implementation not found exception without specifying the specific implementation ID. public ImplementationNotFoundException() ImplementationNotFoundException(string) Initializes a new instance of the IOException class with its message string set to message, its HRESULT set to COR_E_IO, and its inner exception set to null. public ImplementationNotFoundException(string message) Parameters message string A string that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. ImplementationNotFoundException(string, Exception) Initializes a new instance of the IOException class with a specified error message and a reference to the inner exception that is the cause of this exception. public ImplementationNotFoundException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception. ImplementationNotFoundException(ManifestDigest) Creates a new implementation not found exception. public ImplementationNotFoundException(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The ManifestDigest of the Implementation to be found. Properties ManifestDigest The ManifestDigest of the Implementation to be found. public ManifestDigest ManifestDigest { get; } Property Value ManifestDigest"
  },
  "api/ZeroInstall.Store.Implementations.ImplementationSink.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationSink.html",
    "title": "Class ImplementationSink | Zero Install .NET API",
    "summary": "Class ImplementationSink Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Accepts implementations and stores them. public class ImplementationSink : MarshalNoTimeout, IImplementationSink Inheritance object MarshalByRefObject MarshalNoTimeout ImplementationSink Implements IImplementationSink Derived ImplementationStore Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImplementationSink(string, bool) Creates a new implementation sink using a specific path to a directory. public ImplementationSink(string path, bool useWriteProtection = true) Parameters path string A fully qualified directory path. The directory will be created if it doesn't exist yet. useWriteProtection bool Controls whether implementation directories are made write-protected once added to prevent unintentional modification (which would invalidate the manifest digests). Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. Fields ReadOnly Indicates whether this implementation sink does not support write access. protected readonly bool ReadOnly Field Value bool UseWriteProtection Controls whether implementation directories are made write-protected once added to prevent unintentional modification (which would invalidate the manifest digests). protected readonly bool UseWriteProtection Field Value bool Properties Path The path to the underlying directory in the file system. public string Path { get; } Property Value string Methods Add(ManifestDigest, Action<IBuilder>) Adds a new implementation. public void Add(ManifestDigest manifestDigest, Action<IBuilder> build) Parameters manifestDigest ManifestDigest The digest the implementation is supposed to match. build Action<IBuilder> Callback for building the implementation. Exceptions OperationCanceledException The user canceled the task. ImplementationAlreadyInStoreException There is already an implementation with the specified manifestDigest in the store. UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. DigestMismatchException The implementation's content doesn't match the manifestDigest. Contains(ManifestDigest) Determines whether the sink/store contains an implementation identified by a specific ManifestDigest. public bool Contains(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to check for. Returns bool true if the specified implementation is available in the store; false if the specified implementation is not available in the store or if read access to the store is not permitted. Remarks If read access to the store is not permitted, no exception is thrown. GetPath(ManifestDigest) Determines the local path of an implementation with a given ManifestDigest. public string? GetPath(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest the implementation to look for. Returns string A fully qualified path to the directory containing the implementation; null if the requested implementation could not be found in the store. RemoveDeleteInfoFile() Removes the file explaining to users how to delete files with write protection. protected void RemoveDeleteInfoFile()"
  },
  "api/ZeroInstall.Store.Implementations.ImplementationStore.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationStore.html",
    "title": "Class ImplementationStore | Zero Install .NET API",
    "summary": "Class ImplementationStore Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Manages a directory that stores implementations. Also known as an implementation cache. public class ImplementationStore : ImplementationSink, IImplementationStore, IImplementationSink, IEquatable<ImplementationStore> Inheritance object MarshalByRefObject MarshalNoTimeout ImplementationSink ImplementationStore Implements IImplementationStore IImplementationSink IEquatable<ImplementationStore> Inherited Members ImplementationSink.UseWriteProtection ImplementationSink.ReadOnly ImplementationSink.Path ImplementationSink.Contains(ManifestDigest) ImplementationSink.GetPath(ManifestDigest) ImplementationSink.Add(ManifestDigest, Action<IBuilder>) ImplementationSink.RemoveDeleteInfoFile() MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ImplementationStoreUtils.Audit(IImplementationStore, ITaskHandler) ImplementationStoreUtils.GetPath(IImplementationStore, ImplementationBase) ImplementationStoreUtils.NeedsAdminToRemove(IImplementationStore) Constructors ImplementationStore(string, ITaskHandler, bool) Manages a directory that stores implementations. Also known as an implementation cache. public ImplementationStore(string path, ITaskHandler handler, bool useWriteProtection = true) Parameters path string A fully qualified directory path. The directory will be created if it doesn't exist yet. handler ITaskHandler A callback object used when the user is to be informed about progress or asked questions. useWriteProtection bool Controls whether implementation directories are made write-protected once added to the store to prevent unintentional modification (which would invalidate the manifest digests). Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. Properties Kind Indicates what kind of access to this store is possible. public ImplementationStoreKind Kind { get; } Property Value ImplementationStoreKind Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. Equals(ImplementationStore?) Indicates whether the current object is equal to another object of the same type. public bool Equals(ImplementationStore? other) Parameters other ImplementationStore An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. ListAll() Returns a list of all implementations currently in the store. public IEnumerable<ManifestDigest> ListAll() Returns IEnumerable<ManifestDigest> A list of implementations formatted as \"algorithm=digest\" (e.g. \"sha256=123abc\"). Exceptions IOException A problem occurred while reading from the store. UnauthorizedAccessException Read access to the store is not permitted. ListTemp() Returns a list of temporary directories currently in the store. public IEnumerable<string> ListTemp() Returns IEnumerable<string> A list of fully qualified paths. Exceptions IOException A problem occurred while reading from the store. UnauthorizedAccessException Read access to the store is not permitted. Optimise() Reads in all the manifest files in the store and looks for duplicates (files with the same permissions, modification time and digest). When it finds a pair, it deletes one and replaces it with a hard-link to the other. public long Optimise() Returns long The number of bytes saved by deduplication. Remarks If the store does not support optimising this method call may be silently ignored. Exceptions OperationCanceledException The user canceled the task. IOException Two files could not be hard-linked together. UnauthorizedAccessException Write access to the store is not permitted. DigestMismatchException A damaged implementation is encountered while optimizing. Purge() Removes all implementations and temporary directories from a store. public void Purge() Exceptions OperationCanceledException The user canceled the task. IOException An implementation could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. Remove(ManifestDigest) Removes a specific implementation from the store. public bool Remove(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to be removed. Returns bool true if the implementation was successfully removed; false if it could not be removed, e.g., because it does not exist or is locked. Exceptions OperationCanceledException The user canceled the task. NotAdminException Needs admin rights to delete from this store. RemoveTemp(string) Removes a specific temporary directory from the store. public bool RemoveTemp(string path) Parameters path string The fully qualified path of the directory. Returns bool true if the directory was successfully removed; false if it could not be removed, e.g. because it does not exist inside the store. Exceptions OperationCanceledException The user canceled the task. IOException The directory could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. ToString() Creates string representation suitable for console output. public override string ToString() Returns string Exceptions IOException The path could not be created or the underlying filesystem can not store file-changed times accurate to the second. UnauthorizedAccessException Creating the path is not permitted. Verify(ManifestDigest) Checks whether an implementation in the store still matches the expected digest. Asks the user whether to delete the implementation if it does not match. public void Verify(ManifestDigest manifestDigest) Parameters manifestDigest ManifestDigest The digest of the implementation to be verified. Exceptions OperationCanceledException The user canceled the task. NotSupportedException manifestDigest does not list any supported digests. IOException The implementation's directory could not be processed. UnauthorizedAccessException Read access to the implementation's directory is not permitted. ImplementationNotFoundException No implementation matching manifestDigest could be found in the store."
  },
  "api/ZeroInstall.Store.Implementations.ImplementationStoreKind.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationStoreKind.html",
    "title": "Enum ImplementationStoreKind | Zero Install .NET API",
    "summary": "Enum ImplementationStoreKind Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll public enum ImplementationStoreKind Fields ReadOnly = 1 This store cannot be modified. ReadWrite = 0 This store can be written to directly. Service = 2 This store is managed by a background service. See Also Kind"
  },
  "api/ZeroInstall.Store.Implementations.ImplementationStoreUtils.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationStoreUtils.html",
    "title": "Class ImplementationStoreUtils | Zero Install .NET API",
    "summary": "Class ImplementationStoreUtils Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Helper methods for IImplementationStores and paths. public static class ImplementationStoreUtils Inheritance object ImplementationStoreUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Audit(IImplementationStore, ITaskHandler) Checks whether all implementations in the store still matches the expected digest. Asks the user whether to delete the implementation if it does not match. public static void Audit(this IImplementationStore store, ITaskHandler handler) Parameters store IImplementationStore The store containing the implementation. handler ITaskHandler A callback object used when the user needs to be asked questions or informed about IO tasks. Exceptions OperationCanceledException The user canceled the task. IOException An implementation's directory could not be processed. UnauthorizedAccessException Read access to an implementation's directory is not permitted. GetPath(IImplementationStore, ImplementationBase) Determines the local path of an implementation. public static string GetPath(this IImplementationStore store, ImplementationBase implementation) Parameters store IImplementationStore The store containing the implementation. implementation ImplementationBase The implementation to be located. Returns string A fully qualified path to the directory containing the implementation. Exceptions ImplementationNotFoundException The implementation is not cached yet. UnauthorizedAccessException Read access to the store is not permitted. IsImplementation(string, out string?) Determines whether a path looks like it is inside a store implementation known by ManifestFormat. public static bool IsImplementation(string path, out string? implementationPath) Parameters path string A path to a directory that may or may not be inside a store implementation. implementationPath string The top-level of the detected store implementation directory if any; null otherwise. Returns bool Remarks Performs no file system access. Only looks at the path string itself. NeedsAdminToRemove(IImplementationStore) Indicates whether there are implementations in the store that would throw NotAdminException on Remove(ManifestDigest). public static bool NeedsAdminToRemove(this IImplementationStore store) Parameters store IImplementationStore Returns bool Verify(string, ManifestDigest, ITaskHandler) Checks whether an implementation directory matches the expected digest. Throws DigestMismatchException if it does not match. public static void Verify(string path, ManifestDigest manifestDigest, ITaskHandler handler) Parameters path string The path of the directory to check. manifestDigest ManifestDigest The expected digest. handler ITaskHandler A callback object used when the user is to be informed about progress. Exceptions OperationCanceledException The user canceled the task. NotSupportedException manifestDigest does not list any supported digests. IOException The directory could not be processed. UnauthorizedAccessException Read access to the directory is not permitted. DigestMismatchException The directory does not match the expected digest"
  },
  "api/ZeroInstall.Store.Implementations.ImplementationStores.html": {
    "href": "api/ZeroInstall.Store.Implementations.ImplementationStores.html",
    "title": "Class ImplementationStores | Zero Install .NET API",
    "summary": "Class ImplementationStores Namespace ZeroInstall.Store.Implementations Assembly ZeroInstall.Store.dll Manages implementation store directories and provides IImplementationStore instances. public static class ImplementationStores Inheritance object ImplementationStores Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Default(ITaskHandler) Creates an IImplementationStore instance that uses the default cache locations (based on ImplementationStores. public static IImplementationStore Default(ITaskHandler handler) Parameters handler ITaskHandler A callback object used when the user is to be informed about progress or asked questions. Returns IImplementationStore Exceptions IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file or one of the stores was not permitted. GetDirectories(bool) Returns a list of paths for implementation directories as defined by configuration files including the default locations. public static IEnumerable<string> GetDirectories(bool serviceMode = false) Parameters serviceMode bool true to exclude the default location in the user profile, e.g., for system services. Returns IEnumerable<string> Remarks Multiple configuration files apply cumulatively. I.e., directories from both the user config and the system config are used. Exceptions IOException There was a problem accessing a configuration file or one of the stores. UnauthorizedAccessException Access to a configuration file was not permitted. GetMachineWideDirectories() Returns a list of custom implementation directories in the current machine-wide configuration. public static IEnumerable<string> GetMachineWideDirectories() Returns IEnumerable<string> Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. GetUserDirectories() Returns a list of custom implementation directories in the current user configuration. public static IEnumerable<string> GetUserDirectories() Returns IEnumerable<string> Exceptions IOException There was a problem accessing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. SetMachineWideDirectories(IEnumerable<string>) Sets the list of custom implementation directories in the current machine-wide configuration. public static void SetMachineWideDirectories(IEnumerable<string> paths) Parameters paths IEnumerable<string> The list of implementation directories to set. Exceptions IOException There was a problem writing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted. SetUserDirectories(IEnumerable<string>) Sets the list of custom implementation directories in the current user configuration. public static void SetUserDirectories(IEnumerable<string> paths) Parameters paths IEnumerable<string> The list of implementation directories to set. Exceptions IOException There was a problem writing a configuration file. UnauthorizedAccessException Access to a configuration file was not permitted."
  },
  "api/ZeroInstall.Store.Implementations.html": {
    "href": "api/ZeroInstall.Store.Implementations.html",
    "title": "Namespace ZeroInstall.Store.Implementations | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Implementations On-disk storage for implementations, i.e. implementation caches. Classes CompositeImplementationSink Combines multiple IImplementationSinks as a composite. CompositeImplementationStore Combines multiple IImplementationStores as a composite. DigestMismatchException Indicates that the ManifestDigest of an implementation does not match the expected value. ImplementationAlreadyInStoreException Indicates an Implementation being added to an IImplementationStore is already in the store. ImplementationNotFoundException Indicates an Implementation could not be found in a IImplementationStore. ImplementationSink Accepts implementations and stores them. ImplementationStore Manages a directory that stores implementations. Also known as an implementation cache. ImplementationStoreUtils Helper methods for IImplementationStores and paths. ImplementationStores Manages implementation store directories and provides IImplementationStore instances. Interfaces IImplementationSink Accepts implementations and stores them. IImplementationStore Manages a directory that stores implementations. Also known as an implementation cache. Enums ImplementationStoreKind"
  },
  "api/ZeroInstall.Store.ManagerBase.html": {
    "href": "api/ZeroInstall.Store.ManagerBase.html",
    "title": "Class ManagerBase | Zero Install .NET API",
    "summary": "Class ManagerBase Namespace ZeroInstall.Store Assembly ZeroInstall.Store.dll Common base class for managers that need an ITaskHandler and Mutex-based locking. [MustDisposeResource] public abstract class ManagerBase : IDisposable Inheritance object ManagerBase Implements IDisposable Derived SelfManager IntegrationManagerBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManagerBase(ITaskHandler, bool) Common base class for managers that need an ITaskHandler and Mutex-based locking. protected ManagerBase(ITaskHandler handler, bool machineWide) Parameters handler ITaskHandler A callback object used when the user needs to be asked questions or informed about download and IO tasks. machineWide bool Apply operations machine-wide instead of just for the current user. Fields Handler A callback object used when the user needs to be asked questions or informed about download and IO tasks. protected readonly ITaskHandler Handler Field Value ITaskHandler Properties MachineWide Apply operations machine-wide instead of just for the current user. public bool MachineWide { get; } Property Value bool MutexName The name of the cross-process mutex used by AcquireMutex(). protected abstract string MutexName { get; } Property Value string Methods AcquireMutex() Tries to acquire a mutex with the name MutexName. Call this at the end of your constructors. protected void AcquireMutex() Exceptions TimeoutException Another process is already holding the mutex. Dispose() Releases the mutex. public virtual void Dispose()"
  },
  "api/ZeroInstall.Store.Manifests.Manifest.html": {
    "href": "api/ZeroInstall.Store.Manifests.Manifest.html",
    "title": "Class Manifest | Zero Install .NET API",
    "summary": "Class Manifest Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll A manifest lists every directory, file and symlink in a directory and contains a digest of each file's content. [Serializable] public sealed class Manifest : IReadOnlyDictionary<string, IDictionary<string, ManifestElement>>, IReadOnlyCollection<KeyValuePair<string, IDictionary<string, ManifestElement>>>, IEnumerable<KeyValuePair<string, IDictionary<string, ManifestElement>>>, IEnumerable Inheritance object Manifest Implements IReadOnlyDictionary<string, IDictionary<string, ManifestElement>> IReadOnlyCollection<KeyValuePair<string, IDictionary<string, ManifestElement>>> IEnumerable<KeyValuePair<string, IDictionary<string, ManifestElement>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Remarks See also: https://docs.0install.net/specifications/manifest/ Constructors Manifest(ManifestFormat) Creates a new manifest. public Manifest(ManifestFormat format) Parameters format ManifestFormat The format used to calculate digests, also specifies the algorithm used in Digest. Fields ManifestFile The well-known file name used to store manifest files in directories. public const string ManifestFile = \".manifest\" Field Value string Properties Count Gets the number of elements in the collection. public int Count { get; } Property Value int The number of elements in the collection. Format The format of the manifest (which file details are listed, which digest method is used, etc.). public ManifestFormat Format { get; } Property Value ManifestFormat this[string] Gets or adds directory in the manifest. public IDictionary<string, ManifestElement> this[string key] { get; } Parameters key string The Unix path of the directory relative to the implementation root. Empty for root. Property Value IDictionary<string, ManifestElement> Keys Gets an enumerable collection that contains the keys in the read-only dictionary. public IEnumerable<string> Keys { get; } Property Value IEnumerable<string> An enumerable collection that contains the keys in the read-only dictionary. Lines The directories and ManifestElements comprising the manifest in line format. public IEnumerable<string> Lines { get; } Property Value IEnumerable<string> TotalSize The combined size of all files listed in the manifest in bytes. public long TotalSize { get; } Property Value long Values Gets an enumerable collection that contains the values in the read-only dictionary. public IEnumerable<IDictionary<string, ManifestElement>> Values { get; } Property Value IEnumerable<IDictionary<string, ManifestElement>> An enumerable collection that contains the values in the read-only dictionary. Methods Add(string) Returns an existing directory or adds a new directory (and any missing parents) to the manifest. public SortedDictionary<string, ManifestElement> Add(string key) Parameters key string The Unix path of the directory relative to the implementation root. Returns SortedDictionary<string, ManifestElement> A dictionary of elements inside the directory. CalculateDigest() Calculates the digest for the manifest in-memory. public string CalculateDigest() Returns string The manifest digest. ContainsKey(string) Determines whether the read-only dictionary contains an element that has the specified key. public bool ContainsKey(string key) Parameters key string The key to locate. Returns bool true if the read-only dictionary contains an element that has the specified key; otherwise, false. Exceptions ArgumentNullException key is null. Load(Stream, ManifestFormat) Parses a manifest file stream. public static Manifest Load(Stream stream, ManifestFormat format) Parameters stream Stream The stream to load from. format ManifestFormat The format of the file and the format of the created Manifest. Comprises the digest method used and the file's format. Returns Manifest The parsed content of the file. Exceptions FormatException The file specified is not a valid manifest file. Load(string, ManifestFormat) Parses a manifest file. public static Manifest Load(string path, ManifestFormat format) Parameters path string The path of the file to load. format ManifestFormat The format of the file and the format of the created Manifest. Comprises the digest method used and the file's format. Returns Manifest The parsed content of the file. Exceptions FormatException The file specified is not a valid manifest file. IOException The manifest file could not be read. UnauthorizedAccessException Read access to the file is not permitted. RejectPath(string) Determines whether a file path may not be used in implementations. public static bool RejectPath(string path) Parameters path string Returns bool Remove(string) Removes a directory and all its subdirectories from the manifest. public bool Remove(string key) Parameters key string The Unix path of the directory relative to the implementation root. Returns bool true if the directory is successfully found and removed; false otherwise. Rename(string, string) Moves a directory and all its subdirectories to a new path. public bool Rename(string key, string newKey) Parameters key string The Unix path of the directory relative to the implementation root. newKey string The new Unix path of the directory relative to the implementation root. Returns bool true if the directory is successfully found and renamed; false otherwise. Save(string) Writes the manifest to a file. public void Save(string path) Parameters path string The path of the file to write. Exceptions IOException A problem occurred while writing the file. UnauthorizedAccessException Write access to the file is not permitted. ToString() The directories and ManifestElements comprising the manifest in line format. Safe for parsing. public override string ToString() Returns string TryGetValue(string, out IDictionary<string, ManifestElement>?) Gets the value that is associated with the specified key. public bool TryGetValue(string key, out IDictionary<string, ManifestElement>? value) Parameters key string The key to locate. value IDictionary<string, ManifestElement> When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements the IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Exceptions ArgumentNullException key is null. TryLoad(string, ManifestFormat) Tries to parse a manifest file. public static Manifest? TryLoad(string path, ManifestFormat format) Parameters path string The path of the file to load. format ManifestFormat The format of the file and the format of the created Manifest. Comprises the digest method used and the file's format. Returns Manifest The parsed content of the file; null if the file does not exits or has invalid content. Exceptions IOException The manifest file could not be read. UnauthorizedAccessException Read access to the file is not permitted. WithOffset(TimeSpan) Creates a copy of the manifest with all timestamps shifted by the specified offset and rounded up to an even number of seconds. public Manifest WithOffset(TimeSpan offset) Parameters offset TimeSpan Returns Manifest"
  },
  "api/ZeroInstall.Store.Manifests.ManifestBuilder.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestBuilder.html",
    "title": "Class ManifestBuilder | Zero Install .NET API",
    "summary": "Class ManifestBuilder Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll Builds a Manifest for a file system directory. public class ManifestBuilder : MarshalNoTimeout, IBuilder, IForwardOnlyBuilder Inheritance object MarshalByRefObject MarshalNoTimeout ManifestBuilder Implements IBuilder IForwardOnlyBuilder Inherited Members MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, Stream, ITaskHandler, object?) BuilderExtensions.AddArchive(IBuilder, Archive, Stream, ITaskHandler, object?) BuilderExtensions.Add(IBuilder, DownloadRetrievalMethod, ICommandExecutor, ITaskHandler, string?) BuilderExtensions.Add(IBuilder, RetrievalMethod, ICommandExecutor, ITaskHandler) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, ITaskHandler) BuilderExtensions.AddFile(IBuilder, SingleFile, Stream) BuilderExtensions.BuildDirectory(IBuilder, string?) BuilderExtensions.CopyFrom(IBuilder, CopyFromStep, string, ITaskHandler) BuilderExtensions.Remove(IBuilder, RemoveStep) BuilderExtensions.Rename(IBuilder, RenameStep) Constructors ManifestBuilder(ManifestFormat) Builds a Manifest for a file system directory. public ManifestBuilder(ManifestFormat format) Parameters format ManifestFormat The manifest format. Properties Manifest The manifest. public Manifest Manifest { get; } Property Value Manifest Methods AddDirectory(string) Adds a subdirectory to the implementation. public void AddDirectory(string path) Parameters path string The path of the directory to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddFile(string, Stream, UnixTime, bool) Adds a file to the implementation. public void AddFile(string path, Stream stream, UnixTime modifiedTime, bool executable = false) Parameters path string The path of the file to create relative to the implementation root. stream Stream The contents of the file. modifiedTime UnixTime The last write time to set for the file. executable bool true if the file's executable bit is to be set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. AddHardlink(string, string, bool) Adds a hardlink to the implementation. public void AddHardlink(string path, string target, bool executable = false) Parameters path string The path of the hardlink to create relative to the implementation root. target string The path of the existing file the hardlink shall be based on relative to the implementation root. Must point executable bool true if the executable bit of the hardlink is set; false otherwise. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. NotSupportedException The currently platform or builder does not support hardlinks. Use AddFile(string, Stream, UnixTime, bool) instead. AddSymlink(string, string) Adds a symbolic link to the implementation. public void AddSymlink(string path, string target) Parameters path string The path of the symlink to create relative to the implementation root. target string The target the symbolic link shall point to relative to path. May use non-native path separators. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. MarkAsExecutable(string) Marks a previously added file as executable. public void MarkAsExecutable(string path) Parameters path string The path of the file to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Remove(string) Removes a file or directory from the implementation. public void Remove(string path) Parameters path string The path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. Rename(string, string) Renames a file or directory in the implementation. public void Rename(string path, string target) Parameters path string The original path of the file or directory relative to the implementation root. target string The new path of the file or directory relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed. TurnIntoSymlink(string) Turns a previously added file into a symlink. public void TurnIntoSymlink(string path) Parameters path string The path of the symlink to create relative to the implementation root. Exceptions UnauthorizedAccessException Access to a resource was denied. IOException An IO operation failed."
  },
  "api/ZeroInstall.Store.Manifests.ManifestElement.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestElement.html",
    "title": "Class ManifestElement | Zero Install .NET API",
    "summary": "Class ManifestElement Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll Base class for directory-element entries (files and symlinks) in a Manifest. [Serializable] public abstract record ManifestElement : IEquatable<ManifestElement> Inheritance object ManifestElement Implements IEquatable<ManifestElement> Derived ManifestFile ManifestSymlink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManifestElement(string, long) Base class for directory-element entries (files and symlinks) in a Manifest. protected ManifestElement(string Digest, long Size) Parameters Digest string The digest of the content of the element calculated using the selected digest algorithm. Size long The size of the element in bytes. Properties Digest The digest of the content of the element calculated using the selected digest algorithm. public string Digest { get; init; } Property Value string Size The size of the element in bytes. public long Size { get; init; } Property Value long Methods ToLine(string) Formats the element in the Manifest line format. public abstract string ToLine(string name) Parameters name string The name of the element. Returns string"
  },
  "api/ZeroInstall.Store.Manifests.ManifestExecutableFile.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestExecutableFile.html",
    "title": "Class ManifestExecutableFile | Zero Install .NET API",
    "summary": "Class ManifestExecutableFile Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll An executable file entry in a Manifest. [Serializable] public sealed record ManifestExecutableFile : ManifestFile, IEquatable<ManifestElement>, IEquatable<ManifestFile>, IEquatable<ManifestExecutableFile> Inheritance object ManifestElement ManifestFile ManifestExecutableFile Implements IEquatable<ManifestElement> IEquatable<ManifestFile> IEquatable<ManifestExecutableFile> Inherited Members ManifestFile.ModifiedTime ManifestElement.Digest ManifestElement.Size object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ManifestExecutableFile(string, UnixTime, long) An executable file entry in a Manifest. public ManifestExecutableFile(string Digest, UnixTime ModifiedTime, long Size) Parameters Digest string The digest of the content of the file calculated using the selected digest algorithm. ModifiedTime UnixTime The time this file was last modified. Size long The size of the file in bytes. Methods ToLine(string) Formats the element in the Manifest line format. public override string ToLine(string name) Parameters name string The name of the element. Returns string"
  },
  "api/ZeroInstall.Store.Manifests.ManifestFile.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestFile.html",
    "title": "Class ManifestFile | Zero Install .NET API",
    "summary": "Class ManifestFile Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll Base class for file entries in a Manifest. [Serializable] public abstract record ManifestFile : ManifestElement, IEquatable<ManifestElement>, IEquatable<ManifestFile> Inheritance object ManifestElement ManifestFile Implements IEquatable<ManifestElement> IEquatable<ManifestFile> Derived ManifestExecutableFile ManifestNormalFile Inherited Members ManifestElement.Digest ManifestElement.Size ManifestElement.ToLine(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManifestFile(string, UnixTime, long) Base class for file entries in a Manifest. protected ManifestFile(string Digest, UnixTime ModifiedTime, long Size) Parameters Digest string The digest of the content of the file calculated using the selected digest algorithm. ModifiedTime UnixTime The time this file was last modified. Size long The size of the file in bytes. Properties ModifiedTime The time this file was last modified. public UnixTime ModifiedTime { get; init; } Property Value UnixTime"
  },
  "api/ZeroInstall.Store.Manifests.ManifestFormat.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestFormat.html",
    "title": "Class ManifestFormat | Zero Install .NET API",
    "summary": "Class ManifestFormat Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll Abstract class to encapsulate the differences between the different formats that can be used to save and load Manifests. [Serializable] public abstract class ManifestFormat Inheritance object ManifestFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Comprises: The digest method used and the format specification used to serialize and deserialize manifests. Fields All All currently supported ManifestFormats listed from best (safest) to worst. public static readonly ManifestFormat[] All Field Value ManifestFormat[] Properties Prefix The prefix used to identify the format (e.g. \"sha256\"). public abstract string Prefix { get; } Property Value string Separator The separator placed between the Prefix and the actual digest. public virtual string Separator { get; } Property Value string Sha1New The ManifestFormat to use for Sha1New. public static ManifestFormat Sha1New { get; } Property Value ManifestFormat Sha256 The ManifestFormat to use for Sha256. public static ManifestFormat Sha256 { get; } Property Value ManifestFormat Sha256New The ManifestFormat to use for Sha256New. public static ManifestFormat Sha256New { get; } Property Value ManifestFormat Methods DigestContent(Stream) Generates the digest of a implementation file as used within the manifest file. public string DigestContent(Stream stream) Parameters stream Stream The content of the implementation file. Returns string A string representation of the digest. DigestManifest(Manifest) Generates the digest of a manifest. public string DigestManifest(Manifest manifest) Parameters manifest Manifest Returns string A string representation of the digest. FromPrefix(string) Selects the correct ManifestFormat based on the digest prefix. public static ManifestFormat FromPrefix(string id) Parameters id string The digest id to extract the prefix from or only the prefix. Returns ManifestFormat Exceptions NotSupportedException id does not have a supported algorithm prefix. GetHashAlgorithm() Retrieves a new instance of the hashing algorithm used for generating digests. protected abstract HashAlgorithm GetHashAlgorithm() Returns HashAlgorithm SerializeContentDigest(byte[]) Serializes a hash as digest of an implementation file as used within the manifest file. protected virtual string SerializeContentDigest(byte[] hash) Parameters hash byte[] Returns string SerializeManifestDigest(byte[]) Serializes a hash as a digest of a manifest file as used for the implementation directory name. protected virtual string SerializeManifestDigest(byte[] hash) Parameters hash byte[] Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/ZeroInstall.Store.Manifests.ManifestNormalFile.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestNormalFile.html",
    "title": "Class ManifestNormalFile | Zero Install .NET API",
    "summary": "Class ManifestNormalFile Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll An non-executable file entry in a Manifest. [Serializable] public sealed record ManifestNormalFile : ManifestFile, IEquatable<ManifestElement>, IEquatable<ManifestFile>, IEquatable<ManifestNormalFile> Inheritance object ManifestElement ManifestFile ManifestNormalFile Implements IEquatable<ManifestElement> IEquatable<ManifestFile> IEquatable<ManifestNormalFile> Inherited Members ManifestFile.ModifiedTime ManifestElement.Digest ManifestElement.Size object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ManifestNormalFile(string, UnixTime, long) An non-executable file entry in a Manifest. public ManifestNormalFile(string Digest, UnixTime ModifiedTime, long Size) Parameters Digest string The digest of the content of the file calculated using the selected digest algorithm. ModifiedTime UnixTime The time this file was last modified. Size long The size of the file in bytes. Methods ToLine(string) Formats the element in the Manifest line format. public override string ToLine(string name) Parameters name string The name of the element. Returns string"
  },
  "api/ZeroInstall.Store.Manifests.ManifestSymlink.html": {
    "href": "api/ZeroInstall.Store.Manifests.ManifestSymlink.html",
    "title": "Class ManifestSymlink | Zero Install .NET API",
    "summary": "Class ManifestSymlink Namespace ZeroInstall.Store.Manifests Assembly ZeroInstall.Store.dll A symlink entry in a Manifest. [Serializable] public sealed record ManifestSymlink : ManifestElement, IEquatable<ManifestElement>, IEquatable<ManifestSymlink> Inheritance object ManifestElement ManifestSymlink Implements IEquatable<ManifestElement> IEquatable<ManifestSymlink> Inherited Members ManifestElement.Digest ManifestElement.Size object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ManifestSymlink(string, long) A symlink entry in a Manifest. public ManifestSymlink(string Digest, long Size) Parameters Digest string The digest of the link target path. Size long The length of the link target path. Methods ToLine(string) Formats the element in the Manifest line format. public override string ToLine(string name) Parameters name string The name of the element. Returns string"
  },
  "api/ZeroInstall.Store.Manifests.html": {
    "href": "api/ZeroInstall.Store.Manifests.html",
    "title": "Namespace ZeroInstall.Store.Manifests | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Manifests Manifests list every file, directory and symlink in the tree to allow for digest/hash calculation. Classes Manifest A manifest lists every directory, file and symlink in a directory and contains a digest of each file's content. ManifestBuilder Builds a Manifest for a file system directory. ManifestElement Base class for directory-element entries (files and symlinks) in a Manifest. ManifestExecutableFile An executable file entry in a Manifest. ManifestFile Base class for file entries in a Manifest. ManifestFormat Abstract class to encapsulate the differences between the different formats that can be used to save and load Manifests. ManifestNormalFile An non-executable file entry in a Manifest. ManifestSymlink A symlink entry in a Manifest."
  },
  "api/ZeroInstall.Store.Trust.BadSignature.html": {
    "href": "api/ZeroInstall.Store.Trust.BadSignature.html",
    "title": "Class BadSignature | Zero Install .NET API",
    "summary": "Class BadSignature Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Represents a bad signature (i.e., the message has been tampered with). public sealed record BadSignature : ErrorSignature, IKeyIDContainer, IEquatable<OpenPgpSignature>, IEquatable<ErrorSignature>, IEquatable<BadSignature> Inheritance object OpenPgpSignature ErrorSignature BadSignature Implements IKeyIDContainer IEquatable<OpenPgpSignature> IEquatable<ErrorSignature> IEquatable<BadSignature> Inherited Members OpenPgpSignature.KeyID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods OpenPgpUtils.FormatKeyID(IKeyIDContainer) Constructors BadSignature(long) Represents a bad signature (i.e., the message has been tampered with). public BadSignature(long KeyID) Parameters KeyID long Methods ToString() Returns the signature information in the form \"BadSignature: KeyID\". Not safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.Trust.BouncyCastle.html": {
    "href": "api/ZeroInstall.Store.Trust.BouncyCastle.html",
    "title": "Class BouncyCastle | Zero Install .NET API",
    "summary": "Class BouncyCastle Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Provides access to the OpenPGP signature functions of Bouncy Castle. public class BouncyCastle : IOpenPgp Inheritance object BouncyCastle Implements IOpenPgp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods OpenPgpExtensions.GetSecretKey(IOpenPgp, string?) OpenPgpExtensions.GetSecretKey(IOpenPgp, IKeyIDContainer) OpenPgpUtils.DeployPublicKey(IOpenPgp, IKeyIDContainer, string) Constructors BouncyCastle(string) Provides access to the OpenPGP signature functions of Bouncy Castle. public BouncyCastle(string homeDir) Parameters homeDir string The GnuPG home dir to use. Methods ExportKey(IKeyIDContainer) Exports the public key for a specific key in the keyring. public string ExportKey(IKeyIDContainer keyIDContainer) Parameters keyIDContainer IKeyIDContainer An object containing the key ID of the public key to export. Returns string The public key in ASCII Armored format. Always uses Unix-style linebreaks. Exceptions KeyNotFoundException The specified keyIDContainer could not be found in the keyring. ImportKey(ArraySegment<byte>) Imports a public key into the keyring. public void ImportKey(ArraySegment<byte> data) Parameters data ArraySegment<byte> The public key in binary or ASCII Armored format. Exceptions InvalidDataException data does not contain a valid public key. ListSecretKeys() Returns a list of secret keys in the keyring. public IEnumerable<OpenPgpSecretKey> ListSecretKeys() Returns IEnumerable<OpenPgpSecretKey> Sign(ArraySegment<byte>, OpenPgpSecretKey, string?) Creates a detached OpenPGP signature using a specific secret key. public byte[] Sign(ArraySegment<byte> data, OpenPgpSecretKey secretKey, string? passphrase = null) Parameters data ArraySegment<byte> The data to sign. secretKey OpenPgpSecretKey The secret key to use for signing. passphrase string The passphrase to use to unlock the secret key. Returns byte[] The signature in binary format. Exceptions KeyNotFoundException The specified secretKey could not be found in the keyring. WrongPassphraseException passphrase was incorrect. Verify(ArraySegment<byte>, byte[]) Verifies a detached OpenPGP signature. public IEnumerable<OpenPgpSignature> Verify(ArraySegment<byte> data, byte[] signature) Parameters data ArraySegment<byte> The data the signature is for. signature byte[] The signature in binary format. Returns IEnumerable<OpenPgpSignature> A list of signatures found, both valid and invalid. MissingKeySignature results indicate you need to use ImportKey(ArraySegment<byte>). Exceptions SignatureException signature does not contain syntactically correct signature data."
  },
  "api/ZeroInstall.Store.Trust.ErrorSignature.html": {
    "href": "api/ZeroInstall.Store.Trust.ErrorSignature.html",
    "title": "Class ErrorSignature | Zero Install .NET API",
    "summary": "Class ErrorSignature Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Represents a signature that could not be validated for some reason. public record ErrorSignature : OpenPgpSignature, IKeyIDContainer, IEquatable<OpenPgpSignature>, IEquatable<ErrorSignature> Inheritance object OpenPgpSignature ErrorSignature Implements IKeyIDContainer IEquatable<OpenPgpSignature> IEquatable<ErrorSignature> Derived BadSignature MissingKeySignature Inherited Members OpenPgpSignature.KeyID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods OpenPgpUtils.FormatKeyID(IKeyIDContainer) Constructors ErrorSignature(long) Represents a signature that could not be validated for some reason. public ErrorSignature(long KeyID) Parameters KeyID long The key ID of the key used to create this signature. Methods ToString() Returns the signature information in the form \"ErrorSignature: KeyID\". Not safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.Trust.GnuPG.html": {
    "href": "api/ZeroInstall.Store.Trust.GnuPG.html",
    "title": "Class GnuPG | Zero Install .NET API",
    "summary": "Class GnuPG Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Provides access to the signature functions of GnuPG. public class GnuPG : IOpenPgp Inheritance object GnuPG Implements IOpenPgp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods OpenPgpExtensions.GetSecretKey(IOpenPgp, string?) OpenPgpExtensions.GetSecretKey(IOpenPgp, IKeyIDContainer) OpenPgpUtils.DeployPublicKey(IOpenPgp, IKeyIDContainer, string) Constructors GnuPG(string) Provides access to the signature functions of GnuPG. public GnuPG(string homeDir) Parameters homeDir string The GnuPG home dir to use. Methods ExportKey(IKeyIDContainer) Exports the public key for a specific key in the keyring. public string ExportKey(IKeyIDContainer keyIDContainer) Parameters keyIDContainer IKeyIDContainer An object containing the key ID of the public key to export. Returns string The public key in ASCII Armored format. Always uses Unix-style linebreaks. Exceptions KeyNotFoundException The specified keyIDContainer could not be found in the keyring. GenerateKey() Launches an interactive process for generating a new keypair. public static Process GenerateKey() Returns Process A handle that can be used to wait for the process to finish. Exceptions IOException The OpenPGP implementation could not be launched. ImportKey(ArraySegment<byte>) Imports a public key into the keyring. public void ImportKey(ArraySegment<byte> data) Parameters data ArraySegment<byte> The public key in binary or ASCII Armored format. Exceptions InvalidDataException data does not contain a valid public key. ListSecretKeys() Returns a list of secret keys in the keyring. public IEnumerable<OpenPgpSecretKey> ListSecretKeys() Returns IEnumerable<OpenPgpSecretKey> Sign(ArraySegment<byte>, OpenPgpSecretKey, string?) Creates a detached OpenPGP signature using a specific secret key. public byte[] Sign(ArraySegment<byte> data, OpenPgpSecretKey secretKey, string? passphrase = null) Parameters data ArraySegment<byte> The data to sign. secretKey OpenPgpSecretKey The secret key to use for signing. passphrase string The passphrase to use to unlock the secret key. Returns byte[] The signature in binary format. Exceptions KeyNotFoundException The specified secretKey could not be found in the keyring. WrongPassphraseException passphrase was incorrect. Verify(ArraySegment<byte>, byte[]) Verifies a detached OpenPGP signature. public IEnumerable<OpenPgpSignature> Verify(ArraySegment<byte> data, byte[] signature) Parameters data ArraySegment<byte> The data the signature is for. signature byte[] The signature in binary format. Returns IEnumerable<OpenPgpSignature> A list of signatures found, both valid and invalid. MissingKeySignature results indicate you need to use ImportKey(ArraySegment<byte>). Exceptions SignatureException signature does not contain syntactically correct signature data."
  },
  "api/ZeroInstall.Store.Trust.IFingerprintContainer.html": {
    "href": "api/ZeroInstall.Store.Trust.IFingerprintContainer.html",
    "title": "Interface IFingerprintContainer | Zero Install .NET API",
    "summary": "Interface IFingerprintContainer Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll An object containing a fingerprint for an IOpenPgp public or private key. public interface IFingerprintContainer : IKeyIDContainer Inherited Members IKeyIDContainer.KeyID Extension Methods OpenPgpUtils.FormatFingerprint(IFingerprintContainer) OpenPgpUtils.FormatKeyID(IKeyIDContainer) Properties Fingerprint An OpenPGP key fingerprint. Superset of KeyID. OpenPgpFingerprint Fingerprint { get; } Property Value OpenPgpFingerprint"
  },
  "api/ZeroInstall.Store.Trust.IKeyIDContainer.html": {
    "href": "api/ZeroInstall.Store.Trust.IKeyIDContainer.html",
    "title": "Interface IKeyIDContainer | Zero Install .NET API",
    "summary": "Interface IKeyIDContainer Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll An object containing a key ID for an IOpenPgp public or private key. public interface IKeyIDContainer Extension Methods OpenPgpUtils.FormatKeyID(IKeyIDContainer) Properties KeyID An OpenPGP key ID. A short identifier for a key. The lower 64 bits of Fingerprint. long KeyID { get; } Property Value long"
  },
  "api/ZeroInstall.Store.Trust.IOpenPgp.html": {
    "href": "api/ZeroInstall.Store.Trust.IOpenPgp.html",
    "title": "Interface IOpenPgp | Zero Install .NET API",
    "summary": "Interface IOpenPgp Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Provides access to an encryption/signature system compatible with the OpenPGP standard. public interface IOpenPgp Extension Methods OpenPgpExtensions.GetSecretKey(IOpenPgp, string?) OpenPgpExtensions.GetSecretKey(IOpenPgp, IKeyIDContainer) OpenPgpUtils.DeployPublicKey(IOpenPgp, IKeyIDContainer, string) Methods ExportKey(IKeyIDContainer) Exports the public key for a specific key in the keyring. string ExportKey(IKeyIDContainer keyIDContainer) Parameters keyIDContainer IKeyIDContainer An object containing the key ID of the public key to export. Returns string The public key in ASCII Armored format. Always uses Unix-style linebreaks. Exceptions KeyNotFoundException The specified keyIDContainer could not be found in the keyring. ImportKey(ArraySegment<byte>) Imports a public key into the keyring. void ImportKey(ArraySegment<byte> data) Parameters data ArraySegment<byte> The public key in binary or ASCII Armored format. Exceptions InvalidDataException data does not contain a valid public key. ListSecretKeys() Returns a list of secret keys in the keyring. IEnumerable<OpenPgpSecretKey> ListSecretKeys() Returns IEnumerable<OpenPgpSecretKey> Sign(ArraySegment<byte>, OpenPgpSecretKey, string?) Creates a detached OpenPGP signature using a specific secret key. byte[] Sign(ArraySegment<byte> data, OpenPgpSecretKey secretKey, string? passphrase = null) Parameters data ArraySegment<byte> The data to sign. secretKey OpenPgpSecretKey The secret key to use for signing. passphrase string The passphrase to use to unlock the secret key. Returns byte[] The signature in binary format. Exceptions KeyNotFoundException The specified secretKey could not be found in the keyring. WrongPassphraseException passphrase was incorrect. Verify(ArraySegment<byte>, byte[]) Verifies a detached OpenPGP signature. IEnumerable<OpenPgpSignature> Verify(ArraySegment<byte> data, byte[] signature) Parameters data ArraySegment<byte> The data the signature is for. signature byte[] The signature in binary format. Returns IEnumerable<OpenPgpSignature> A list of signatures found, both valid and invalid. MissingKeySignature results indicate you need to use ImportKey(ArraySegment<byte>). Exceptions SignatureException signature does not contain syntactically correct signature data."
  },
  "api/ZeroInstall.Store.Trust.MissingKeySignature.html": {
    "href": "api/ZeroInstall.Store.Trust.MissingKeySignature.html",
    "title": "Class MissingKeySignature | Zero Install .NET API",
    "summary": "Class MissingKeySignature Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Represents a signature that could not yet be verified because the key is missing. public sealed record MissingKeySignature : ErrorSignature, IKeyIDContainer, IEquatable<OpenPgpSignature>, IEquatable<ErrorSignature>, IEquatable<MissingKeySignature> Inheritance object OpenPgpSignature ErrorSignature MissingKeySignature Implements IKeyIDContainer IEquatable<OpenPgpSignature> IEquatable<ErrorSignature> IEquatable<MissingKeySignature> Inherited Members OpenPgpSignature.KeyID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods OpenPgpUtils.FormatKeyID(IKeyIDContainer) Constructors MissingKeySignature(long) Represents a signature that could not yet be verified because the key is missing. public MissingKeySignature(long KeyID) Parameters KeyID long The key ID of the key used to create this signature. Methods ToString() Returns the signature information in the form \"MissingKeySignature: KeyID\". Not safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.Trust.OpenPgp.html": {
    "href": "api/ZeroInstall.Store.Trust.OpenPgp.html",
    "title": "Class OpenPgp | Zero Install .NET API",
    "summary": "Class OpenPgp Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Provides IOpenPgp instances. public static class OpenPgp Inheritance object OpenPgp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SigningHomeDir The directory containing key rings used for creating signatures. public static string SigningHomeDir { get; } Property Value string Remarks This matches the normal GnuPG home directory. VerifyingHomeDir The directory containing key rings used for verifying signatures. public static string VerifyingHomeDir { get; } Property Value string Remarks This is different from the normal GnuPG home directory to avoid polluting user profile with auto-imported public keys. Methods Signing() Creates an instance of IOpenPgp intended for creating signatures. public static IOpenPgp Signing() Returns IOpenPgp Verifying() Creates an instance of IOpenPgp intended for verifying signatures. public static IOpenPgp Verifying() Returns IOpenPgp"
  },
  "api/ZeroInstall.Store.Trust.OpenPgpExtensions.html": {
    "href": "api/ZeroInstall.Store.Trust.OpenPgpExtensions.html",
    "title": "Class OpenPgpExtensions | Zero Install .NET API",
    "summary": "Class OpenPgpExtensions Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Provides extension methods for IOpenPgp implementations. public static class OpenPgpExtensions Inheritance object OpenPgpExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSecretKey(IOpenPgp, string?) Returns a specific secret key in the keyring. public static OpenPgpSecretKey GetSecretKey(this IOpenPgp openPgp, string? keySpecifier = null) Parameters openPgp IOpenPgp The IOpenPgp implementation. keySpecifier string The key ID, fingerprint or any part of a user ID that identifies the keypair; null to use the default key. Returns OpenPgpSecretKey Exceptions KeyNotFoundException The specified key could not be found on the system. GetSecretKey(IOpenPgp, IKeyIDContainer) Returns a specific secret key in the keyring. public static OpenPgpSecretKey GetSecretKey(this IOpenPgp openPgp, IKeyIDContainer keyIDContainer) Parameters openPgp IOpenPgp The IOpenPgp implementation. keyIDContainer IKeyIDContainer An object containing the key ID that identifies the keypair. Returns OpenPgpSecretKey Exceptions KeyNotFoundException The specified key could not be found on the system."
  },
  "api/ZeroInstall.Store.Trust.OpenPgpFingerprint.html": {
    "href": "api/ZeroInstall.Store.Trust.OpenPgpFingerprint.html",
    "title": "Class OpenPgpFingerprint | Zero Install .NET API",
    "summary": "Class OpenPgpFingerprint Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll An OpenPGP key fingerprint. [Equatable] public record OpenPgpFingerprint : IEquatable<OpenPgpFingerprint> Inheritance object OpenPgpFingerprint Implements IEquatable<OpenPgpFingerprint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpenPgpFingerprint(byte[]) An OpenPGP key fingerprint. public OpenPgpFingerprint(byte[] Identifier) Parameters Identifier byte[] A long identifier for an OpenPGP key. Properties Identifier A long identifier for an OpenPGP key. [OrderedEquality] public byte[] Identifier { get; init; } Property Value byte[] Methods Equals(OpenPgpFingerprint?) Indicates whether the current object is equal to another object of the same type. public virtual bool Equals(OpenPgpFingerprint? other) Parameters other OpenPgpFingerprint An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators implicit operator byte[](OpenPgpFingerprint) public static implicit operator byte[](OpenPgpFingerprint fingerprint) Parameters fingerprint OpenPgpFingerprint Returns byte[]"
  },
  "api/ZeroInstall.Store.Trust.OpenPgpSecretKey.html": {
    "href": "api/ZeroInstall.Store.Trust.OpenPgpSecretKey.html",
    "title": "Class OpenPgpSecretKey | Zero Install .NET API",
    "summary": "Class OpenPgpSecretKey Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Represents a secret key stored in a local IOpenPgp profile. public sealed record OpenPgpSecretKey : IFingerprintContainer, IKeyIDContainer, IEquatable<OpenPgpSecretKey> Inheritance object OpenPgpSecretKey Implements IFingerprintContainer IKeyIDContainer IEquatable<OpenPgpSecretKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods OpenPgpUtils.FormatFingerprint(IFingerprintContainer) OpenPgpUtils.FormatKeyID(IKeyIDContainer) Constructors OpenPgpSecretKey(long, OpenPgpFingerprint, string) Represents a secret key stored in a local IOpenPgp profile. public OpenPgpSecretKey(long KeyID, OpenPgpFingerprint Fingerprint, string UserID) Parameters KeyID long The key ID of the key. Fingerprint OpenPgpFingerprint The fingerprint of the key. UserID string The user's name, e-mail address, etc. of the key owner. Properties Fingerprint The fingerprint of the key. public OpenPgpFingerprint Fingerprint { get; init; } Property Value OpenPgpFingerprint KeyID The key ID of the key. public long KeyID { get; init; } Property Value long UserID The user's name, e-mail address, etc. of the key owner. public string UserID { get; init; } Property Value string Methods ToString() Returns the secret key in the form \"UserID\". Not safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.Trust.OpenPgpSignature.html": {
    "href": "api/ZeroInstall.Store.Trust.OpenPgpSignature.html",
    "title": "Class OpenPgpSignature | Zero Install .NET API",
    "summary": "Class OpenPgpSignature Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Represents a signature checked by an IOpenPgp implementation. public abstract record OpenPgpSignature : IKeyIDContainer, IEquatable<OpenPgpSignature> Inheritance object OpenPgpSignature Implements IKeyIDContainer IEquatable<OpenPgpSignature> Derived ErrorSignature ValidSignature Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods OpenPgpUtils.FormatKeyID(IKeyIDContainer) Constructors OpenPgpSignature(long) Represents a signature checked by an IOpenPgp implementation. protected OpenPgpSignature(long KeyID) Parameters KeyID long Properties KeyID An OpenPGP key ID. A short identifier for a key. The lower 64 bits of Fingerprint. public long KeyID { get; init; } Property Value long"
  },
  "api/ZeroInstall.Store.Trust.OpenPgpUtils.html": {
    "href": "api/ZeroInstall.Store.Trust.OpenPgpUtils.html",
    "title": "Class OpenPgpUtils | Zero Install .NET API",
    "summary": "Class OpenPgpUtils Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Helper methods for IKeyIDContainer and IFingerprintContainer. public static class OpenPgpUtils Inheritance object OpenPgpUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeployPublicKey(IOpenPgp, IKeyIDContainer, string) Exports an OpenPGP public key to a key file. public static void DeployPublicKey(this IOpenPgp openPgp, IKeyIDContainer keyID, string path) Parameters openPgp IOpenPgp The OpenPGP-compatible system used to manage keys. keyID IKeyIDContainer The key ID to get the public key for. path string The directory to write the key file to. Exceptions UnauthorizedAccessException The file could not be read or written. UnauthorizedAccessException Write access to the directory is not permitted. IOException The specified keyID could not be found on the system. FormatFingerprint(IFingerprintContainer) Formats a key fingerprint as a canonical string. public static string FormatFingerprint(this IFingerprintContainer fingerprintContainer) Parameters fingerprintContainer IFingerprintContainer Returns string FormatKeyID(IKeyIDContainer) Formats a key ID as a canonical string. public static string FormatKeyID(this IKeyIDContainer keyIDContainer) Parameters keyIDContainer IKeyIDContainer Returns string"
  },
  "api/ZeroInstall.Store.Trust.SignatureException.html": {
    "href": "api/ZeroInstall.Store.Trust.SignatureException.html",
    "title": "Class SignatureException | Zero Install .NET API",
    "summary": "Class SignatureException Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Indicates the IOpenPgp implementation detected a problem with a digital signature. public sealed class SignatureException : Exception, ISerializable Inheritance object Exception SignatureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors SignatureException() Initializes a new instance of the Exception class. public SignatureException() SignatureException(string) Initializes a new instance of the Exception class with a specified error message. public SignatureException(string message) Parameters message string The message that describes the error. SignatureException(string, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. public SignatureException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/ZeroInstall.Store.Trust.ValidSignature.html": {
    "href": "api/ZeroInstall.Store.Trust.ValidSignature.html",
    "title": "Class ValidSignature | Zero Install .NET API",
    "summary": "Class ValidSignature Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Represents a valid signature. public sealed record ValidSignature : OpenPgpSignature, IEquatable<OpenPgpSignature>, IFingerprintContainer, IKeyIDContainer, IEquatable<ValidSignature> Inheritance object OpenPgpSignature ValidSignature Implements IEquatable<OpenPgpSignature> IFingerprintContainer IKeyIDContainer IEquatable<ValidSignature> Inherited Members OpenPgpSignature.KeyID object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods OpenPgpUtils.FormatFingerprint(IFingerprintContainer) OpenPgpUtils.FormatKeyID(IKeyIDContainer) Constructors ValidSignature(long, OpenPgpFingerprint, DateTime) Represents a valid signature. public ValidSignature(long KeyID, OpenPgpFingerprint Fingerprint, DateTime Timestamp) Parameters KeyID long The key ID of the key used to create this signature. Fingerprint OpenPgpFingerprint The fingerprint of the key used to create this signature. Timestamp DateTime The point in time when the signature was created in UTC. Properties Fingerprint The fingerprint of the key used to create this signature. public OpenPgpFingerprint Fingerprint { get; init; } Property Value OpenPgpFingerprint Timestamp The point in time when the signature was created in UTC. public DateTime Timestamp { get; init; } Property Value DateTime Methods ToString() Returns the signature information in the form \"ValidSignature: Fingerprint (Timestamp)\". Not safe for parsing! public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.Trust.WrongPassphraseException.html": {
    "href": "api/ZeroInstall.Store.Trust.WrongPassphraseException.html",
    "title": "Class WrongPassphraseException | Zero Install .NET API",
    "summary": "Class WrongPassphraseException Namespace ZeroInstall.Store.Trust Assembly ZeroInstall.Store.dll Indicates that an incorrect passphrase was passed to GnuPG. public sealed class WrongPassphraseException : Exception, ISerializable Inheritance object Exception WrongPassphraseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors WrongPassphraseException() Indicates that an incorrect passphrase was passed to GnuPG. public WrongPassphraseException() WrongPassphraseException(string) Initializes a new instance of the Exception class with a specified error message. public WrongPassphraseException(string message) Parameters message string The message that describes the error. WrongPassphraseException(string, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. public WrongPassphraseException(string message, Exception innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/ZeroInstall.Store.Trust.html": {
    "href": "api/ZeroInstall.Store.Trust.html",
    "title": "Namespace ZeroInstall.Store.Trust | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.Trust Structures and logic for OpenPGP signatures and trust (which domains the user associates with which signatures). Classes BadSignature Represents a bad signature (i.e., the message has been tampered with). BouncyCastle Provides access to the OpenPGP signature functions of Bouncy Castle. ErrorSignature Represents a signature that could not be validated for some reason. GnuPG Provides access to the signature functions of GnuPG. MissingKeySignature Represents a signature that could not yet be verified because the key is missing. OpenPgp Provides IOpenPgp instances. OpenPgpExtensions Provides extension methods for IOpenPgp implementations. OpenPgpFingerprint An OpenPGP key fingerprint. OpenPgpSecretKey Represents a secret key stored in a local IOpenPgp profile. OpenPgpSignature Represents a signature checked by an IOpenPgp implementation. OpenPgpUtils Helper methods for IKeyIDContainer and IFingerprintContainer. SignatureException Indicates the IOpenPgp implementation detected a problem with a digital signature. ValidSignature Represents a valid signature. WrongPassphraseException Indicates that an incorrect passphrase was passed to GnuPG. Interfaces IFingerprintContainer An object containing a fingerprint for an IOpenPgp public or private key. IKeyIDContainer An object containing a key ID for an IOpenPgp public or private key. IOpenPgp Provides access to an encryption/signature system compatible with the OpenPGP standard."
  },
  "api/ZeroInstall.Store.ViewModel.CacheNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.CacheNode.html",
    "title": "Class CacheNode | Zero Install .NET API",
    "summary": "Class CacheNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models information about elements in a cache for display in a UI. public abstract class CacheNode : INamed, IEquatable<CacheNode> Inheritance object CacheNode Implements INamed IEquatable<CacheNode> Derived FeedNode ImplementationNode TempDirectoryNode Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CacheNode(string, long) Models information about elements in a cache for display in a UI. protected CacheNode(string path, long size) Parameters path string The path of the directory. size long The total size of the directory in bytes. Properties Name The full name of the node used for tree hierarchies. [Browsable(false)] public abstract string Name { get; set; } Property Value string Path The path of the directory. public string Path { get; } Property Value string Size The total size of the directory in bytes. [Browsable(false)] public long Size { get; } Property Value long SizeHuman The total size of the directory in human-readable form. public string SizeHuman { get; } Property Value string SuffixCounter A counter that can be used to prevent naming collisions. [Browsable(false)] public int SuffixCounter { get; } Property Value int Remarks If this value is not zero it is appended to the Name. Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(CacheNode?) Indicates whether the current object is equal to another object of the same type. public abstract bool Equals(CacheNode? other) Parameters other CacheNode An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Remove(IFeedCache?, IImplementationStore?) Removes this element from the cache it is stored in. public abstract void Remove(IFeedCache? feedCache = null, IImplementationStore? implementationStore = null) Parameters feedCache IFeedCache implementationStore IImplementationStore Exceptions OperationCanceledException The user canceled the task. KeyNotFoundException No matching element could be found in the cache. IOException The element could not be deleted. UnauthorizedAccessException Write access to the cache is not permitted. ToString() Creates string representation suitable for console output. public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.ViewModel.CacheNodeBuilder.html": {
    "href": "api/ZeroInstall.Store.ViewModel.CacheNodeBuilder.html",
    "title": "Class CacheNodeBuilder | Zero Install .NET API",
    "summary": "Class CacheNodeBuilder Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Builds CacheNodes for Feeds and Implementations. public sealed class CacheNodeBuilder Inheritance object CacheNodeBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CacheNodeBuilder(ITaskHandler, IFeedCache, IImplementationStore?) Creates a new cache node builder. public CacheNodeBuilder(ITaskHandler handler, IFeedCache feedCache, IImplementationStore? implementationStore = null) Parameters handler ITaskHandler A callback object used when the user needs to be informed about IO tasks. feedCache IFeedCache Used to get local feed files. implementationStore IImplementationStore Used to get cached implementations. Leave unset to only list feeds. Methods Build() Builds a list of CacheNodes for Feeds and Implementations. public NamedCollection<CacheNode> Build() Returns NamedCollection<CacheNode> Exceptions IOException A problem occurred while reading from a cache. UnauthorizedAccessException Read access to a cache is not permitted."
  },
  "api/ZeroInstall.Store.ViewModel.FeedNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.FeedNode.html",
    "title": "Class FeedNode | Zero Install .NET API",
    "summary": "Class FeedNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models information about a Feed in the IFeedCache for display in a UI. public sealed class FeedNode : CacheNode, INamed, IEquatable<CacheNode> Inheritance object CacheNode FeedNode Implements INamed IEquatable<CacheNode> Inherited Members CacheNode.SuffixCounter CacheNode.Path CacheNode.Size CacheNode.SizeHuman CacheNode.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FeedNode(string, Feed) Creates a new feed node. public FeedNode(string path, Feed feed) Parameters path string The path of the directory. feed Feed The parsed feed. Exceptions IOException The feed file could not be read. UnauthorizedAccessException Read access to the feed file is not permitted. Properties Categories A comma-separated list of categories the applications fits into. public string Categories { get; } Property Value string Feed The parsed feed. [Browsable(false)] public Feed Feed { get; } Property Value Feed Homepage The main website of the application. public Uri? Homepage { get; } Property Value Uri Name The full name of the node used for tree hierarchies. public override string Name { get; set; } Property Value string Summary A short one-line description of the application. public string? Summary { get; } Property Value string Uri The URI identifying this feed. public FeedUri Uri { get; } Property Value FeedUri Methods Equals(CacheNode?) Indicates whether the current object is equal to another object of the same type. public override bool Equals(CacheNode? other) Parameters other CacheNode An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Remove(IFeedCache?, IImplementationStore?) Removes this Feed from the feedCache if provided. public override void Remove(IFeedCache? feedCache = null, IImplementationStore? implementationStore = null) Parameters feedCache IFeedCache implementationStore IImplementationStore Exceptions KeyNotFoundException No matching feed could be found in the IFeedCache. IOException The feed could not be deleted. UnauthorizedAccessException Write access to the cache is not permitted. ToString() Creates string representation suitable for console output. public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.ViewModel.ImplementationNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.ImplementationNode.html",
    "title": "Class ImplementationNode | Zero Install .NET API",
    "summary": "Class ImplementationNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models information about an implementation in an IImplementationStore for display in a UI. public class ImplementationNode : CacheNode, INamed, IEquatable<CacheNode> Inheritance object CacheNode ImplementationNode Implements INamed IEquatable<CacheNode> Derived OwnedImplementationNode Inherited Members CacheNode.SuffixCounter CacheNode.Path CacheNode.Size CacheNode.SizeHuman CacheNode.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ImplementationNode(string, ManifestDigest) Creates a new implementation node. public ImplementationNode(string path, ManifestDigest digest) Parameters path string The path of the directory. digest ManifestDigest The digest identifying the implementation. Exceptions IOException The manifest file could not be read. UnauthorizedAccessException Read access to the manifest file is not permitted. FormatException The manifest file is not valid. Properties Digest The digest identifying the implementation in the store. public string? Digest { get; } Property Value string FeedUri The URI of the feed describing the implementation. public virtual FeedUri? FeedUri { get; } Property Value FeedUri Name The full name of the node used for tree hierarchies. public override string Name { get; set; } Property Value string Methods Equals(CacheNode?) Indicates whether the current object is equal to another object of the same type. public override bool Equals(CacheNode? other) Parameters other CacheNode An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Remove(IFeedCache?, IImplementationStore?) Removes this implementation from the implementationStore if provided. public override void Remove(IFeedCache? feedCache = null, IImplementationStore? implementationStore = null) Parameters feedCache IFeedCache implementationStore IImplementationStore Exceptions KeyNotFoundException No matching implementation could be found in the IImplementationStore. IOException The implementation could not be deleted. UnauthorizedAccessException Write access to the store is not permitted. ToString() Creates string representation suitable for console output. public override string ToString() Returns string Verify(IImplementationStore) Verify this implementation is undamaged. public void Verify(IImplementationStore implementationStore) Parameters implementationStore IImplementationStore Exceptions OperationCanceledException The user canceled the task. IOException The entry's directory could not be processed. UnauthorizedAccessException Read access to the entry's directory is not permitted."
  },
  "api/ZeroInstall.Store.ViewModel.OwnedImplementationNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.OwnedImplementationNode.html",
    "title": "Class OwnedImplementationNode | Zero Install .NET API",
    "summary": "Class OwnedImplementationNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models information about an implementation in an IImplementationStore with a known owning interface for display in a UI. public sealed class OwnedImplementationNode : ImplementationNode, INamed, IEquatable<CacheNode> Inheritance object CacheNode ImplementationNode OwnedImplementationNode Implements INamed IEquatable<CacheNode> Inherited Members ImplementationNode.Digest ImplementationNode.Remove(IFeedCache, IImplementationStore) ImplementationNode.Verify(IImplementationStore) ImplementationNode.Equals(CacheNode) ImplementationNode.GetHashCode() CacheNode.SuffixCounter CacheNode.Path CacheNode.Size CacheNode.SizeHuman CacheNode.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OwnedImplementationNode(string, Implementation, FeedNode) Creates a new owned implementation node. public OwnedImplementationNode(string path, Implementation implementation, FeedNode parent) Parameters path string The path of the directory. implementation Implementation Information about the implementation from a Feed file. parent FeedNode The node of the feed owning the implementation. Exceptions IOException The manifest file could not be read. UnauthorizedAccessException Read access to the manifest file is not permitted. FormatException The manifest file is not valid. Properties Architecture The version number of the implementation. [TypeConverter(typeof(StringConstructorConverter<Architecture>))] public Architecture Architecture { get; } Property Value Architecture FeedUri The URI of the feed describing the implementation. public override FeedUri FeedUri { get; } Property Value FeedUri ID A unique identifier for the implementation. Used when storing implementation-specific user preferences. public string ID { get; } Property Value string Name The full name of the node used for tree hierarchies. public override string Name { get; set; } Property Value string Version The version number of the implementation. public ImplementationVersion Version { get; } Property Value ImplementationVersion Methods ToString() Creates string representation suitable for console output. public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.ViewModel.SelectionsDiffNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.SelectionsDiffNode.html",
    "title": "Class SelectionsDiffNode | Zero Install .NET API",
    "summary": "Class SelectionsDiffNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models an implementation change between two Selections documents for display in a UI. [Equatable] public sealed class SelectionsDiffNode : IEquatable<SelectionsDiffNode> Inheritance object SelectionsDiffNode Implements IEquatable<SelectionsDiffNode> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SelectionsDiffNode(FeedUri, ImplementationVersion?, ImplementationVersion?) Creates a new selection diff. public SelectionsDiffNode(FeedUri uri, ImplementationVersion? oldVersion = null, ImplementationVersion? newVersion = null) Parameters uri FeedUri The interface URI of the changed implementation. oldVersion ImplementationVersion The old version of the implementation; null if the implementation did not exist in the old selection. newVersion ImplementationVersion The new version of the implementation; null if the implementation does not exist in the new selection. Properties NewVersion The new version of the implementation; null if the implementation does not exist in the new selection. public ImplementationVersion? NewVersion { get; } Property Value ImplementationVersion OldVersion The old version of the implementation; null if the implementation did not exist in the old selection. public ImplementationVersion? OldVersion { get; } Property Value ImplementationVersion Uri The interface URI of the changed implementation. public FeedUri Uri { get; } Property Value FeedUri Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(SelectionsDiffNode?, SelectionsDiffNode?) Indicates whether the object on the left is equal to the object on the right. public static bool operator ==(SelectionsDiffNode? left, SelectionsDiffNode? right) Parameters left SelectionsDiffNode The left object right SelectionsDiffNode The right object Returns bool true if the objects are equal; otherwise, false. operator !=(SelectionsDiffNode?, SelectionsDiffNode?) Indicates whether the object on the left is not equal to the object on the right. public static bool operator !=(SelectionsDiffNode? left, SelectionsDiffNode? right) Parameters left SelectionsDiffNode The left object right SelectionsDiffNode The right object Returns bool true if the objects are not equal; otherwise, false."
  },
  "api/ZeroInstall.Store.ViewModel.SelectionsTreeNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.SelectionsTreeNode.html",
    "title": "Class SelectionsTreeNode | Zero Install .NET API",
    "summary": "Class SelectionsTreeNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models an ImplementationSelection element of a Selections document for display in a tree-like UI. public sealed record SelectionsTreeNode : INamed, IEquatable<SelectionsTreeNode> Inheritance object SelectionsTreeNode Implements INamed IEquatable<SelectionsTreeNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Constructors SelectionsTreeNode(FeedUri, ImplementationVersion?, string?, SelectionsTreeNode?) Models an ImplementationSelection element of a Selections document for display in a tree-like UI. public SelectionsTreeNode(FeedUri Uri, ImplementationVersion? Version, string? Path, SelectionsTreeNode? Parent) Parameters Uri FeedUri The feed URI of the selected implementation. Version ImplementationVersion The version of the selected implementation. null for a missing selection. Path string The local path of the cached implementation. null for an uncached implementation. Parent SelectionsTreeNode The parent node containing this one. null for root node. Properties Name The full name of the node used for tree hierarchies. [Browsable(false)] public string Name { get; set; } Property Value string Parent The parent node containing this one. null for root node. [Browsable(false)] public SelectionsTreeNode? Parent { get; init; } Property Value SelectionsTreeNode Path The local path of the cached implementation. null for an uncached implementation. public string? Path { get; init; } Property Value string Uri The feed URI of the selected implementation. public FeedUri Uri { get; init; } Property Value FeedUri Version The version of the selected implementation. null for a missing selection. public ImplementationVersion? Version { get; init; } Property Value ImplementationVersion Methods ToString() Creates string representation suitable for console output. public override string ToString() Returns string"
  },
  "api/ZeroInstall.Store.ViewModel.TempDirectoryNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.TempDirectoryNode.html",
    "title": "Class TempDirectoryNode | Zero Install .NET API",
    "summary": "Class TempDirectoryNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Models information about a temporary directory in an IImplementationStore for display in a UI. public sealed class TempDirectoryNode : CacheNode, INamed, IEquatable<CacheNode> Inheritance object CacheNode TempDirectoryNode Implements INamed IEquatable<CacheNode> Inherited Members CacheNode.SuffixCounter CacheNode.Path CacheNode.Size CacheNode.SizeHuman CacheNode.Equals(object) CacheNode.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TempDirectoryNode(string) Models information about a temporary directory in an IImplementationStore for display in a UI. public TempDirectoryNode(string path) Parameters path string The path of the directory. Exceptions IOException The directory could not be inspected. UnauthorizedAccessException Read access to the directory is not permitted. Properties Name The full name of the node used for tree hierarchies. public override string Name { get; set; } Property Value string Exceptions IOException The directory could not be inspected. UnauthorizedAccessException Read access to the directory is not permitted. Methods Equals(CacheNode?) Indicates whether the current object is equal to another object of the same type. public override bool Equals(CacheNode? other) Parameters other CacheNode An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Exceptions IOException The directory could not be inspected. UnauthorizedAccessException Read access to the directory is not permitted. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Exceptions IOException The directory could not be inspected. UnauthorizedAccessException Read access to the directory is not permitted. Remove(IFeedCache?, IImplementationStore?) Removes this temporary directory from the implementationStore if provided. public override void Remove(IFeedCache? feedCache = null, IImplementationStore? implementationStore = null) Parameters feedCache IFeedCache implementationStore IImplementationStore Exceptions DirectoryNotFoundException The directory could be found in the store. IOException The directory could not be deleted. UnauthorizedAccessException Write access to the store is not permitted."
  },
  "api/ZeroInstall.Store.ViewModel.TrustNode.html": {
    "href": "api/ZeroInstall.Store.ViewModel.TrustNode.html",
    "title": "Class TrustNode | Zero Install .NET API",
    "summary": "Class TrustNode Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Represents a Key-Domain pair in a TrustDB for display in a UI. public sealed record TrustNode : INamed, IEquatable<TrustNode> Inheritance object TrustNode Implements INamed IEquatable<TrustNode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TrustNode(string, Domain) Represents a Key-Domain pair in a TrustDB for display in a UI. public TrustNode(string Fingerprint, Domain Domain) Parameters Fingerprint string The Fingerprint. Domain Domain The domain the fingerprint is valid for. Properties Domain The domain the fingerprint is valid for. public Domain Domain { get; init; } Property Value Domain Fingerprint The Fingerprint. public string Fingerprint { get; init; } Property Value string Name The full name of the node used for tree hierarchies. [Browsable(false)] public string Name { get; set; } Property Value string"
  },
  "api/ZeroInstall.Store.ViewModel.TrustNodeExtensions.html": {
    "href": "api/ZeroInstall.Store.ViewModel.TrustNodeExtensions.html",
    "title": "Class TrustNodeExtensions | Zero Install .NET API",
    "summary": "Class TrustNodeExtensions Namespace ZeroInstall.Store.ViewModel Assembly ZeroInstall.Store.dll Maps between TrustDB and TrustNodes. public static class TrustNodeExtensions Inheritance object TrustNodeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNodes(TrustDB) Creates TrustNode representations for all entries in a TrustDB. public static NamedCollection<TrustNode> ToNodes(this TrustDB trustDB) Parameters trustDB TrustDB Returns NamedCollection<TrustNode> ToTrustDB(IEnumerable<TrustNode>) Creates a TrustDB from TrustNodes. public static TrustDB ToTrustDB(this IEnumerable<TrustNode> nodes) Parameters nodes IEnumerable<TrustNode> Returns TrustDB"
  },
  "api/ZeroInstall.Store.ViewModel.html": {
    "href": "api/ZeroInstall.Store.ViewModel.html",
    "title": "Namespace ZeroInstall.Store.ViewModel | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store.ViewModel Models information about configuration and cache elements for display in a UI. Classes CacheNode Models information about elements in a cache for display in a UI. CacheNodeBuilder Builds CacheNodes for Feeds and Implementations. FeedNode Models information about a Feed in the IFeedCache for display in a UI. ImplementationNode Models information about an implementation in an IImplementationStore for display in a UI. OwnedImplementationNode Models information about an implementation in an IImplementationStore with a known owning interface for display in a UI. SelectionsDiffNode Models an implementation change between two Selections documents for display in a UI. SelectionsTreeNode Models an ImplementationSelection element of a Selections document for display in a tree-like UI. TempDirectoryNode Models information about a temporary directory in an IImplementationStore for display in a UI. TrustNode Represents a Key-Domain pair in a TrustDB for display in a UI. TrustNodeExtensions Maps between TrustDB and TrustNodes."
  },
  "api/ZeroInstall.Store.html": {
    "href": "api/ZeroInstall.Store.html",
    "title": "Namespace ZeroInstall.Store | Zero Install .NET API",
    "summary": "Namespace ZeroInstall.Store Management of implementation caches, digital signatures, etc.. NuGet package: ZeroInstall.Store Namespaces ZeroInstall.Store.Configuration User settings controlling network behaviour, solving, etc.. ZeroInstall.Store.Deployment Deploying implementations to locations outside an implementation cache; mainly used to deploy Zero Install itself. ZeroInstall.Store.Feeds Caches for feeds. ZeroInstall.Store.FileSystem Interfaces and methods for building and reading File system structures. ZeroInstall.Store.Icons Stores icon files downloaded from the web as local files. ZeroInstall.Store.Implementations On-disk storage for implementations, i.e. implementation caches. ZeroInstall.Store.Manifests Manifests list every file, directory and symlink in the tree to allow for digest/hash calculation. ZeroInstall.Store.Trust Structures and logic for OpenPGP signatures and trust (which domains the user associates with which signatures). ZeroInstall.Store.ViewModel Models information about configuration and cache elements for display in a UI. Classes ManagerBase Common base class for managers that need an ITaskHandler and Mutex-based locking."
  },
  "api/ZeroInstall.html": {
    "href": "api/ZeroInstall.html",
    "title": "Namespace ZeroInstall | Zero Install .NET API",
    "summary": "Namespace ZeroInstall Namespaces ZeroInstall.Archives Extracting and building archives (.zip, .tar, etc.). NuGet package: ZeroInstall.Archives ZeroInstall.Client Client library for invoking Zero Install commands from within other applications. NuGet package: ZeroInstall.Client ZeroInstall.Commands Command-line interface for Zero Install. Both an actual CLI and a library for building other clients. NuGet package: ZeroInstall.Commands ZeroInstall.DesktopIntegration Integrating applications with desktop environments (creating menu entries, etc.). NuGet package: ZeroInstall.DesktopIntegration ZeroInstall.Model Data model for the Zero Install feed format. NuGet package: ZeroInstall.Model ZeroInstall.Publish Utilities for creating and modifying feed files. NuGet package: ZeroInstall.Publish ZeroInstall.Services Services for solving dependencies, downloading implementations, executing apps, etc.. NuGet package: ZeroInstall.Services ZeroInstall.Store Management of implementation caches, digital signatures, etc.. NuGet package: ZeroInstall.Store"
  },
  "cli.html": {
    "href": "cli.html",
    "title": "Command-line interface | Zero Install .NET API",
    "summary": "Command-line interface The ZeroInstall.Commands namespace provides a command-line interface for Zero Install. This both implements an actual command-line executable and provides a library for building other clients. Processing arguments ProgramUtils.Init() should be called by all clients right after startup to initialize process-wide state. Afterwards ProgramUtils.Run() can be called with the command-line arguments to be parsed along with an ICommandHandler. ICommandHandler extends the ITaskHandler interface with various UI interactions that commands can use to display intermediate results, ask for user input, etc.. ProgramUtils.Run() parses the provided command-line arguments and selects the appropriate CliCommand to handle them. Inheritance hierarchy Each command (e.g., 0install run) is represented by a class derived from CliCommand (e.g., Run). CliCommand derives from ScopedOperation. This provides a more basic starting point, for any operation that requires scoped dependency resolution. It provides this by itself deriving from ServiceProvider."
  },
  "client.html": {
    "href": "client.html",
    "title": "Client library | Zero Install .NET API",
    "summary": "Client library The ZeroInstall.Client namespace allows you to invoke Zero Install commands from within other applications. Use Detect to automatically discover the locations of the 0install and/or 0install-win executables. This gives you an instance of IZeroInstallClient, which enables easy programmatic access to a subset of the Command-line interface. Samples Detect 0install location and the feed URI used to launch the app: var zeroInstall = ZeroInstallClient.Detect; var feedUri = ZeroInstallEnvironment.FeedUri ?? new FeedUri(\"https://example.com/your-feed.xml\"); Download updates if available: if (await zeroInstall.UpdateAsync(feedUri)) NotifyUpdateAvailable(); Restart the app to run the latest version: zeroInstall.Run(feedUri); Environment.Exit(0); Toggle the app's auto start desktop integration: bool isAutoStartEnabled = (await zeroInstall.GetIntegrationAsync(feedUri)).Contains(\"auto-start\"); if (isAutoStartEnabled) await zeroInstall.IntegrateAsync(feedUri, remove: new[] {\"auto-start\"}); else await zeroInstall.IntegrateAsync(feedUri, add: new[] {\"auto-start\"}); Error handling The client library maps 0install's exit codes to exceptions. Your code should be ready to catch: IOException: 0install could not be launched or there was a problem accessing the filesystem. WebException: There was a problem downloading a file. OperationCanceledException: The user canceled the operation. ExitCodeException: Any other kind of error."
  },
  "file-system.html": {
    "href": "file-system.html",
    "title": "File system | Zero Install .NET API",
    "summary": "File system The ZeroInstall.Store.FileSystem namespace provides interfaces and methods for building and reading file system structures. The IBuilder interface represents a implementation directory being constructed. IForwardOnlyBuilder is a more limited subset, that only allows the addition of files but not the modification of files that have already been added. There are various implementations of IBuilder: DirectoryBuilder for creating a real on-disk directory ManifestBuilder for calculating an in-memory manifest of the directory ZeroInstall.Archives.Builders for creating archives (.zip, .tar, etc.) Implementation store When adding an implementation to an IImplementationStore the caller is provided an IBuilder via a callback: store.Add(manifestDigest, builder => { builder.AddFile(...); builder.AddFile(...); }); This allows the implementation store to control how and where the implementation gets constructed (usually via a composite of a DirectoryBuilder and a ManifestBuilder). Retrieval methods BuilderExtensions and BuilderExtensions provide extension methods for applying RetrievalMethods to an IBuilder. These methods internally pass the IBuilder to ReadDirectory, ZeroInstall.Archives.Extractors, etc.."
  },
  "index.html": {
    "href": "index.html",
    "title": "Overview | Zero Install .NET API",
    "summary": "Zero Install .NET API Zero Install is a decentralized cross-platform software installation system. You can learn more at 0install.net. This website documents the Zero Install .NET API. You can use this to integrate Zero Install features into your own application. NuGet packages Package Namespace Description ZeroInstall.Model ZeroInstall.Model Data model for the Zero Install feed format. ZeroInstall.Client ZeroInstall.Client Client library for invoking Zero Install commands from within other applications. ZeroInstall.Store ZeroInstall.Store Management of implementation caches, digital signatures, etc.. ZeroInstall.Archives ZeroInstall.Archives Extracting and building archives (.zip, .tar, etc.). ZeroInstall.Services ZeroInstall.Services Services for solving dependencies, downloading implementations, executing apps, etc.. ZeroInstall.DesktopIntegration ZeroInstall.DesktopIntegration Integrating applications with desktop environments (creating menu entries, etc.). ZeroInstall.Commands ZeroInstall.Commands Command-line interface for Zero Install. The binary in this package serves both as an actual CLI and a library for building other clients. ZeroInstall.Publish ZeroInstall.Publish Utilities for creating and modifying feed files. Dependencies flowchart TD commands[ZeroInstall.Commands] --> services commands --> desktop_integration publish[ZeroInstall.Publish] --> client publish --> archives publish --> desktop_integration services[ZeroInstall.Services] --> archives archives[ZeroInstall.Archives] --> store desktop_integration[ZeroInstall.DesktopIntegration] --> store client[ZeroInstall.Client] --> model store[ZeroInstall.Store] --> model model[ZeroInstall.Model]"
  },
  "model.html": {
    "href": "model.html",
    "title": "Data model | Zero Install .NET API",
    "summary": "Data model The ZeroInstall.Model namespace contains the data model for the Zero Install feed format with the Feed class as the entry point. The ZeroInstall.Model.Capabilities namespace contains the data model for capabilities extension for the feed format. Serialization These classes are serialized to and from XML using .NET's XmlSerializer. The serialization code is generated at compile-time for better performance. Normalization After deserialization from XML a feed is in a non-normalized form. Before it can be used by Zero Install's other Services it needs to be normalized, by calling the .Normalize() method. This will: Propagate values from <group>s to <implementation>s Extract <manifest-digest>s from <implementation id='...'> Convert <implementation main='...'> to <command>s etc. However, if you intend to edit a feed and save it as XML again, you should not call the .Normalize() method, in order to preserve the feed's structure. Nullability Required fields in the data model are marked as non-nullable. However, in a Feed instance deserialized from XML these fields may be null anyway. Calling .Normalize() throws an InvalidDataException if any required/non-nullable fields are unset. Therefore, only a normalized Feed should be treated as \"null-safe\"."
  },
  "publish.html": {
    "href": "publish.html",
    "title": "Publishing | Zero Install .NET API",
    "summary": "Publishing The ZeroInstall.Publish namespace provides utilities for creating and modifying feed files. This provides the basis for the Zero Install Publishing Tools. You can also use it to create your own tools. Feed signing The SignedFeed class provides a wrapper around Feed that adds OpenPGP signatures to feed files when saving. Set missing values The .SetMissing() extension method for Implementation sets missing properties by downloading, extracting and hashing files as needed. Feed editing The FeedEditing class is a container for editing feeds with an Undo system."
  },
  "services.html": {
    "href": "services.html",
    "title": "Services | Zero Install .NET API",
    "summary": "Services The ZeroInstall.Services namespace provides services for solving dependencies, downloading implementations, executing apps, etc.. Dependency injection The ServiceProvider class provides instances of various services. You can think of it as a hard-coded dependency injection container. We use this instead of a runtime DI system to avoid the performance impact of reflection, keeping the cold-start time short. This is important so that starting a cached program with 0install run does not add a significant overhead when compared to launching it directly. To instantiate the service provider you need to provide the constructor with an ITaskHandler. You should use exactly one instance of the service provider per user request to ensure consistent state during execution. Rather than instantiating the service provider class, another pattern used in the Zero Install code-base is to inherit from it. You can also use the .AddZeroInstall() extension method for IServiceCollection to replace the service provider with .NET's built-in DI framework. Sample use-case A simplified version of the 0install run logic can be implemented using the Zero Install services as follows: Pass Requirements to ISolver.Solve() and get Selections. Pass Selections to ISelectionsManager.GetUncachedImplementations() and get uncached Implementation. Pass Implementation to IFetcher.Fetch(). v Pass Selections to IExecutor.Start(). Sample code for implementing this in various languages: C# Visual Basic .NET F# IronPython"
  }
}