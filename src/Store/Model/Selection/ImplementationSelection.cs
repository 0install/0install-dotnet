// Copyright Bastian Eicher et al.
// Licensed under the GNU Lesser Public License

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Xml.Serialization;
using NanoByte.Common;

namespace ZeroInstall.Store.Model.Selection
{
    /// <summary>
    /// An executable implementation of a <see cref="Feed"/> as a part of a <see cref="Selections"/>.
    /// </summary>
    /// <remarks>This class does not contain information on how to download the implementation in case it is not in cache. That must be obtained from a <see cref="Implementation"/> instance.</remarks>
    /// <seealso cref="Selections.Implementations"/>
    [XmlType("selection", Namespace = Feed.XmlNamespace)]
    [SuppressMessage("Microsoft.Design", "CA1036:OverrideMethodsOnComparableTypes", Justification = "IComparable is only used for deterministic ordering")]
    public sealed class ImplementationSelection : ImplementationBase, IInterfaceUriBindingContainer, ICloneable<ImplementationSelection>, IEquatable<ImplementationSelection>, IComparable<ImplementationSelection>
    {
        /// <inheritdoc/>
        internal override IEnumerable<Implementation> Implementations => Enumerable.Empty<Implementation>();

        /// <summary>
        /// The URI or local path of the interface this implementation is for.
        /// </summary>
        [Description("The URI or local path of the interface this implementation is for.")]
        [XmlIgnore]
        public FeedUri InterfaceUri { get; set; }

        /// <summary>
        /// The URL or local path of the feed that contains this implementation.
        /// <see cref="FeedUri.FromDistributionPrefix"/> is prepended if data is pulled from a native package manager.
        /// If <c>null</c> or <see cref="string.Empty"/> use <see cref="InterfaceUri"/> instead.
        /// </summary>
        [Description("The URL or local path of the feed that contains this implementation. \"distribution:\" is prepended if data is pulled from a native package manager. If null or empty use InterfaceUri instead.")]
        [XmlIgnore]
        public FeedUri? FromFeed { get; set; }

        #region XML serialization
        /// <summary>Used for XML serialization.</summary>
        /// <seealso cref="InterfaceUri"/>
        [SuppressMessage("Microsoft.Design", "CA1056:UriPropertiesShouldNotBeStrings", Justification = "Used for XML serialization")]
        [XmlAttribute("interface"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Never)]
        public string? InterfaceUriString { get => InterfaceUri?.ToStringRfc(); set => InterfaceUri = (value == null) ? null : new FeedUri(value); }

        /// <summary>Used for XML serialization.</summary>
        /// <seealso cref="FromFeed"/>
        [XmlAttribute("from-feed"), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Never)]
        public string? FromFeedString { get => FromFeed?.ToStringRfc(); set => FromFeed = (value == null) ? null : new FeedUri(value); }

        /// <summary>
        /// Used for XML serialization.
        /// </summary>
        public ImplementationSelection() {}
        #endregion

        /// <summary>
        /// A file which, if present, indicates that the selection is still valid. This is sometimes used with distribution-provided selections. If not present and the ID starts with "package:", you'll need to query the distribution's package manager to check that this version is still installed.
        /// </summary>
        [Description("A file which, if present, indicates that the selection is still valid. This is sometimes used with distribution-provided selections. If not present and the ID starts with \"package:\", you'll need to query the distribution's package manager to check that this version is still installed.")]
        [XmlAttribute("quick-test-file")]
        public string? QuickTestFile { get; set; }

        /// <summary>
        /// All <see cref="Implementation"/>s that were considered by the solver when this one was chosen. May be <c>null</c> when generated by an external solver.
        /// </summary>
        [Browsable(false)]
        [XmlIgnore]
        public IEnumerable<SelectionCandidate>? Candidates { get; }

        /// <summary>
        /// Creates a new implementation selection.
        /// </summary>
        /// <param name="candidates">All candidates that were considered for selection (including the selected one). These are used to present the user with possible alternatives.</param>
        public ImplementationSelection(IEnumerable<SelectionCandidate> candidates)
        {
            Candidates = candidates.ToList();
        }

        /// <inheritdoc/>
        public override void Normalize(FeedUri? feedUri = null)
        {
            base.Normalize(feedUri);

            EnsureNotNull(InterfaceUri, "interface", "selection");
        }

        #region Conversion
        /// <inheritdoc/>
        public override string ToString() => base.ToString() + " (" + InterfaceUri + ")";
        #endregion

        #region Clone
        /// <summary>
        /// Creates a deep copy of this <see cref="ImplementationSelection"/>
        /// </summary>
        /// <returns>The cloned <see cref="ImplementationSelection"/>.</returns>
        ImplementationSelection ICloneable<ImplementationSelection>.Clone()
        {
            var implementation = new ImplementationSelection {InterfaceUri = InterfaceUri, FromFeed = FromFeed, QuickTestFile = QuickTestFile};
            CloneFromTo(this, implementation);
            return implementation;
        }

        /// <summary>
        /// Creates a deep copy of this <see cref="ImplementationSelection"/> instance.
        /// </summary>
        /// <returns>The new copy of the <see cref="ImplementationSelection"/>.</returns>
        public override Element Clone() => ((ICloneable<ImplementationSelection>)this).Clone();
        #endregion

        #region Equality
        /// <inheritdoc/>
        public bool Equals(ImplementationSelection other)
            => other != null
            && base.Equals(other)
            && InterfaceUri == other.InterfaceUri
            && FromFeed == other.FromFeed
            && QuickTestFile == other.QuickTestFile;

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            if (obj == null) return false;
            if (obj == this) return true;
            return obj is ImplementationSelection selection && Equals(selection);
        }

        /// <inheritdoc/>
        public override int GetHashCode()
            => HashCode.Combine(base.GetHashCode(), InterfaceUri, FromFeed, QuickTestFile);
        #endregion

        #region Comparison
        /// <inheritdoc/>
        public int CompareTo(ImplementationSelection other)
            => StringComparer.Ordinal.Compare(InterfaceUri.ToStringRfc(), other.InterfaceUri.ToStringRfc());
        #endregion
    }
}
